using ConceptMatrix.Models;
using ConceptMatrix.Utility;
using ConceptMatrix.ViewModel;
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Media.Media3D;
using Microsoft.Win32;
using System.IO;
using Newtonsoft.Json;
using System.Windows.Controls.Primitives;
using System.Collections.Generic;
using System.Linq;

namespace ConceptMatrix.Views
{
    /// <summary>
    /// Interaction logic for CharacterDetailsView5.xaml
    /// </summary>
    public partial class CharacterDetailsView5 : UserControl
    {
        #region Savestate01 Strings
        public string Race_Sav01;

        public string Root_Sav01;
        public string Abdomen_Sav01;
        public string Throw_Sav01;
        public string Waist_Sav01;
        public string SpineA_Sav01;
        public string LegLeft_Sav01;
        public string LegRight_Sav01;
        public string HolsterLeft_Sav01;
        public string HolsterRight_Sav01;
        public string SheatheLeft_Sav01;
        public string SheatheRight_Sav01;
        public string SpineB_Sav01;
        public string ClothBackALeft_Sav01;
        public string ClothBackARight_Sav01;
        public string ClothFrontALeft_Sav01;
        public string ClothFrontARight_Sav01;
        public string ClothSideALeft_Sav01;
        public string ClothSideARight_Sav01;
        public string KneeLeft_Sav01;
        public string KneeRight_Sav01;
        public string BreastLeft_Sav01;
        public string BreastRight_Sav01;
        public string SpineC_Sav01;
        public string ClothBackBLeft_Sav01;
        public string ClothBackBRight_Sav01;
        public string ClothFrontBLeft_Sav01;
        public string ClothFrontBRight_Sav01;
        public string ClothSideBLeft_Sav01;
        public string ClothSideBRight_Sav01;
        public string CalfLeft_Sav01;
        public string CalfRight_Sav01;
        public string ScabbardLeft_Sav01;
        public string ScabbardRight_Sav01;
        public string Neck_Sav01;
        public string ClavicleLeft_Sav01;
        public string ClavicleRight_Sav01;
        public string ClothBackCLeft_Sav01;
        public string ClothBackCRight_Sav01;
        public string ClothFrontCLeft_Sav01;
        public string ClothFrontCRight_Sav01;
        public string ClothSideCLeft_Sav01;
        public string ClothSideCRight_Sav01;
        public string PoleynLeft_Sav01;
        public string PoleynRight_Sav01;
        public string FootLeft_Sav01;
        public string FootRight_Sav01;
        public string Head_Sav01;
        public string ArmLeft_Sav01;
        public string ArmRight_Sav01;
        public string PauldronLeft_Sav01;
        public string PauldronRight_Sav01;
        public string Unknown00_Sav01;
        public string ToesLeft_Sav01;
        public string ToesRight_Sav01;
        public string HairA_Sav01;
        public string HairFrontLeft_Sav01;
        public string HairFrontRight_Sav01;
        public string EarLeft_Sav01;
        public string EarRight_Sav01;
        public string ForearmLeft_Sav01;
        public string ForearmRight_Sav01;
        public string ShoulderLeft_Sav01;
        public string ShoulderRight_Sav01;
        public string HairB_Sav01;
        public string HandLeft_Sav01;
        public string HandRight_Sav01;
        public string ShieldLeft_Sav01;
        public string ShieldRight_Sav01;
        public string EarringALeft_Sav01;
        public string EarringARight_Sav01;
        public string ElbowLeft_Sav01;
        public string ElbowRight_Sav01;
        public string CouterLeft_Sav01;
        public string CouterRight_Sav01;
        public string WristLeft_Sav01;
        public string WristRight_Sav01;
        public string IndexALeft_Sav01;
        public string IndexARight_Sav01;
        public string PinkyALeft_Sav01;
        public string PinkyARight_Sav01;
        public string RingALeft_Sav01;
        public string RingARight_Sav01;
        public string MiddleALeft_Sav01;
        public string MiddleARight_Sav01;
        public string ThumbALeft_Sav01;
        public string ThumbARight_Sav01;
        public string WeaponLeft_Sav01;
        public string WeaponRight_Sav01;
        public string EarringBLeft_Sav01;
        public string EarringBRight_Sav01;
        public string IndexBLeft_Sav01;
        public string IndexBRight_Sav01;
        public string PinkyBLeft_Sav01;
        public string PinkyBRight_Sav01;
        public string RingBLeft_Sav01;
        public string RingBRight_Sav01;
        public string MiddleBLeft_Sav01;
        public string MiddleBRight_Sav01;
        public string ThumbBLeft_Sav01;
        public string ThumbBRight_Sav01;
        public string TailA_Sav01;
        public string TailB_Sav01;
        public string TailC_Sav01;
        public string TailD_Sav01;
        public string TailE_Sav01;
        public string RootHead_Sav01;
        public string Jaw_Sav01;
        public string EyelidLowerLeft_Sav01;
        public string EyelidLowerRight_Sav01;
        public string EyeLeft_Sav01;
        public string EyeRight_Sav01;
        public string Nose_Sav01;
        public string CheekLeft_Sav01;
        public string HrothWhiskersLeft_Sav01;
        public string CheekRight_Sav01;
        public string HrothWhiskersRight_Sav01;
        public string LipsLeft_Sav01;
        public string HrothEyebrowLeft_Sav01;
        public string LipsRight_Sav01;
        public string HrothEyebrowRight_Sav01;
        public string EyebrowLeft_Sav01;
        public string HrothBridge_Sav01;
        public string EyebrowRight_Sav01;
        public string HrothBrowLeft_Sav01;
        public string Bridge_Sav01;
        public string HrothBrowRight_Sav01;
        public string BrowLeft_Sav01;
        public string HrothJawUpper_Sav01;
        public string BrowRight_Sav01;
        public string HrothLipUpper_Sav01;
        public string LipUpperA_Sav01;
        public string HrothEyelidUpperLeft_Sav01;
        public string EyelidUpperLeft_Sav01;
        public string HrothEyelidUpperRight_Sav01;
        public string EyelidUpperRight_Sav01;
        public string HrothLipsLeft_Sav01;
        public string LipLowerA_Sav01;
        public string HrothLipsRight_Sav01;
        public string VieraEar01ALeft_Sav01;
        public string LipUpperB_Sav01;
        public string HrothLipUpperLeft_Sav01;
        public string VieraEar01ARight_Sav01;
        public string LipLowerB_Sav01;
        public string HrothLipUpperRight_Sav01;
        public string VieraEar02ALeft_Sav01;
        public string HrothLipLower_Sav01;
        public string VieraEar02ARight_Sav01;
        public string VieraEar03ALeft_Sav01;
        public string VieraEar03ARight_Sav01;
        public string VieraEar04ALeft_Sav01;
        public string VieraEar04ARight_Sav01;
        public string VieraLipLowerA_Sav01;
        public string VieraLipUpperB_Sav01;
        public string VieraEar01BLeft_Sav01;
        public string VieraEar01BRight_Sav01;
        public string VieraEar02BLeft_Sav01;
        public string VieraEar02BRight_Sav01;
        public string VieraEar03BLeft_Sav01;
        public string VieraEar03BRight_Sav01;
        public string VieraEar04BLeft_Sav01;
        public string VieraEar04BRight_Sav01;
        public string VieraLipLowerB_Sav01;
        public string ExRootHair_Sav01;
        public string ExHairA_Sav01;
        public string ExHairB_Sav01;
        public string ExHairC_Sav01;
        public string ExHairD_Sav01;
        public string ExHairE_Sav01;
        public string ExHairF_Sav01;
        public string ExHairG_Sav01;
        public string ExHairH_Sav01;
        public string ExHairI_Sav01;
        public string ExHairJ_Sav01;
        public string ExHairK_Sav01;
        public string ExHairL_Sav01;
        public string ExRootMet_Sav01;
        public string ExMetA_Sav01;
        public string ExMetB_Sav01;
        public string ExMetC_Sav01;
        public string ExMetD_Sav01;
        public string ExMetE_Sav01;
        public string ExMetF_Sav01;
        public string ExMetG_Sav01;
        public string ExMetH_Sav01;
        public string ExMetI_Sav01;
        public string ExMetJ_Sav01;
        public string ExMetK_Sav01;
        public string ExMetL_Sav01;
        public string ExMetM_Sav01;
        public string ExMetN_Sav01;
        public string ExMetO_Sav01;
        public string ExMetP_Sav01;
        public string ExMetQ_Sav01;
        public string ExMetR_Sav01;
        public string ExRootTop_Sav01;
        public string ExTopA_Sav01;
        public string ExTopB_Sav01;
        public string ExTopC_Sav01;
        public string ExTopD_Sav01;
        public string ExTopE_Sav01;
        public string ExTopF_Sav01;
        public string ExTopG_Sav01;
        public string ExTopH_Sav01;
        public string ExTopI_Sav01;
        #endregion
        #region Savestate02 Strings
        public string Race_Sav02;

        public string Root_Sav02;
        public string Abdomen_Sav02;
        public string Throw_Sav02;
        public string Waist_Sav02;
        public string SpineA_Sav02;
        public string LegLeft_Sav02;
        public string LegRight_Sav02;
        public string HolsterLeft_Sav02;
        public string HolsterRight_Sav02;
        public string SheatheLeft_Sav02;
        public string SheatheRight_Sav02;
        public string SpineB_Sav02;
        public string ClothBackALeft_Sav02;
        public string ClothBackARight_Sav02;
        public string ClothFrontALeft_Sav02;
        public string ClothFrontARight_Sav02;
        public string ClothSideALeft_Sav02;
        public string ClothSideARight_Sav02;
        public string KneeLeft_Sav02;
        public string KneeRight_Sav02;
        public string BreastLeft_Sav02;
        public string BreastRight_Sav02;
        public string SpineC_Sav02;
        public string ClothBackBLeft_Sav02;
        public string ClothBackBRight_Sav02;
        public string ClothFrontBLeft_Sav02;
        public string ClothFrontBRight_Sav02;
        public string ClothSideBLeft_Sav02;
        public string ClothSideBRight_Sav02;
        public string CalfLeft_Sav02;
        public string CalfRight_Sav02;
        public string ScabbardLeft_Sav02;
        public string ScabbardRight_Sav02;
        public string Neck_Sav02;
        public string ClavicleLeft_Sav02;
        public string ClavicleRight_Sav02;
        public string ClothBackCLeft_Sav02;
        public string ClothBackCRight_Sav02;
        public string ClothFrontCLeft_Sav02;
        public string ClothFrontCRight_Sav02;
        public string ClothSideCLeft_Sav02;
        public string ClothSideCRight_Sav02;
        public string PoleynLeft_Sav02;
        public string PoleynRight_Sav02;
        public string FootLeft_Sav02;
        public string FootRight_Sav02;
        public string Head_Sav02;
        public string ArmLeft_Sav02;
        public string ArmRight_Sav02;
        public string PauldronLeft_Sav02;
        public string PauldronRight_Sav02;
        public string Unknown00_Sav02;
        public string ToesLeft_Sav02;
        public string ToesRight_Sav02;
        public string HairA_Sav02;
        public string HairFrontLeft_Sav02;
        public string HairFrontRight_Sav02;
        public string EarLeft_Sav02;
        public string EarRight_Sav02;
        public string ForearmLeft_Sav02;
        public string ForearmRight_Sav02;
        public string ShoulderLeft_Sav02;
        public string ShoulderRight_Sav02;
        public string HairB_Sav02;
        public string HandLeft_Sav02;
        public string HandRight_Sav02;
        public string ShieldLeft_Sav02;
        public string ShieldRight_Sav02;
        public string EarringALeft_Sav02;
        public string EarringARight_Sav02;
        public string ElbowLeft_Sav02;
        public string ElbowRight_Sav02;
        public string CouterLeft_Sav02;
        public string CouterRight_Sav02;
        public string WristLeft_Sav02;
        public string WristRight_Sav02;
        public string IndexALeft_Sav02;
        public string IndexARight_Sav02;
        public string PinkyALeft_Sav02;
        public string PinkyARight_Sav02;
        public string RingALeft_Sav02;
        public string RingARight_Sav02;
        public string MiddleALeft_Sav02;
        public string MiddleARight_Sav02;
        public string ThumbALeft_Sav02;
        public string ThumbARight_Sav02;
        public string WeaponLeft_Sav02;
        public string WeaponRight_Sav02;
        public string EarringBLeft_Sav02;
        public string EarringBRight_Sav02;
        public string IndexBLeft_Sav02;
        public string IndexBRight_Sav02;
        public string PinkyBLeft_Sav02;
        public string PinkyBRight_Sav02;
        public string RingBLeft_Sav02;
        public string RingBRight_Sav02;
        public string MiddleBLeft_Sav02;
        public string MiddleBRight_Sav02;
        public string ThumbBLeft_Sav02;
        public string ThumbBRight_Sav02;
        public string TailA_Sav02;
        public string TailB_Sav02;
        public string TailC_Sav02;
        public string TailD_Sav02;
        public string TailE_Sav02;
        public string RootHead_Sav02;
        public string Jaw_Sav02;
        public string EyelidLowerLeft_Sav02;
        public string EyelidLowerRight_Sav02;
        public string EyeLeft_Sav02;
        public string EyeRight_Sav02;
        public string Nose_Sav02;
        public string CheekLeft_Sav02;
        public string HrothWhiskersLeft_Sav02;
        public string CheekRight_Sav02;
        public string HrothWhiskersRight_Sav02;
        public string LipsLeft_Sav02;
        public string HrothEyebrowLeft_Sav02;
        public string LipsRight_Sav02;
        public string HrothEyebrowRight_Sav02;
        public string EyebrowLeft_Sav02;
        public string HrothBridge_Sav02;
        public string EyebrowRight_Sav02;
        public string HrothBrowLeft_Sav02;
        public string Bridge_Sav02;
        public string HrothBrowRight_Sav02;
        public string BrowLeft_Sav02;
        public string HrothJawUpper_Sav02;
        public string BrowRight_Sav02;
        public string HrothLipUpper_Sav02;
        public string LipUpperA_Sav02;
        public string HrothEyelidUpperLeft_Sav02;
        public string EyelidUpperLeft_Sav02;
        public string HrothEyelidUpperRight_Sav02;
        public string EyelidUpperRight_Sav02;
        public string HrothLipsLeft_Sav02;
        public string LipLowerA_Sav02;
        public string HrothLipsRight_Sav02;
        public string VieraEar01ALeft_Sav02;
        public string LipUpperB_Sav02;
        public string HrothLipUpperLeft_Sav02;
        public string VieraEar01ARight_Sav02;
        public string LipLowerB_Sav02;
        public string HrothLipUpperRight_Sav02;
        public string VieraEar02ALeft_Sav02;
        public string HrothLipLower_Sav02;
        public string VieraEar02ARight_Sav02;
        public string VieraEar03ALeft_Sav02;
        public string VieraEar03ARight_Sav02;
        public string VieraEar04ALeft_Sav02;
        public string VieraEar04ARight_Sav02;
        public string VieraLipLowerA_Sav02;
        public string VieraLipUpperB_Sav02;
        public string VieraEar01BLeft_Sav02;
        public string VieraEar01BRight_Sav02;
        public string VieraEar02BLeft_Sav02;
        public string VieraEar02BRight_Sav02;
        public string VieraEar03BLeft_Sav02;
        public string VieraEar03BRight_Sav02;
        public string VieraEar04BLeft_Sav02;
        public string VieraEar04BRight_Sav02;
        public string VieraLipLowerB_Sav02;
        public string ExRootHair_Sav02;
        public string ExHairA_Sav02;
        public string ExHairB_Sav02;
        public string ExHairC_Sav02;
        public string ExHairD_Sav02;
        public string ExHairE_Sav02;
        public string ExHairF_Sav02;
        public string ExHairG_Sav02;
        public string ExHairH_Sav02;
        public string ExHairI_Sav02;
        public string ExHairJ_Sav02;
        public string ExHairK_Sav02;
        public string ExHairL_Sav02;
        public string ExRootMet_Sav02;
        public string ExMetA_Sav02;
        public string ExMetB_Sav02;
        public string ExMetC_Sav02;
        public string ExMetD_Sav02;
        public string ExMetE_Sav02;
        public string ExMetF_Sav02;
        public string ExMetG_Sav02;
        public string ExMetH_Sav02;
        public string ExMetI_Sav02;
        public string ExMetJ_Sav02;
        public string ExMetK_Sav02;
        public string ExMetL_Sav02;
        public string ExMetM_Sav02;
        public string ExMetN_Sav02;
        public string ExMetO_Sav02;
        public string ExMetP_Sav02;
        public string ExMetQ_Sav02;
        public string ExMetR_Sav02;
        public string ExRootTop_Sav02;
        public string ExTopA_Sav02;
        public string ExTopB_Sav02;
        public string ExTopC_Sav02;
        public string ExTopD_Sav02;
        public string ExTopE_Sav02;
        public string ExTopF_Sav02;
        public string ExTopG_Sav02;
        public string ExTopH_Sav02;
        public string ExTopI_Sav02;
        #endregion
        #region Bools
        public bool HeadSaved01;
        public bool HairSaved01;
        public bool EarringsSaved01;
        public bool BodySaved01;
        public bool LeftArmSaved01;
        public bool RightArmSaved01;
        public bool ClothesSaved01;
        public bool WeaponsSaved01;
        public bool LeftHandSaved01;
        public bool RightHandSaved01;
        public bool WaistSaved01;
        public bool LeftLegSaved01;
        public bool RightLegSaved01;
        public bool HelmSaved01;
        public bool TopSaved01;

        public bool HeadSaved02;
        public bool HairSaved02;
        public bool EarringsSaved02;
        public bool BodySaved02;
        public bool LeftArmSaved02;
        public bool RightArmSaved02;
        public bool ClothesSaved02;
        public bool WeaponsSaved02;
        public bool LeftHandSaved02;
        public bool RightHandSaved02;
        public bool WaistSaved02;
        public bool LeftLegSaved02;
        public bool RightLegSaved02;
        public bool HelmSaved02;
        public bool TopSaved02;

        public bool HeadAdvLoad;
        public bool HairAdvLoad;
        public bool EarringsAdvLoad;
        public bool BodyAdvLoad;
        public bool LeftArmAdvLoad;
        public bool RightArmAdvLoad;
        public bool ClothesAdvLoad;
        public bool WeaponsAdvLoad;
        public bool LeftHandAdvLoad;
        public bool RightHandAdvLoad;
        public bool WaistAdvLoad;
        public bool LeftLegAdvLoad;
        public bool RightLegAdvLoad;
        public bool HelmAdvLoad;
        public bool TopAdvLoad;
        #endregion
 
        public CharacterDetails CharacterDetails { get => (CharacterDetails)BaseViewModel.model; set => BaseViewModel.model = value; }
        private string GAS(params string[] args) => MemoryManager.GetAddressString(args);
        private readonly Mem m = MemoryManager.Instance.MemLib;
        private bool ReadTetriaryFromRunTime = false;
        private CharacterOffsets c = Settings.Instance.Character;
        private ToggleButton[] exhair_buttons, exmet_buttons, extop_buttons;
        private bool toggle_helm_parenting = false;

        enum FaceRace
        {
            Middy,
            Hroth,
            Viera
        }
        private FaceRace face_check = FaceRace.Middy;

        #region BoneTree
        public class BoneNode
        {
            private readonly string BonesOffset;
            private HashSet<BoneNode> children;
            public BoneNode(string offset)
            {
                BonesOffset = offset;
                children = new HashSet<BoneNode>();
            }

            public string Get()
            {
                return BonesOffset;
            }
            public BoneNode Child(string offset)
            {
                BoneNode childnode = new BoneNode(offset);
                children.Add(childnode);
                return childnode;
            }
            public void Add(BoneNode bnode)
            {
                children.Add(bnode);
            }
            public void Remove(BoneNode bnode)
            {
                children.Remove(bnode);
            }
            public IEnumerator<BoneNode> GetEnumerator()
            {
                return children.GetEnumerator();
            }
        }

        public BoneNode
            bone_lumbar,
            bone_thora,
            bone_cerv,
            bone_neck,
            bone_face,
            bone_face_middy,
            bone_face_viera,
            bone_face_hroth,
            bone_clav_l,
            bone_clav_r,
            bone_arm_l,
            bone_arm_r,
            bone_forearm_l,
            bone_forearm_r,
            bone_hand_l,
            bone_hand_r,
            bone_thumb_l,
            bone_thumb_r,
            bone_index_l,
            bone_index_r,
            bone_middle_l,
            bone_middle_r,
            bone_ring_l,
            bone_ring_r,
            bone_pinky_l,
            bone_pinky_r,
            bone_waist,
            bone_leg_l,
            bone_leg_r,
            bone_knee_l,
            bone_knee_r,
            bone_calf_l,
            bone_calf_r,
            bone_foot_l,
            bone_foot_r,
            bone_tail_waist,
            bone_tail_a,
            bone_tail_b,
            bone_tail_c,
            bone_tail_d,
            bone_eye_l,
            bone_eye_r;
        public BoneNode[] bone_exhair;
        public BoneNode[] bone_exmet;
        public BoneNode[] bone_viera_ear_l;
        public BoneNode[] bone_viera_ear_r;


        public BoneNode InitBonetree ()
        {
            BoneNode root_tree = new BoneNode(Settings.Instance.Character.Body.Bones.Root_X);
            #region torso tree
            bone_lumbar = root_tree.Child(Settings.Instance.Character.Body.Bones.SpineA_X);
            bone_thora = bone_lumbar.Child(Settings.Instance.Character.Body.Bones.SpineB_X);
            bone_cerv = bone_thora.Child(Settings.Instance.Character.Body.Bones.SpineC_X);
            bone_thora.Child(Settings.Instance.Character.Body.Bones.BreastLeft_X);
            bone_thora.Child(Settings.Instance.Character.Body.Bones.BreastRight_X);
            bone_thora.Child(Settings.Instance.Character.Body.Bones.ScabbardLeft_X);
            bone_thora.Child(Settings.Instance.Character.Body.Bones.ScabbardRight_X);
            bone_neck = bone_cerv.Child(Settings.Instance.Character.Body.Bones.Neck_X);
            #endregion
            #region clothes tree
            /*
            bone_lumbar.Child(Settings.Instance.Character.Body.Bones.ClothBackALeft_X);
            bone_lumbar.Child(Settings.Instance.Character.Body.Bones.ClothBackBLeft_X);
            bone_lumbar.Child(Settings.Instance.Character.Body.Bones.ClothBackCLeft_X);
            bone_lumbar.Child(Settings.Instance.Character.Body.Bones.ClothBackARight_X);
            bone_lumbar.Child(Settings.Instance.Character.Body.Bones.ClothBackBRight_X);
            bone_lumbar.Child(Settings.Instance.Character.Body.Bones.ClothBackCRight_X);
            bone_lumbar.Child(Settings.Instance.Character.Body.Bones.ClothSideALeft_X);
            bone_lumbar.Child(Settings.Instance.Character.Body.Bones.ClothSideBLeft_X);
            bone_lumbar.Child(Settings.Instance.Character.Body.Bones.ClothSideCLeft_X);
            bone_lumbar.Child(Settings.Instance.Character.Body.Bones.ClothSideARight_X);
            bone_lumbar.Child(Settings.Instance.Character.Body.Bones.ClothSideBRight_X);
            bone_lumbar.Child(Settings.Instance.Character.Body.Bones.ClothSideCRight_X);
            bone_lumbar.Child(Settings.Instance.Character.Body.Bones.ClothFrontALeft_X);
            bone_lumbar.Child(Settings.Instance.Character.Body.Bones.ClothFrontBLeft_X);
            bone_lumbar.Child(Settings.Instance.Character.Body.Bones.ClothFrontCLeft_X);
            bone_lumbar.Child(Settings.Instance.Character.Body.Bones.ClothFrontARight_X);
            bone_lumbar.Child(Settings.Instance.Character.Body.Bones.ClothFrontBRight_X);
            bone_lumbar.Child(Settings.Instance.Character.Body.Bones.ClothFrontCRight_X);
            */
            #endregion
            #region facebone (middy) tree
            bone_face = bone_neck.Child(Settings.Instance.Character.Body.Bones.Head_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.Nose_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.Jaw_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.EyelidLowerLeft_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.EyelidLowerRight_X);
            bone_eye_l = bone_face.Child(Settings.Instance.Character.Body.Bones.EyeLeft_X);
            bone_eye_l.Child(Settings.Instance.Character.Body.Bones.EyeRight_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.EarLeft_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.EarRight_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.EarringALeft_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.EarringBLeft_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.EarringARight_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.EarringBRight_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.HairFrontLeft_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.HairFrontRight_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.HairA_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.HairB_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.CheekLeft_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.CheekRight_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.LipsLeft_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.LipsRight_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.EyebrowLeft_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.EyebrowRight_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.Bridge_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.BrowLeft_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.BrowRight_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.LipUpperA_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.EyelidUpperRight_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.LipLowerA_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.LipUpperB_X);
            bone_face.Child(Settings.Instance.Character.Body.Bones.LipLowerB_X);
            bone_face_middy = bone_face;
            #endregion
            #region facebone hroth tree
            bone_face_hroth = new BoneNode(Settings.Instance.Character.Body.Bones.Head_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.Nose_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.Jaw_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.EyelidLowerLeft_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.EyelidLowerRight_X);
            bone_face_hroth.Add(bone_eye_l);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.EarLeft_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.EarRight_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.EarringALeft_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.EarringBLeft_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.EarringARight_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.EarringBRight_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.HairFrontLeft_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.HairFrontRight_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.HairA_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.HairB_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.HrothEyebrowLeft_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.HrothEyebrowRight_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.HrothBridge_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.HrothBrowLeft_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.HrothBrowRight_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.HrothJawUpper_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.HrothLipUpper_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.HrothEyelidUpperLeft_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.HrothEyelidUpperRight_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.HrothLipsLeft_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.HrothLipsRight_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.HrothLipUpperLeft_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.HrothLipUpperRight_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.HrothLipLower_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.HrothWhiskersLeft_X);
            bone_face_hroth.Child(Settings.Instance.Character.Body.Bones.HrothWhiskersRight_X);
            #endregion
            #region facebone viera tree
            bone_face_viera = new BoneNode(Settings.Instance.Character.Body.Bones.Head_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.Nose_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.Jaw_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.EyelidLowerLeft_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.EyelidLowerRight_X);
            bone_face_viera.Add(bone_eye_l);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.EarLeft_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.EarRight_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.EarringALeft_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.EarringBLeft_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.EarringARight_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.EarringBRight_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.HairFrontLeft_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.HairFrontRight_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.HairA_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.HairB_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.CheekLeft_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.CheekRight_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.LipsLeft_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.LipsRight_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.EyebrowLeft_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.EyebrowRight_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.Bridge_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.BrowLeft_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.BrowRight_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.LipUpperA_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.EyelidUpperRight_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.VieraLipLowerA_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.VieraLipUpperB_X);
            bone_face_viera.Child(Settings.Instance.Character.Body.Bones.VieraLipLowerB_X);
            bone_viera_ear_l = new BoneNode[5];
            bone_viera_ear_r = new BoneNode[5];
            bone_viera_ear_l[0] = new BoneNode(Settings.Instance.Character.Body.Bones.VieraEar01ALeft_X);
            bone_viera_ear_r[0] = new BoneNode(Settings.Instance.Character.Body.Bones.VieraEar01ARight_X);
            bone_viera_ear_l[1] = new BoneNode(Settings.Instance.Character.Body.Bones.VieraEar01ALeft_X);
            bone_viera_ear_r[1] = new BoneNode(Settings.Instance.Character.Body.Bones.VieraEar01ARight_X);
            bone_viera_ear_l[2] = new BoneNode(Settings.Instance.Character.Body.Bones.VieraEar02ALeft_X);
            bone_viera_ear_r[2] = new BoneNode(Settings.Instance.Character.Body.Bones.VieraEar02ARight_X);
            bone_viera_ear_l[3] = new BoneNode(Settings.Instance.Character.Body.Bones.VieraEar03ALeft_X);
            bone_viera_ear_r[3] = new BoneNode(Settings.Instance.Character.Body.Bones.VieraEar03ARight_X);
            bone_viera_ear_l[4] = new BoneNode(Settings.Instance.Character.Body.Bones.VieraEar04ALeft_X);
            bone_viera_ear_r[4] = new BoneNode(Settings.Instance.Character.Body.Bones.VieraEar04ARight_X);
            bone_viera_ear_l[0].Child(Settings.Instance.Character.Body.Bones.VieraEar01BLeft_X);
            bone_viera_ear_r[0].Child(Settings.Instance.Character.Body.Bones.VieraEar01BRight_X);
            bone_viera_ear_l[1].Child(Settings.Instance.Character.Body.Bones.VieraEar01BLeft_X);
            bone_viera_ear_r[1].Child(Settings.Instance.Character.Body.Bones.VieraEar01BRight_X);
            bone_viera_ear_l[2].Child(Settings.Instance.Character.Body.Bones.VieraEar02BLeft_X);
            bone_viera_ear_r[2].Child(Settings.Instance.Character.Body.Bones.VieraEar02BRight_X);
            bone_viera_ear_l[3].Child(Settings.Instance.Character.Body.Bones.VieraEar03BLeft_X);
            bone_viera_ear_r[3].Child(Settings.Instance.Character.Body.Bones.VieraEar03BRight_X);
            bone_viera_ear_l[4].Child(Settings.Instance.Character.Body.Bones.VieraEar04BLeft_X);
            bone_viera_ear_r[4].Child(Settings.Instance.Character.Body.Bones.VieraEar04BRight_X);
            #endregion
            #endregion
            #region special handler for eyes
            bone_eye_r = new BoneNode(Settings.Instance.Character.Body.Bones.EyeRight_X);
            bone_eye_r.Child(Settings.Instance.Character.Body.Bones.EyeLeft_X);
            #endregion
            #region armbone tree
            bone_clav_l = bone_cerv.Child(Settings.Instance.Character.Body.Bones.ClavicleLeft_X);
            bone_arm_l = bone_clav_l.Child(Settings.Instance.Character.Body.Bones.ArmLeft_X);
            bone_arm_l.Child(Settings.Instance.Character.Body.Bones.ShoulderLeft_X);
            bone_arm_l.Child(Settings.Instance.Character.Body.Bones.PauldronLeft_X);
            bone_forearm_l = bone_arm_l.Child(Settings.Instance.Character.Body.Bones.ForearmLeft_X);
            bone_forearm_l.Child(Settings.Instance.Character.Body.Bones.ElbowLeft_X);
            bone_forearm_l.Child(Settings.Instance.Character.Body.Bones.WristLeft_X);
            bone_forearm_l.Child(Settings.Instance.Character.Body.Bones.ShieldLeft_X);
            bone_forearm_l.Child(Settings.Instance.Character.Body.Bones.CouterLeft_X);
            bone_hand_l = bone_forearm_l.Child(Settings.Instance.Character.Body.Bones.HandLeft_X);
            bone_hand_l.Child(Settings.Instance.Character.Body.Bones.WeaponLeft_X);
            bone_thumb_l = bone_hand_l.Child(Settings.Instance.Character.Body.Bones.ThumbALeft_X);
            bone_thumb_l.Child(Settings.Instance.Character.Body.Bones.ThumbBLeft_X);
            bone_index_l = bone_hand_l.Child(Settings.Instance.Character.Body.Bones.IndexALeft_X);
            bone_index_l.Child(Settings.Instance.Character.Body.Bones.IndexBLeft_X);
            bone_middle_l = bone_hand_l.Child(Settings.Instance.Character.Body.Bones.MiddleALeft_X);
            bone_middle_l.Child(Settings.Instance.Character.Body.Bones.MiddleBLeft_X);
            bone_ring_l = bone_hand_l.Child(Settings.Instance.Character.Body.Bones.RingALeft_X);
            bone_ring_l.Child(Settings.Instance.Character.Body.Bones.RingBLeft_X);
            bone_pinky_l = bone_hand_l.Child(Settings.Instance.Character.Body.Bones.PinkyALeft_X);
            bone_pinky_l.Child(Settings.Instance.Character.Body.Bones.PinkyBLeft_X);

            bone_clav_r = bone_cerv.Child(Settings.Instance.Character.Body.Bones.ClavicleRight_X);
            bone_arm_r = bone_clav_r.Child(Settings.Instance.Character.Body.Bones.ArmRight_X);
            bone_arm_r.Child(Settings.Instance.Character.Body.Bones.ShoulderRight_X);
            bone_arm_r.Child(Settings.Instance.Character.Body.Bones.PauldronRight_X);
            bone_forearm_r = bone_arm_r.Child(Settings.Instance.Character.Body.Bones.ForearmRight_X);
            bone_forearm_r.Child(Settings.Instance.Character.Body.Bones.ElbowRight_X);
            bone_forearm_r.Child(Settings.Instance.Character.Body.Bones.WristRight_X);
            bone_forearm_r.Child(Settings.Instance.Character.Body.Bones.ShieldRight_X);
            bone_forearm_r.Child(Settings.Instance.Character.Body.Bones.CouterRight_X);
            bone_hand_r = bone_forearm_r.Child(Settings.Instance.Character.Body.Bones.HandRight_X);
            bone_hand_r.Child(Settings.Instance.Character.Body.Bones.WeaponRight_X);
            bone_thumb_r = bone_hand_r.Child(Settings.Instance.Character.Body.Bones.ThumbARight_X);
            bone_thumb_r.Child(Settings.Instance.Character.Body.Bones.ThumbBRight_X);
            bone_index_r = bone_hand_r.Child(Settings.Instance.Character.Body.Bones.IndexARight_X);
            bone_index_r.Child(Settings.Instance.Character.Body.Bones.IndexBRight_X);
            bone_middle_r = bone_hand_r.Child(Settings.Instance.Character.Body.Bones.MiddleARight_X);
            bone_middle_r.Child(Settings.Instance.Character.Body.Bones.MiddleBRight_X);
            bone_ring_r = bone_hand_r.Child(Settings.Instance.Character.Body.Bones.RingARight_X);
            bone_ring_r.Child(Settings.Instance.Character.Body.Bones.RingBRight_X);
            bone_pinky_r = bone_hand_r.Child(Settings.Instance.Character.Body.Bones.PinkyARight_X);
            bone_pinky_r.Child(Settings.Instance.Character.Body.Bones.PinkyBRight_X);
            #region lower half bones tree
            bone_waist = root_tree.Child(Settings.Instance.Character.Body.Bones.Waist_X);
            bone_waist.Child(Settings.Instance.Character.Body.Bones.SheatheLeft_X);
            bone_waist.Child(Settings.Instance.Character.Body.Bones.SheatheRight_X);
            bone_waist.Child(Settings.Instance.Character.Body.Bones.HolsterLeft_X);
            bone_waist.Child(Settings.Instance.Character.Body.Bones.HolsterRight_X);
            bone_leg_l = bone_waist.Child(Settings.Instance.Character.Body.Bones.LegLeft_X);
            bone_knee_l = bone_leg_l.Child(Settings.Instance.Character.Body.Bones.KneeLeft_X);
            bone_knee_l.Child(Settings.Instance.Character.Body.Bones.PoleynLeft_X);
            bone_calf_l = bone_knee_l.Child(Settings.Instance.Character.Body.Bones.CalfLeft_X);
            bone_foot_l = bone_calf_l.Child(Settings.Instance.Character.Body.Bones.FootLeft_X);
            bone_foot_l.Child(Settings.Instance.Character.Body.Bones.ToesLeft_X);
            
            bone_leg_r = bone_waist.Child(Settings.Instance.Character.Body.Bones.LegRight_X);
            bone_knee_r = bone_leg_r.Child(Settings.Instance.Character.Body.Bones.KneeRight_X);
            bone_knee_r.Child(Settings.Instance.Character.Body.Bones.PoleynRight_X);
            bone_calf_r = bone_knee_r.Child(Settings.Instance.Character.Body.Bones.CalfRight_X);
            bone_foot_r = bone_calf_r.Child(Settings.Instance.Character.Body.Bones.FootRight_X);
            bone_foot_r.Child(Settings.Instance.Character.Body.Bones.ToesRight_X);
            #endregion
            #region tail bones tree
            bone_tail_a = new BoneNode(Settings.Instance.Character.Body.Bones.TailA_X);
            bone_tail_b = bone_tail_a.Child(Settings.Instance.Character.Body.Bones.TailB_X);
            bone_tail_c = bone_tail_b.Child(Settings.Instance.Character.Body.Bones.TailC_X);
            bone_tail_c.Child(Settings.Instance.Character.Body.Bones.TailD_X);
            #endregion
            #region exhair
            bone_exhair = new BoneNode[12];
            bone_exhair[0] = new BoneNode(Settings.Instance.Character.Body.Bones.ExHairA_X);
            bone_exhair[1] = new BoneNode(Settings.Instance.Character.Body.Bones.ExHairB_X);
            bone_exhair[2] = new BoneNode(Settings.Instance.Character.Body.Bones.ExHairC_X);
            bone_exhair[3] = new BoneNode(Settings.Instance.Character.Body.Bones.ExHairD_X);
            bone_exhair[4] = new BoneNode(Settings.Instance.Character.Body.Bones.ExHairE_X);
            bone_exhair[5] = new BoneNode(Settings.Instance.Character.Body.Bones.ExHairF_X);
            bone_exhair[6] = new BoneNode(Settings.Instance.Character.Body.Bones.ExHairG_X);
            bone_exhair[7] = new BoneNode(Settings.Instance.Character.Body.Bones.ExHairH_X);
            bone_exhair[8] = new BoneNode(Settings.Instance.Character.Body.Bones.ExHairI_X);
            bone_exhair[9] = new BoneNode(Settings.Instance.Character.Body.Bones.ExHairJ_X);
            bone_exhair[10] = new BoneNode(Settings.Instance.Character.Body.Bones.ExHairK_X);
            bone_exhair[11] = new BoneNode(Settings.Instance.Character.Body.Bones.ExHairL_X);
            #endregion
            #region exmet
            bone_exmet = new BoneNode[18];
            bone_exmet[0] = new BoneNode(Settings.Instance.Character.Body.Bones.ExMetA_X);
            bone_exmet[1] = new BoneNode(Settings.Instance.Character.Body.Bones.ExMetB_X);
            bone_exmet[2] = new BoneNode(Settings.Instance.Character.Body.Bones.ExMetC_X);
            bone_exmet[3] = new BoneNode(Settings.Instance.Character.Body.Bones.ExMetD_X);
            bone_exmet[4] = new BoneNode(Settings.Instance.Character.Body.Bones.ExMetE_X);
            bone_exmet[5] = new BoneNode(Settings.Instance.Character.Body.Bones.ExMetF_X);
            bone_exmet[6] = new BoneNode(Settings.Instance.Character.Body.Bones.ExMetG_X);
            bone_exmet[7] = new BoneNode(Settings.Instance.Character.Body.Bones.ExMetH_X);
            bone_exmet[8] = new BoneNode(Settings.Instance.Character.Body.Bones.ExMetI_X);
            bone_exmet[9] = new BoneNode(Settings.Instance.Character.Body.Bones.ExMetJ_X);
            bone_exmet[10] = new BoneNode(Settings.Instance.Character.Body.Bones.ExMetK_X);
            bone_exmet[11] = new BoneNode(Settings.Instance.Character.Body.Bones.ExMetL_X);
            bone_exmet[12] = new BoneNode(Settings.Instance.Character.Body.Bones.ExMetM_X);
            bone_exmet[13] = new BoneNode(Settings.Instance.Character.Body.Bones.ExMetN_X);
            bone_exmet[14] = new BoneNode(Settings.Instance.Character.Body.Bones.ExMetO_X);
            bone_exmet[15] = new BoneNode(Settings.Instance.Character.Body.Bones.ExMetP_X);
            bone_exmet[16] = new BoneNode(Settings.Instance.Character.Body.Bones.ExMetQ_X);
            bone_exmet[17] = new BoneNode(Settings.Instance.Character.Body.Bones.ExMetR_X);
            #endregion


            return root_tree;
        }
        public BoneNode bonetree = null;
        #endregion

        public CharacterDetailsView5()
        {
            InitializeComponent();
            if (SaveSettings.Default.HasBackground == false) PoseBG.Opacity = 0;
            MainViewModel.ViewTime5 = this;
            if (SaveSettings.Default.AltPoseRotate == true)
            {
                BoneUpDown.Visibility = Visibility.Hidden;
                BoneUpDown.IsEnabled = false;
                BoneUpDown2.Visibility = Visibility.Hidden;
                BoneUpDown2.IsEnabled = false;
                BoneUpDown3.Visibility = Visibility.Hidden;
                BoneUpDown3.IsEnabled = false;

                BoneSlider.Visibility = Visibility.Visible;
                BoneSlider.IsEnabled = true;
                BoneSlider2.Visibility = Visibility.Visible;
                BoneSlider2.IsEnabled = true;
                BoneSlider3.Visibility = Visibility.Visible;
                BoneSlider3.IsEnabled = true;
            }
            else if (SaveSettings.Default.AltPoseRotate == false)
            {
                BoneUpDown.Visibility = Visibility.Visible;
                BoneUpDown.IsEnabled = true;
                BoneUpDown2.Visibility = Visibility.Visible;
                BoneUpDown2.IsEnabled = true;
                BoneUpDown3.Visibility = Visibility.Visible;
                BoneUpDown3.IsEnabled = true;

                BoneSlider.Visibility = Visibility.Hidden;
                BoneSlider.IsEnabled = false;
                BoneSlider2.Visibility = Visibility.Hidden;
                BoneSlider2.IsEnabled = false;
                BoneSlider3.Visibility = Visibility.Hidden;
                BoneSlider3.IsEnabled = false;
            }
            if (SaveSettings.Default.AltPoseRotate == true)
            {
                BoneSliderButton.IsChecked = true;
            }
            if (SaveSettings.Default.RelativeBones == true)
            {
                ParentingToggle.IsChecked = true;
            }

            exhair_buttons = new ToggleButton[] { ExHairA, ExHairB, ExHairC, ExHairD, ExHairE, ExHairF, ExHairG, ExHairH, ExHairI, ExHairJ, ExHairK, ExHairL };
            exmet_buttons = new ToggleButton[] { ExMetA, ExMetB, ExMetC, ExMetD, ExMetE, ExMetF, ExMetG, ExMetH, ExMetI, ExMetJ, ExMetK, ExMetL, ExMetM, ExMetN, ExMetO, ExMetP, ExMetQ, ExMetR };
            extop_buttons = new ToggleButton[] { ExTopA, ExTopB, ExTopC, ExTopD, ExTopE, ExTopF, ExTopG, ExTopH, ExTopI};
        }
        
        private Vector3D GetEulerAngles() => new Vector3D(CharacterDetails.BoneX, CharacterDetails.BoneY, CharacterDetails.BoneZ);

        public static byte[] GetBytes(Quaternion q)
        {
            List<byte> bytes = new List<byte>(16);
            bytes.AddRange(BitConverter.GetBytes((float)q.X));
            bytes.AddRange(BitConverter.GetBytes((float)q.Y));
            bytes.AddRange(BitConverter.GetBytes((float)q.Z));
            bytes.AddRange(BitConverter.GetBytes((float)q.W));
            return bytes.ToArray();
        }
        #region Slider
        private void BoneSliders_SourceUpdated(object sender, DataTransferEventArgs e)
        {
            if (CharacterDetails.Root_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= Root_Slider;
                    BoneSlider.ValueChanged += Root_Slider;
                }
            }
            if (CharacterDetails.Abdomen_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= Abdomen_Slider;
                    BoneSlider.ValueChanged += Abdomen_Slider;
                }
            }
            if (CharacterDetails.Throw_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= Throw_Slider;
                    BoneSlider.ValueChanged += Throw_Slider;
                }
            }
            if (CharacterDetails.Waist_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= Waist_Slider;
                    BoneSlider.ValueChanged += Waist_Slider;
                }
            }
            if (CharacterDetails.SpineA_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= SpineA_Slider;
                    BoneSlider.ValueChanged += SpineA_Slider;
                }
            }
            if (CharacterDetails.LegLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= LegLeft_Slider;
                    BoneSlider.ValueChanged += LegLeft_Slider;
                }
            }
            if (CharacterDetails.LegRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= LegRight_Slider;
                    BoneSlider.ValueChanged += LegRight_Slider;
                }
            }
            if (CharacterDetails.HolsterLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HolsterLeft_Slider;
                    BoneSlider.ValueChanged += HolsterLeft_Slider;
                }
            }
            if (CharacterDetails.HolsterRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HolsterRight_Slider;
                    BoneSlider.ValueChanged += HolsterRight_Slider;
                }
            }
            if (CharacterDetails.SheatheLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= SheatheLeft_Slider;
                    BoneSlider.ValueChanged += SheatheLeft_Slider;
                }
            }
            if (CharacterDetails.SheatheRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= SheatheRight_Slider;
                    BoneSlider.ValueChanged += SheatheRight_Slider;
                }
            }
            if (CharacterDetails.SpineB_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= SpineB_Slider;
                    BoneSlider.ValueChanged += SpineB_Slider;
                }
            }
            if (CharacterDetails.ClothBackALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothBackALeft_Slider;
                    BoneSlider.ValueChanged += ClothBackALeft_Slider;
                }
            }
            if (CharacterDetails.ClothBackARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothBackARight_Slider;
                    BoneSlider.ValueChanged += ClothBackARight_Slider;
                }
            }
            if (CharacterDetails.ClothFrontALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothFrontALeft_Slider;
                    BoneSlider.ValueChanged += ClothFrontALeft_Slider;
                }
            }
            if (CharacterDetails.ClothFrontARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothFrontARight_Slider;
                    BoneSlider.ValueChanged += ClothFrontARight_Slider;
                }
            }
            if (CharacterDetails.ClothSideALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothSideALeft_Slider;
                    BoneSlider.ValueChanged += ClothSideALeft_Slider;
                }
            }
            if (CharacterDetails.ClothSideARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothSideARight_Slider;
                    BoneSlider.ValueChanged += ClothSideARight_Slider;
                }
            }
            if (CharacterDetails.KneeLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= KneeLeft_Slider;
                    BoneSlider.ValueChanged += KneeLeft_Slider;
                }
            }
            if (CharacterDetails.KneeRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= KneeRight_Slider;
                    BoneSlider.ValueChanged += KneeRight_Slider;
                }
            }
            if (CharacterDetails.BreastLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= BreastLeft_Slider;
                    BoneSlider.ValueChanged += BreastLeft_Slider;
                }
            }
            if (CharacterDetails.BreastRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= BreastRight_Slider;
                    BoneSlider.ValueChanged += BreastRight_Slider;
                }
            }
            if (CharacterDetails.SpineC_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= SpineC_Slider;
                    BoneSlider.ValueChanged += SpineC_Slider;
                }
            }
            if (CharacterDetails.ClothBackBLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothBackBLeft_Slider;
                    BoneSlider.ValueChanged += ClothBackBLeft_Slider;
                }
            }
            if (CharacterDetails.ClothBackBRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothBackBRight_Slider;
                    BoneSlider.ValueChanged += ClothBackBRight_Slider;
                }
            }
            if (CharacterDetails.ClothFrontBLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothFrontBLeft_Slider;
                    BoneSlider.ValueChanged += ClothFrontBLeft_Slider;
                }
            }
            if (CharacterDetails.ClothFrontBRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothFrontBRight_Slider;
                    BoneSlider.ValueChanged += ClothFrontBRight_Slider;
                }
            }
            if (CharacterDetails.ClothSideBLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothSideBLeft_Slider;
                    BoneSlider.ValueChanged += ClothSideBLeft_Slider;
                }
            }
            if (CharacterDetails.ClothSideBRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothSideBRight_Slider;
                    BoneSlider.ValueChanged += ClothSideBRight_Slider;
                }
            }
            if (CharacterDetails.CalfLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= CalfLeft_Slider;
                    BoneSlider.ValueChanged += CalfLeft_Slider;
                }
            }
            if (CharacterDetails.CalfRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= CalfRight_Slider;
                    BoneSlider.ValueChanged += CalfRight_Slider;
                }
            }
            if (CharacterDetails.ScabbardLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ScabbardLeft_Slider;
                    BoneSlider.ValueChanged += ScabbardLeft_Slider;
                }
            }
            if (CharacterDetails.ScabbardRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ScabbardRight_Slider;
                    BoneSlider.ValueChanged += ScabbardRight_Slider;
                }
            }
            if (CharacterDetails.Neck_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= Neck_Slider;
                    BoneSlider.ValueChanged += Neck_Slider;
                }
            }
            if (CharacterDetails.ClavicleLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClavicleLeft_Slider;
                    BoneSlider.ValueChanged += ClavicleLeft_Slider;
                }
            }
            if (CharacterDetails.ClavicleRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClavicleRight_Slider;
                    BoneSlider.ValueChanged += ClavicleRight_Slider;
                }
            }
            if (CharacterDetails.ClothBackCLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothBackCLeft_Slider;
                    BoneSlider.ValueChanged += ClothBackCLeft_Slider;
                }
            }
            if (CharacterDetails.ClothBackCRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothBackCRight_Slider;
                    BoneSlider.ValueChanged += ClothBackCRight_Slider;
                }
            }
            if (CharacterDetails.ClothFrontCLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothFrontCLeft_Slider;
                    BoneSlider.ValueChanged += ClothFrontCLeft_Slider;
                }
            }
            if (CharacterDetails.ClothFrontCRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothFrontCRight_Slider;
                    BoneSlider.ValueChanged += ClothFrontCRight_Slider;
                }
            }
            if (CharacterDetails.ClothSideCLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothSideCLeft_Slider;
                    BoneSlider.ValueChanged += ClothSideCLeft_Slider;
                }
            }
            if (CharacterDetails.ClothSideCRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ClothSideCRight_Slider;
                    BoneSlider.ValueChanged += ClothSideCRight_Slider;
                }
            }
            if (CharacterDetails.PoleynLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= PoleynLeft_Slider;
                    BoneSlider.ValueChanged += PoleynLeft_Slider;
                }
            }
            if (CharacterDetails.PoleynRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= PoleynRight_Slider;
                    BoneSlider.ValueChanged += PoleynRight_Slider;
                }
            }
            if (CharacterDetails.FootLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= FootLeft_Slider;
                    BoneSlider.ValueChanged += FootLeft_Slider;
                }
            }
            if (CharacterDetails.FootRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= FootRight_Slider;
                    BoneSlider.ValueChanged += FootRight_Slider;
                }
            }
            if (CharacterDetails.Head_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= Head_Slider;
                    BoneSlider.ValueChanged += Head_Slider;
                }
            }
            if (CharacterDetails.ArmLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ArmLeft_Slider;
                    BoneSlider.ValueChanged += ArmLeft_Slider;
                }
            }
            if (CharacterDetails.ArmRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ArmRight_Slider;
                    BoneSlider.ValueChanged += ArmRight_Slider;
                }
            }
            if (CharacterDetails.PauldronLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= PauldronLeft_Slider;
                    BoneSlider.ValueChanged += PauldronLeft_Slider;
                }
            }
            if (CharacterDetails.PauldronRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= PauldronRight_Slider;
                    BoneSlider.ValueChanged += PauldronRight_Slider;
                }
            }
            if (CharacterDetails.Unknown00_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= Unknown00_Slider;
                    BoneSlider.ValueChanged += Unknown00_Slider;
                }
            }
            if (CharacterDetails.ToesLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ToesLeft_Slider;
                    BoneSlider.ValueChanged += ToesLeft_Slider;
                }
            }
            if (CharacterDetails.ToesRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ToesRight_Slider;
                    BoneSlider.ValueChanged += ToesRight_Slider;
                }
            }
            if (CharacterDetails.HairA_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HairA_Slider;
                    BoneSlider.ValueChanged += HairA_Slider;
                }
            }
            if (CharacterDetails.HairFrontLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HairFrontLeft_Slider;
                    BoneSlider.ValueChanged += HairFrontLeft_Slider;
                }
            }
            if (CharacterDetails.HairFrontRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HairFrontRight_Slider;
                    BoneSlider.ValueChanged += HairFrontRight_Slider;
                }
            }
            if (CharacterDetails.EarLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EarLeft_Slider;
                    BoneSlider.ValueChanged += EarLeft_Slider;
                }
            }
            if (CharacterDetails.EarRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EarRight_Slider;
                    BoneSlider.ValueChanged += EarRight_Slider;
                }
            }
            if (CharacterDetails.ForearmLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ForearmLeft_Slider;
                    BoneSlider.ValueChanged += ForearmLeft_Slider;
                }
            }
            if (CharacterDetails.ForearmRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ForearmRight_Slider;
                    BoneSlider.ValueChanged += ForearmRight_Slider;
                }
            }
            if (CharacterDetails.ShoulderLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ShoulderLeft_Slider;
                    BoneSlider.ValueChanged += ShoulderLeft_Slider;
                }
            }
            if (CharacterDetails.ShoulderRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ShoulderRight_Slider;
                    BoneSlider.ValueChanged += ShoulderRight_Slider;
                }
            }
            if (CharacterDetails.HairB_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HairB_Slider;
                    BoneSlider.ValueChanged += HairB_Slider;
                }
            }
            if (CharacterDetails.HandLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HandLeft_Slider;
                    BoneSlider.ValueChanged += HandLeft_Slider;
                }
            }
            if (CharacterDetails.HandRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HandRight_Slider;
                    BoneSlider.ValueChanged += HandRight_Slider;
                }
            }
            if (CharacterDetails.ShieldLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ShieldLeft_Slider;
                    BoneSlider.ValueChanged += ShieldLeft_Slider;
                }
            }
            if (CharacterDetails.ShieldRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ShieldRight_Slider;
                    BoneSlider.ValueChanged += ShieldRight_Slider;
                }
            }
            if (CharacterDetails.EarringALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EarringALeft_Slider;
                    BoneSlider.ValueChanged += EarringALeft_Slider;
                }
            }
            if (CharacterDetails.EarringARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EarringARight_Slider;
                    BoneSlider.ValueChanged += EarringARight_Slider;
                }
            }
            if (CharacterDetails.ElbowLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ElbowLeft_Slider;
                    BoneSlider.ValueChanged += ElbowLeft_Slider;
                }
            }
            if (CharacterDetails.ElbowRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ElbowRight_Slider;
                    BoneSlider.ValueChanged += ElbowRight_Slider;
                }
            }
            if (CharacterDetails.CouterLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= CouterLeft_Slider;
                    BoneSlider.ValueChanged += CouterLeft_Slider;
                }
            }
            if (CharacterDetails.CouterRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= CouterRight_Slider;
                    BoneSlider.ValueChanged += CouterRight_Slider;
                }
            }
            if (CharacterDetails.WristLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= WristLeft_Slider;
                    BoneSlider.ValueChanged += WristLeft_Slider;
                }
            }
            if (CharacterDetails.WristRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= WristRight_Slider;
                    BoneSlider.ValueChanged += WristRight_Slider;
                }
            }
            if (CharacterDetails.IndexALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= IndexALeft_Slider;
                    BoneSlider.ValueChanged += IndexALeft_Slider;
                }
            }
            if (CharacterDetails.IndexARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= IndexARight_Slider;
                    BoneSlider.ValueChanged += IndexARight_Slider;
                }
            }
            if (CharacterDetails.PinkyALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= PinkyALeft_Slider;
                    BoneSlider.ValueChanged += PinkyALeft_Slider;
                }
            }
            if (CharacterDetails.PinkyARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= PinkyARight_Slider;
                    BoneSlider.ValueChanged += PinkyARight_Slider;
                }
            }
            if (CharacterDetails.RingALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= RingALeft_Slider;
                    BoneSlider.ValueChanged += RingALeft_Slider;
                }
            }
            if (CharacterDetails.RingARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= RingARight_Slider;
                    BoneSlider.ValueChanged += RingARight_Slider;
                }
            }
            if (CharacterDetails.MiddleALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= MiddleALeft_Slider;
                    BoneSlider.ValueChanged += MiddleALeft_Slider;
                }
            }
            if (CharacterDetails.MiddleARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= MiddleARight_Slider;
                    BoneSlider.ValueChanged += MiddleARight_Slider;
                }
            }
            if (CharacterDetails.ThumbALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ThumbALeft_Slider;
                    BoneSlider.ValueChanged += ThumbALeft_Slider;
                }
            }
            if (CharacterDetails.ThumbARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ThumbARight_Slider;
                    BoneSlider.ValueChanged += ThumbARight_Slider;
                }
            }
            if (CharacterDetails.WeaponLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= WeaponLeft_Slider;
                    BoneSlider.ValueChanged += WeaponLeft_Slider;
                }
            }
            if (CharacterDetails.WeaponRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= WeaponRight_Slider;
                    BoneSlider.ValueChanged += WeaponRight_Slider;
                }
            }
            if (CharacterDetails.EarringBLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EarringBLeft_Slider;
                    BoneSlider.ValueChanged += EarringBLeft_Slider;
                }
            }
            if (CharacterDetails.EarringBRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EarringBRight_Slider;
                    BoneSlider.ValueChanged += EarringBRight_Slider;
                }
            }
            if (CharacterDetails.IndexBLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= IndexBLeft_Slider;
                    BoneSlider.ValueChanged += IndexBLeft_Slider;
                }
            }
            if (CharacterDetails.IndexBRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= IndexBRight_Slider;
                    BoneSlider.ValueChanged += IndexBRight_Slider;
                }
            }
            if (CharacterDetails.PinkyBLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= PinkyBLeft_Slider;
                    BoneSlider.ValueChanged += PinkyBLeft_Slider;
                }
            }
            if (CharacterDetails.PinkyBRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= PinkyBRight_Slider;
                    BoneSlider.ValueChanged += PinkyBRight_Slider;
                }
            }
            if (CharacterDetails.RingBLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= RingBLeft_Slider;
                    BoneSlider.ValueChanged += RingBLeft_Slider;
                }
            }
            if (CharacterDetails.RingBRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= RingBRight_Slider;
                    BoneSlider.ValueChanged += RingBRight_Slider;
                }
            }
            if (CharacterDetails.MiddleBLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= MiddleBLeft_Slider;
                    BoneSlider.ValueChanged += MiddleBLeft_Slider;
                }
            }
            if (CharacterDetails.MiddleBRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= MiddleBRight_Slider;
                    BoneSlider.ValueChanged += MiddleBRight_Slider;
                }
            }
            if (CharacterDetails.ThumbBLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ThumbBLeft_Slider;
                    BoneSlider.ValueChanged += ThumbBLeft_Slider;
                }
            }
            if (CharacterDetails.ThumbBRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ThumbBRight_Slider;
                    BoneSlider.ValueChanged += ThumbBRight_Slider;
                }
            }
            if (CharacterDetails.TailA_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= TailA_Slider;
                    BoneSlider.ValueChanged += TailA_Slider;
                }
            }
            if (CharacterDetails.TailB_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= TailB_Slider;
                    BoneSlider.ValueChanged += TailB_Slider;
                }
            }
            if (CharacterDetails.TailC_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= TailC_Slider;
                    BoneSlider.ValueChanged += TailC_Slider;
                }
            }
            if (CharacterDetails.TailD_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= TailD_Slider;
                    BoneSlider.ValueChanged += TailD_Slider;
                }
            }
            if (CharacterDetails.TailE_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= TailE_Slider;
                    BoneSlider.ValueChanged += TailE_Slider;
                }
            }
            if (CharacterDetails.RootHead_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= RootHead_Slider;
                    BoneSlider.ValueChanged += RootHead_Slider;
                }
            }
            if (CharacterDetails.Jaw_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= Jaw_Slider;
                    BoneSlider.ValueChanged += Jaw_Slider;
                }
            }
            if (CharacterDetails.EyelidLowerLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EyelidLowerLeft_Slider;
                    BoneSlider.ValueChanged += EyelidLowerLeft_Slider;
                }
            }
            if (CharacterDetails.EyelidLowerRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EyelidLowerRight_Slider;
                    BoneSlider.ValueChanged += EyelidLowerRight_Slider;
                }
            }
            if (CharacterDetails.EyeLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EyeLeft_Slider;
                    BoneSlider.ValueChanged += EyeLeft_Slider;
                }
            }
            if (CharacterDetails.EyeRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EyeRight_Slider;
                    BoneSlider.ValueChanged += EyeRight_Slider;
                }
            }
            if (CharacterDetails.Nose_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= Nose_Slider;
                    BoneSlider.ValueChanged += Nose_Slider;
                }
            }
            if (CharacterDetails.CheekLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= CheekLeft_Slider;
                    BoneSlider.ValueChanged += CheekLeft_Slider;
                }
            }
            if (CharacterDetails.HrothWhiskersLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothWhiskersLeft_Slider;
                    BoneSlider.ValueChanged += HrothWhiskersLeft_Slider;
                }
            }
            if (CharacterDetails.CheekRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= CheekRight_Slider;
                    BoneSlider.ValueChanged += CheekRight_Slider;
                }
            }
            if (CharacterDetails.HrothWhiskersRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothWhiskersRight_Slider;
                    BoneSlider.ValueChanged += HrothWhiskersRight_Slider;
                }
            }
            if (CharacterDetails.LipsLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= LipsLeft_Slider;
                    BoneSlider.ValueChanged += LipsLeft_Slider;
                }
            }
            if (CharacterDetails.HrothEyebrowLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothEyebrowLeft_Slider;
                    BoneSlider.ValueChanged += HrothEyebrowLeft_Slider;
                }
            }
            if (CharacterDetails.LipsRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= LipsRight_Slider;
                    BoneSlider.ValueChanged += LipsRight_Slider;
                }
            }
            if (CharacterDetails.HrothEyebrowRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothEyebrowRight_Slider;
                    BoneSlider.ValueChanged += HrothEyebrowRight_Slider;
                }
            }
            if (CharacterDetails.EyebrowLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EyebrowLeft_Slider;
                    BoneSlider.ValueChanged += EyebrowLeft_Slider;
                }
            }
            if (CharacterDetails.HrothBridge_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothBridge_Slider;
                    BoneSlider.ValueChanged += HrothBridge_Slider;
                }
            }
            if (CharacterDetails.EyebrowRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EyebrowRight_Slider;
                    BoneSlider.ValueChanged += EyebrowRight_Slider;
                }
            }
            if (CharacterDetails.HrothBrowLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothBrowLeft_Slider;
                    BoneSlider.ValueChanged += HrothBrowLeft_Slider;
                }
            }
            if (CharacterDetails.Bridge_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= Bridge_Slider;
                    BoneSlider.ValueChanged += Bridge_Slider;
                }
            }
            if (CharacterDetails.HrothBrowRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothBrowRight_Slider;
                    BoneSlider.ValueChanged += HrothBrowRight_Slider;
                }
            }
            if (CharacterDetails.BrowLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= BrowLeft_Slider;
                    BoneSlider.ValueChanged += BrowLeft_Slider;
                }
            }
            if (CharacterDetails.HrothJawUpper_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothJawUpper_Slider;
                    BoneSlider.ValueChanged += HrothJawUpper_Slider;
                }
            }
            if (CharacterDetails.BrowRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= BrowRight_Slider;
                    BoneSlider.ValueChanged += BrowRight_Slider;
                }
            }
            if (CharacterDetails.HrothLipUpper_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothLipUpper_Slider;
                    BoneSlider.ValueChanged += HrothLipUpper_Slider;
                }
            }
            if (CharacterDetails.LipUpperA_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= LipUpperA_Slider;
                    BoneSlider.ValueChanged += LipUpperA_Slider;
                }
            }
            if (CharacterDetails.HrothEyelidUpperLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothEyelidUpperLeft_Slider;
                    BoneSlider.ValueChanged += HrothEyelidUpperLeft_Slider;
                }
            }
            if (CharacterDetails.EyelidUpperLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EyelidUpperLeft_Slider;
                    BoneSlider.ValueChanged += EyelidUpperLeft_Slider;
                }
            }
            if (CharacterDetails.HrothEyelidUpperRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothEyelidUpperRight_Slider;
                    BoneSlider.ValueChanged += HrothEyelidUpperRight_Slider;
                }
            }
            if (CharacterDetails.EyelidUpperRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= EyelidUpperRight_Slider;
                    BoneSlider.ValueChanged += EyelidUpperRight_Slider;
                }
            }
            if (CharacterDetails.HrothLipsLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothLipsLeft_Slider;
                    BoneSlider.ValueChanged += HrothLipsLeft_Slider;
                }
            }
            if (CharacterDetails.LipLowerA_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= LipLowerA_Slider;
                    BoneSlider.ValueChanged += LipLowerA_Slider;
                }
            }
            if (CharacterDetails.HrothLipsRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothLipsRight_Slider;
                    BoneSlider.ValueChanged += HrothLipsRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar01ALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar01ALeft_Slider;
                    BoneSlider.ValueChanged += VieraEar01ALeft_Slider;
                }
            }
            if (CharacterDetails.LipUpperB_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= LipUpperB_Slider;
                    BoneSlider.ValueChanged += LipUpperB_Slider;
                }
            }
            if (CharacterDetails.HrothLipUpperLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothLipUpperLeft_Slider;
                    BoneSlider.ValueChanged += HrothLipUpperLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar01ARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar01ARight_Slider;
                    BoneSlider.ValueChanged += VieraEar01ARight_Slider;
                }
            }
            if (CharacterDetails.LipLowerB_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= LipLowerB_Slider;
                    BoneSlider.ValueChanged += LipLowerB_Slider;
                }
            }
            if (CharacterDetails.HrothLipUpperRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothLipUpperRight_Slider;
                    BoneSlider.ValueChanged += HrothLipUpperRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar02ALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar02ALeft_Slider;
                    BoneSlider.ValueChanged += VieraEar02ALeft_Slider;
                }
            }
            if (CharacterDetails.HrothLipLower_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= HrothLipLower_Slider;
                    BoneSlider.ValueChanged += HrothLipLower_Slider;
                }
            }
            if (CharacterDetails.VieraEar02ARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar02ARight_Slider;
                    BoneSlider.ValueChanged += VieraEar02ARight_Slider;
                }
            }
            if (CharacterDetails.VieraEar03ALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar03ALeft_Slider;
                    BoneSlider.ValueChanged += VieraEar03ALeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar03ARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar03ARight_Slider;
                    BoneSlider.ValueChanged += VieraEar03ARight_Slider;
                }
            }
            if (CharacterDetails.VieraEar04ALeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar04ALeft_Slider;
                    BoneSlider.ValueChanged += VieraEar04ALeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar04ARight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar04ARight_Slider;
                    BoneSlider.ValueChanged += VieraEar04ARight_Slider;
                }
            }
            if (CharacterDetails.VieraLipLowerA_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraLipLowerA_Slider;
                    BoneSlider.ValueChanged += VieraLipLowerA_Slider;
                }
            }
            if (CharacterDetails.VieraLipUpperB_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraLipUpperB_Slider;
                    BoneSlider.ValueChanged += VieraLipUpperB_Slider;
                }
            }
            if (CharacterDetails.VieraEar01BLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar01BLeft_Slider;
                    BoneSlider.ValueChanged += VieraEar01BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar01BRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar01BRight_Slider;
                    BoneSlider.ValueChanged += VieraEar01BRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar02BLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar02BLeft_Slider;
                    BoneSlider.ValueChanged += VieraEar02BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar02BRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar02BRight_Slider;
                    BoneSlider.ValueChanged += VieraEar02BRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar03BLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar03BLeft_Slider;
                    BoneSlider.ValueChanged += VieraEar03BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar03BRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar03BRight_Slider;
                    BoneSlider.ValueChanged += VieraEar03BRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar04BLeft_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar04BLeft_Slider;
                    BoneSlider.ValueChanged += VieraEar04BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar04BRight_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraEar04BRight_Slider;
                    BoneSlider.ValueChanged += VieraEar04BRight_Slider;
                }
            }
            if (CharacterDetails.VieraLipLowerB_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= VieraLipLowerB_Slider;
                    BoneSlider.ValueChanged += VieraLipLowerB_Slider;
                }
            }
            if (CharacterDetails.ExHairA_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairA_Slider;
                    BoneSlider.ValueChanged += ExHairA_Slider;
                }
            }
            if (CharacterDetails.ExHairB_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairB_Slider;
                    BoneSlider.ValueChanged += ExHairB_Slider;
                }
            }
            if (CharacterDetails.ExHairC_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairC_Slider;
                    BoneSlider.ValueChanged += ExHairC_Slider;
                }
            }
            if (CharacterDetails.ExHairD_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairD_Slider;
                    BoneSlider.ValueChanged += ExHairD_Slider;
                }
            }
            if (CharacterDetails.ExHairE_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairE_Slider;
                    BoneSlider.ValueChanged += ExHairE_Slider;
                }
            }
            if (CharacterDetails.ExHairF_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairF_Slider;
                    BoneSlider.ValueChanged += ExHairF_Slider;
                }
            }
            if (CharacterDetails.ExHairG_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairG_Slider;
                    BoneSlider.ValueChanged += ExHairG_Slider;
                }
            }
            if (CharacterDetails.ExHairH_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairH_Slider;
                    BoneSlider.ValueChanged += ExHairH_Slider;
                }
            }
            if (CharacterDetails.ExHairI_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairI_Slider;
                    BoneSlider.ValueChanged += ExHairI_Slider;
                }
            }
            if (CharacterDetails.ExHairJ_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairJ_Slider;
                    BoneSlider.ValueChanged += ExHairJ_Slider;
                }
            }
            if (CharacterDetails.ExHairK_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairK_Slider;
                    BoneSlider.ValueChanged += ExHairK_Slider;
                }
            }
            if (CharacterDetails.ExHairL_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExHairL_Slider;
                    BoneSlider.ValueChanged += ExHairL_Slider;
                }
            }
            if (CharacterDetails.ExMetA_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetA_Slider;
                    BoneSlider.ValueChanged += ExMetA_Slider;
                }
            }
            if (CharacterDetails.ExMetB_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetB_Slider;
                    BoneSlider.ValueChanged += ExMetB_Slider;
                }
            }
            if (CharacterDetails.ExMetC_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetC_Slider;
                    BoneSlider.ValueChanged += ExMetC_Slider;
                }
            }
            if (CharacterDetails.ExMetD_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetD_Slider;
                    BoneSlider.ValueChanged += ExMetD_Slider;
                }
            }
            if (CharacterDetails.ExMetE_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetE_Slider;
                    BoneSlider.ValueChanged += ExMetE_Slider;
                }
            }
            if (CharacterDetails.ExMetF_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetF_Slider;
                    BoneSlider.ValueChanged += ExMetF_Slider;
                }
            }
            if (CharacterDetails.ExMetG_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetG_Slider;
                    BoneSlider.ValueChanged += ExMetG_Slider;
                }
            }
            if (CharacterDetails.ExMetH_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetH_Slider;
                    BoneSlider.ValueChanged += ExMetH_Slider;
                }
            }
            if (CharacterDetails.ExMetI_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetI_Slider;
                    BoneSlider.ValueChanged += ExMetI_Slider;
                }
            }
            if (CharacterDetails.ExMetJ_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetJ_Slider;
                    BoneSlider.ValueChanged += ExMetJ_Slider;
                }
            }
            if (CharacterDetails.ExMetK_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetK_Slider;
                    BoneSlider.ValueChanged += ExMetK_Slider;
                }
            }
            if (CharacterDetails.ExMetL_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetL_Slider;
                    BoneSlider.ValueChanged += ExMetL_Slider;
                }
            }
            if (CharacterDetails.ExMetM_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetM_Slider;
                    BoneSlider.ValueChanged += ExMetM_Slider;
                }
            }
            if (CharacterDetails.ExMetN_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetN_Slider;
                    BoneSlider.ValueChanged += ExMetN_Slider;
                }
            }
            if (CharacterDetails.ExMetO_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetO_Slider;
                    BoneSlider.ValueChanged += ExMetO_Slider;
                }
            }
            if (CharacterDetails.ExMetP_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetP_Slider;
                    BoneSlider.ValueChanged += ExMetP_Slider;
                }
            }
            if (CharacterDetails.ExMetQ_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetQ_Slider;
                    BoneSlider.ValueChanged += ExMetQ_Slider;
                }
            }
            if (CharacterDetails.ExMetR_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExMetR_Slider;
                    BoneSlider.ValueChanged += ExMetR_Slider;
                }
            }
            if (CharacterDetails.ExTopA_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExTopA_Slider;
                    BoneSlider.ValueChanged += ExTopA_Slider;
                }
            }
            if (CharacterDetails.ExTopB_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExTopB_Slider;
                    BoneSlider.ValueChanged += ExTopB_Slider;
                }
            }
            if (CharacterDetails.ExTopC_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExTopC_Slider;
                    BoneSlider.ValueChanged += ExTopC_Slider;
                }
            }
            if (CharacterDetails.ExTopD_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExTopD_Slider;
                    BoneSlider.ValueChanged += ExTopD_Slider;
                }
            }
            if (CharacterDetails.ExTopE_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExTopE_Slider;
                    BoneSlider.ValueChanged += ExTopE_Slider;
                }
            }
            if (CharacterDetails.ExTopF_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExTopF_Slider;
                    BoneSlider.ValueChanged += ExTopF_Slider;
                }
            }
            if (CharacterDetails.ExTopG_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExTopG_Slider;
                    BoneSlider.ValueChanged += ExTopG_Slider;
                }
            }
            if (CharacterDetails.ExTopH_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExTopH_Slider;
                    BoneSlider.ValueChanged += ExTopH_Slider;
                }
            }
            if (CharacterDetails.ExTopI_Rotate)
            {
                if (BoneSlider.IsKeyboardFocusWithin || BoneSlider.IsMouseOver)
                {
                    BoneSlider.ValueChanged -= ExTopI_Slider;
                    BoneSlider.ValueChanged += ExTopI_Slider;
                }
            }
        }
        private void BoneSliders2_SourceUpdated(object sender, DataTransferEventArgs e)
        {
            if (CharacterDetails.Root_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= Root_Slider;
                    BoneSlider2.ValueChanged += Root_Slider;
                }
            }
            if (CharacterDetails.Abdomen_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= Abdomen_Slider;
                    BoneSlider2.ValueChanged += Abdomen_Slider;
                }
            }
            if (CharacterDetails.Throw_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= Throw_Slider;
                    BoneSlider2.ValueChanged += Throw_Slider;
                }
            }
            if (CharacterDetails.Waist_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= Waist_Slider;
                    BoneSlider2.ValueChanged += Waist_Slider;
                }
            }
            if (CharacterDetails.SpineA_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= SpineA_Slider;
                    BoneSlider2.ValueChanged += SpineA_Slider;
                }
            }
            if (CharacterDetails.LegLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= LegLeft_Slider;
                    BoneSlider2.ValueChanged += LegLeft_Slider;
                }
            }
            if (CharacterDetails.LegRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= LegRight_Slider;
                    BoneSlider2.ValueChanged += LegRight_Slider;
                }
            }
            if (CharacterDetails.HolsterLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HolsterLeft_Slider;
                    BoneSlider2.ValueChanged += HolsterLeft_Slider;
                }
            }
            if (CharacterDetails.HolsterRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HolsterRight_Slider;
                    BoneSlider2.ValueChanged += HolsterRight_Slider;
                }
            }
            if (CharacterDetails.SheatheLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= SheatheLeft_Slider;
                    BoneSlider2.ValueChanged += SheatheLeft_Slider;
                }
            }
            if (CharacterDetails.SheatheRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= SheatheRight_Slider;
                    BoneSlider2.ValueChanged += SheatheRight_Slider;
                }
            }
            if (CharacterDetails.SpineB_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= SpineB_Slider;
                    BoneSlider2.ValueChanged += SpineB_Slider;
                }
            }
            if (CharacterDetails.ClothBackALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothBackALeft_Slider;
                    BoneSlider2.ValueChanged += ClothBackALeft_Slider;
                }
            }
            if (CharacterDetails.ClothBackARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothBackARight_Slider;
                    BoneSlider2.ValueChanged += ClothBackARight_Slider;
                }
            }
            if (CharacterDetails.ClothFrontALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothFrontALeft_Slider;
                    BoneSlider2.ValueChanged += ClothFrontALeft_Slider;
                }
            }
            if (CharacterDetails.ClothFrontARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothFrontARight_Slider;
                    BoneSlider2.ValueChanged += ClothFrontARight_Slider;
                }
            }
            if (CharacterDetails.ClothSideALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothSideALeft_Slider;
                    BoneSlider2.ValueChanged += ClothSideALeft_Slider;
                }
            }
            if (CharacterDetails.ClothSideARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothSideARight_Slider;
                    BoneSlider2.ValueChanged += ClothSideARight_Slider;
                }
            }
            if (CharacterDetails.KneeLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= KneeLeft_Slider;
                    BoneSlider2.ValueChanged += KneeLeft_Slider;
                }
            }
            if (CharacterDetails.KneeRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= KneeRight_Slider;
                    BoneSlider2.ValueChanged += KneeRight_Slider;
                }
            }
            if (CharacterDetails.BreastLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= BreastLeft_Slider;
                    BoneSlider2.ValueChanged += BreastLeft_Slider;
                }
            }
            if (CharacterDetails.BreastRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= BreastRight_Slider;
                    BoneSlider2.ValueChanged += BreastRight_Slider;
                }
            }
            if (CharacterDetails.SpineC_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= SpineC_Slider;
                    BoneSlider2.ValueChanged += SpineC_Slider;
                }
            }
            if (CharacterDetails.ClothBackBLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothBackBLeft_Slider;
                    BoneSlider2.ValueChanged += ClothBackBLeft_Slider;
                }
            }
            if (CharacterDetails.ClothBackBRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothBackBRight_Slider;
                    BoneSlider2.ValueChanged += ClothBackBRight_Slider;
                }
            }
            if (CharacterDetails.ClothFrontBLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothFrontBLeft_Slider;
                    BoneSlider2.ValueChanged += ClothFrontBLeft_Slider;
                }
            }
            if (CharacterDetails.ClothFrontBRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothFrontBRight_Slider;
                    BoneSlider2.ValueChanged += ClothFrontBRight_Slider;
                }
            }
            if (CharacterDetails.ClothSideBLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothSideBLeft_Slider;
                    BoneSlider2.ValueChanged += ClothSideBLeft_Slider;
                }
            }
            if (CharacterDetails.ClothSideBRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothSideBRight_Slider;
                    BoneSlider2.ValueChanged += ClothSideBRight_Slider;
                }
            }
            if (CharacterDetails.CalfLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= CalfLeft_Slider;
                    BoneSlider2.ValueChanged += CalfLeft_Slider;
                }
            }
            if (CharacterDetails.CalfRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= CalfRight_Slider;
                    BoneSlider2.ValueChanged += CalfRight_Slider;
                }
            }
            if (CharacterDetails.ScabbardLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ScabbardLeft_Slider;
                    BoneSlider2.ValueChanged += ScabbardLeft_Slider;
                }
            }
            if (CharacterDetails.ScabbardRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ScabbardRight_Slider;
                    BoneSlider2.ValueChanged += ScabbardRight_Slider;
                }
            }
            if (CharacterDetails.Neck_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= Neck_Slider;
                    BoneSlider2.ValueChanged += Neck_Slider;
                }
            }
            if (CharacterDetails.ClavicleLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClavicleLeft_Slider;
                    BoneSlider2.ValueChanged += ClavicleLeft_Slider;
                }
            }
            if (CharacterDetails.ClavicleRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClavicleRight_Slider;
                    BoneSlider2.ValueChanged += ClavicleRight_Slider;
                }
            }
            if (CharacterDetails.ClothBackCLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothBackCLeft_Slider;
                    BoneSlider2.ValueChanged += ClothBackCLeft_Slider;
                }
            }
            if (CharacterDetails.ClothBackCRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothBackCRight_Slider;
                    BoneSlider2.ValueChanged += ClothBackCRight_Slider;
                }
            }
            if (CharacterDetails.ClothFrontCLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothFrontCLeft_Slider;
                    BoneSlider2.ValueChanged += ClothFrontCLeft_Slider;
                }
            }
            if (CharacterDetails.ClothFrontCRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothFrontCRight_Slider;
                    BoneSlider2.ValueChanged += ClothFrontCRight_Slider;
                }
            }
            if (CharacterDetails.ClothSideCLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothSideCLeft_Slider;
                    BoneSlider2.ValueChanged += ClothSideCLeft_Slider;
                }
            }
            if (CharacterDetails.ClothSideCRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ClothSideCRight_Slider;
                    BoneSlider2.ValueChanged += ClothSideCRight_Slider;
                }
            }
            if (CharacterDetails.PoleynLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= PoleynLeft_Slider;
                    BoneSlider2.ValueChanged += PoleynLeft_Slider;
                }
            }
            if (CharacterDetails.PoleynRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= PoleynRight_Slider;
                    BoneSlider2.ValueChanged += PoleynRight_Slider;
                }
            }
            if (CharacterDetails.FootLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= FootLeft_Slider;
                    BoneSlider2.ValueChanged += FootLeft_Slider;
                }
            }
            if (CharacterDetails.FootRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= FootRight_Slider;
                    BoneSlider2.ValueChanged += FootRight_Slider;
                }
            }
            if (CharacterDetails.Head_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= Head_Slider;
                    BoneSlider2.ValueChanged += Head_Slider;
                }
            }
            if (CharacterDetails.ArmLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ArmLeft_Slider;
                    BoneSlider2.ValueChanged += ArmLeft_Slider;
                }
            }
            if (CharacterDetails.ArmRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ArmRight_Slider;
                    BoneSlider2.ValueChanged += ArmRight_Slider;
                }
            }
            if (CharacterDetails.PauldronLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= PauldronLeft_Slider;
                    BoneSlider2.ValueChanged += PauldronLeft_Slider;
                }
            }
            if (CharacterDetails.PauldronRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= PauldronRight_Slider;
                    BoneSlider2.ValueChanged += PauldronRight_Slider;
                }
            }
            if (CharacterDetails.Unknown00_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= Unknown00_Slider;
                    BoneSlider2.ValueChanged += Unknown00_Slider;
                }
            }
            if (CharacterDetails.ToesLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ToesLeft_Slider;
                    BoneSlider2.ValueChanged += ToesLeft_Slider;
                }
            }
            if (CharacterDetails.ToesRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ToesRight_Slider;
                    BoneSlider2.ValueChanged += ToesRight_Slider;
                }
            }
            if (CharacterDetails.HairA_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HairA_Slider;
                    BoneSlider2.ValueChanged += HairA_Slider;
                }
            }
            if (CharacterDetails.HairFrontLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HairFrontLeft_Slider;
                    BoneSlider2.ValueChanged += HairFrontLeft_Slider;
                }
            }
            if (CharacterDetails.HairFrontRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HairFrontRight_Slider;
                    BoneSlider2.ValueChanged += HairFrontRight_Slider;
                }
            }
            if (CharacterDetails.EarLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EarLeft_Slider;
                    BoneSlider2.ValueChanged += EarLeft_Slider;
                }
            }
            if (CharacterDetails.EarRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EarRight_Slider;
                    BoneSlider2.ValueChanged += EarRight_Slider;
                }
            }
            if (CharacterDetails.ForearmLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ForearmLeft_Slider;
                    BoneSlider2.ValueChanged += ForearmLeft_Slider;
                }
            }
            if (CharacterDetails.ForearmRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ForearmRight_Slider;
                    BoneSlider2.ValueChanged += ForearmRight_Slider;
                }
            }
            if (CharacterDetails.ShoulderLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ShoulderLeft_Slider;
                    BoneSlider2.ValueChanged += ShoulderLeft_Slider;
                }
            }
            if (CharacterDetails.ShoulderRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ShoulderRight_Slider;
                    BoneSlider2.ValueChanged += ShoulderRight_Slider;
                }
            }
            if (CharacterDetails.HairB_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HairB_Slider;
                    BoneSlider2.ValueChanged += HairB_Slider;
                }
            }
            if (CharacterDetails.HandLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HandLeft_Slider;
                    BoneSlider2.ValueChanged += HandLeft_Slider;
                }
            }
            if (CharacterDetails.HandRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HandRight_Slider;
                    BoneSlider2.ValueChanged += HandRight_Slider;
                }
            }
            if (CharacterDetails.ShieldLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ShieldLeft_Slider;
                    BoneSlider2.ValueChanged += ShieldLeft_Slider;
                }
            }
            if (CharacterDetails.ShieldRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ShieldRight_Slider;
                    BoneSlider2.ValueChanged += ShieldRight_Slider;
                }
            }
            if (CharacterDetails.EarringALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EarringALeft_Slider;
                    BoneSlider2.ValueChanged += EarringALeft_Slider;
                }
            }
            if (CharacterDetails.EarringARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EarringARight_Slider;
                    BoneSlider2.ValueChanged += EarringARight_Slider;
                }
            }
            if (CharacterDetails.ElbowLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ElbowLeft_Slider;
                    BoneSlider2.ValueChanged += ElbowLeft_Slider;
                }
            }
            if (CharacterDetails.ElbowRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ElbowRight_Slider;
                    BoneSlider2.ValueChanged += ElbowRight_Slider;
                }
            }
            if (CharacterDetails.CouterLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= CouterLeft_Slider;
                    BoneSlider2.ValueChanged += CouterLeft_Slider;
                }
            }
            if (CharacterDetails.CouterRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= CouterRight_Slider;
                    BoneSlider2.ValueChanged += CouterRight_Slider;
                }
            }
            if (CharacterDetails.WristLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= WristLeft_Slider;
                    BoneSlider2.ValueChanged += WristLeft_Slider;
                }
            }
            if (CharacterDetails.WristRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= WristRight_Slider;
                    BoneSlider2.ValueChanged += WristRight_Slider;
                }
            }
            if (CharacterDetails.IndexALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= IndexALeft_Slider;
                    BoneSlider2.ValueChanged += IndexALeft_Slider;
                }
            }
            if (CharacterDetails.IndexARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= IndexARight_Slider;
                    BoneSlider2.ValueChanged += IndexARight_Slider;
                }
            }
            if (CharacterDetails.PinkyALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= PinkyALeft_Slider;
                    BoneSlider2.ValueChanged += PinkyALeft_Slider;
                }
            }
            if (CharacterDetails.PinkyARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= PinkyARight_Slider;
                    BoneSlider2.ValueChanged += PinkyARight_Slider;
                }
            }
            if (CharacterDetails.RingALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= RingALeft_Slider;
                    BoneSlider2.ValueChanged += RingALeft_Slider;
                }
            }
            if (CharacterDetails.RingARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= RingARight_Slider;
                    BoneSlider2.ValueChanged += RingARight_Slider;
                }
            }
            if (CharacterDetails.MiddleALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= MiddleALeft_Slider;
                    BoneSlider2.ValueChanged += MiddleALeft_Slider;
                }
            }
            if (CharacterDetails.MiddleARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= MiddleARight_Slider;
                    BoneSlider2.ValueChanged += MiddleARight_Slider;
                }
            }
            if (CharacterDetails.ThumbALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ThumbALeft_Slider;
                    BoneSlider2.ValueChanged += ThumbALeft_Slider;
                }
            }
            if (CharacterDetails.ThumbARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ThumbARight_Slider;
                    BoneSlider2.ValueChanged += ThumbARight_Slider;
                }
            }
            if (CharacterDetails.WeaponLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= WeaponLeft_Slider;
                    BoneSlider2.ValueChanged += WeaponLeft_Slider;
                }
            }
            if (CharacterDetails.WeaponRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= WeaponRight_Slider;
                    BoneSlider2.ValueChanged += WeaponRight_Slider;
                }
            }
            if (CharacterDetails.EarringBLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EarringBLeft_Slider;
                    BoneSlider2.ValueChanged += EarringBLeft_Slider;
                }
            }
            if (CharacterDetails.EarringBRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EarringBRight_Slider;
                    BoneSlider2.ValueChanged += EarringBRight_Slider;
                }
            }
            if (CharacterDetails.IndexBLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= IndexBLeft_Slider;
                    BoneSlider2.ValueChanged += IndexBLeft_Slider;
                }
            }
            if (CharacterDetails.IndexBRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= IndexBRight_Slider;
                    BoneSlider2.ValueChanged += IndexBRight_Slider;
                }
            }
            if (CharacterDetails.PinkyBLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= PinkyBLeft_Slider;
                    BoneSlider2.ValueChanged += PinkyBLeft_Slider;
                }
            }
            if (CharacterDetails.PinkyBRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= PinkyBRight_Slider;
                    BoneSlider2.ValueChanged += PinkyBRight_Slider;
                }
            }
            if (CharacterDetails.RingBLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= RingBLeft_Slider;
                    BoneSlider2.ValueChanged += RingBLeft_Slider;
                }
            }
            if (CharacterDetails.RingBRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= RingBRight_Slider;
                    BoneSlider2.ValueChanged += RingBRight_Slider;
                }
            }
            if (CharacterDetails.MiddleBLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= MiddleBLeft_Slider;
                    BoneSlider2.ValueChanged += MiddleBLeft_Slider;
                }
            }
            if (CharacterDetails.MiddleBRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= MiddleBRight_Slider;
                    BoneSlider2.ValueChanged += MiddleBRight_Slider;
                }
            }
            if (CharacterDetails.ThumbBLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ThumbBLeft_Slider;
                    BoneSlider2.ValueChanged += ThumbBLeft_Slider;
                }
            }
            if (CharacterDetails.ThumbBRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ThumbBRight_Slider;
                    BoneSlider2.ValueChanged += ThumbBRight_Slider;
                }
            }
            if (CharacterDetails.TailA_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= TailA_Slider;
                    BoneSlider2.ValueChanged += TailA_Slider;
                }
            }
            if (CharacterDetails.TailB_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= TailB_Slider;
                    BoneSlider2.ValueChanged += TailB_Slider;
                }
            }
            if (CharacterDetails.TailC_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= TailC_Slider;
                    BoneSlider2.ValueChanged += TailC_Slider;
                }
            }
            if (CharacterDetails.TailD_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= TailD_Slider;
                    BoneSlider2.ValueChanged += TailD_Slider;
                }
            }
            if (CharacterDetails.TailE_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= TailE_Slider;
                    BoneSlider2.ValueChanged += TailE_Slider;
                }
            }
            if (CharacterDetails.RootHead_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= RootHead_Slider;
                    BoneSlider2.ValueChanged += RootHead_Slider;
                }
            }
            if (CharacterDetails.Jaw_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= Jaw_Slider;
                    BoneSlider2.ValueChanged += Jaw_Slider;
                }
            }
            if (CharacterDetails.EyelidLowerLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EyelidLowerLeft_Slider;
                    BoneSlider2.ValueChanged += EyelidLowerLeft_Slider;
                }
            }
            if (CharacterDetails.EyelidLowerRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EyelidLowerRight_Slider;
                    BoneSlider2.ValueChanged += EyelidLowerRight_Slider;
                }
            }
            if (CharacterDetails.EyeLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EyeLeft_Slider;
                    BoneSlider2.ValueChanged += EyeLeft_Slider;
                }
            }
            if (CharacterDetails.EyeRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EyeRight_Slider;
                    BoneSlider2.ValueChanged += EyeRight_Slider;
                }
            }
            if (CharacterDetails.Nose_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= Nose_Slider;
                    BoneSlider2.ValueChanged += Nose_Slider;
                }
            }
            if (CharacterDetails.CheekLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= CheekLeft_Slider;
                    BoneSlider2.ValueChanged += CheekLeft_Slider;
                }
            }
            if (CharacterDetails.HrothWhiskersLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothWhiskersLeft_Slider;
                    BoneSlider2.ValueChanged += HrothWhiskersLeft_Slider;
                }
            }
            if (CharacterDetails.CheekRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= CheekRight_Slider;
                    BoneSlider2.ValueChanged += CheekRight_Slider;
                }
            }
            if (CharacterDetails.HrothWhiskersRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothWhiskersRight_Slider;
                    BoneSlider2.ValueChanged += HrothWhiskersRight_Slider;
                }
            }
            if (CharacterDetails.LipsLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= LipsLeft_Slider;
                    BoneSlider2.ValueChanged += LipsLeft_Slider;
                }
            }
            if (CharacterDetails.HrothEyebrowLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothEyebrowLeft_Slider;
                    BoneSlider2.ValueChanged += HrothEyebrowLeft_Slider;
                }
            }
            if (CharacterDetails.LipsRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= LipsRight_Slider;
                    BoneSlider2.ValueChanged += LipsRight_Slider;
                }
            }
            if (CharacterDetails.HrothEyebrowRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothEyebrowRight_Slider;
                    BoneSlider2.ValueChanged += HrothEyebrowRight_Slider;
                }
            }
            if (CharacterDetails.EyebrowLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EyebrowLeft_Slider;
                    BoneSlider2.ValueChanged += EyebrowLeft_Slider;
                }
            }
            if (CharacterDetails.HrothBridge_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothBridge_Slider;
                    BoneSlider2.ValueChanged += HrothBridge_Slider;
                }
            }
            if (CharacterDetails.EyebrowRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EyebrowRight_Slider;
                    BoneSlider2.ValueChanged += EyebrowRight_Slider;
                }
            }
            if (CharacterDetails.HrothBrowLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothBrowLeft_Slider;
                    BoneSlider2.ValueChanged += HrothBrowLeft_Slider;
                }
            }
            if (CharacterDetails.Bridge_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= Bridge_Slider;
                    BoneSlider2.ValueChanged += Bridge_Slider;
                }
            }
            if (CharacterDetails.HrothBrowRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothBrowRight_Slider;
                    BoneSlider2.ValueChanged += HrothBrowRight_Slider;
                }
            }
            if (CharacterDetails.BrowLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= BrowLeft_Slider;
                    BoneSlider2.ValueChanged += BrowLeft_Slider;
                }
            }
            if (CharacterDetails.HrothJawUpper_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothJawUpper_Slider;
                    BoneSlider2.ValueChanged += HrothJawUpper_Slider;
                }
            }
            if (CharacterDetails.BrowRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= BrowRight_Slider;
                    BoneSlider2.ValueChanged += BrowRight_Slider;
                }
            }
            if (CharacterDetails.HrothLipUpper_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothLipUpper_Slider;
                    BoneSlider2.ValueChanged += HrothLipUpper_Slider;
                }
            }
            if (CharacterDetails.LipUpperA_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= LipUpperA_Slider;
                    BoneSlider2.ValueChanged += LipUpperA_Slider;
                }
            }
            if (CharacterDetails.HrothEyelidUpperLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothEyelidUpperLeft_Slider;
                    BoneSlider2.ValueChanged += HrothEyelidUpperLeft_Slider;
                }
            }
            if (CharacterDetails.EyelidUpperLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EyelidUpperLeft_Slider;
                    BoneSlider2.ValueChanged += EyelidUpperLeft_Slider;
                }
            }
            if (CharacterDetails.HrothEyelidUpperRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothEyelidUpperRight_Slider;
                    BoneSlider2.ValueChanged += HrothEyelidUpperRight_Slider;
                }
            }
            if (CharacterDetails.EyelidUpperRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= EyelidUpperRight_Slider;
                    BoneSlider2.ValueChanged += EyelidUpperRight_Slider;
                }
            }
            if (CharacterDetails.HrothLipsLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothLipsLeft_Slider;
                    BoneSlider2.ValueChanged += HrothLipsLeft_Slider;
                }
            }
            if (CharacterDetails.LipLowerA_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= LipLowerA_Slider;
                    BoneSlider2.ValueChanged += LipLowerA_Slider;
                }
            }
            if (CharacterDetails.HrothLipsRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothLipsRight_Slider;
                    BoneSlider2.ValueChanged += HrothLipsRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar01ALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar01ALeft_Slider;
                    BoneSlider2.ValueChanged += VieraEar01ALeft_Slider;
                }
            }
            if (CharacterDetails.LipUpperB_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= LipUpperB_Slider;
                    BoneSlider2.ValueChanged += LipUpperB_Slider;
                }
            }
            if (CharacterDetails.HrothLipUpperLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothLipUpperLeft_Slider;
                    BoneSlider2.ValueChanged += HrothLipUpperLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar01ARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar01ARight_Slider;
                    BoneSlider2.ValueChanged += VieraEar01ARight_Slider;
                }
            }
            if (CharacterDetails.LipLowerB_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= LipLowerB_Slider;
                    BoneSlider2.ValueChanged += LipLowerB_Slider;
                }
            }
            if (CharacterDetails.HrothLipUpperRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothLipUpperRight_Slider;
                    BoneSlider2.ValueChanged += HrothLipUpperRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar02ALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar02ALeft_Slider;
                    BoneSlider2.ValueChanged += VieraEar02ALeft_Slider;
                }
            }
            if (CharacterDetails.HrothLipLower_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= HrothLipLower_Slider;
                    BoneSlider2.ValueChanged += HrothLipLower_Slider;
                }
            }
            if (CharacterDetails.VieraEar02ARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar02ARight_Slider;
                    BoneSlider2.ValueChanged += VieraEar02ARight_Slider;
                }
            }
            if (CharacterDetails.VieraEar03ALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar03ALeft_Slider;
                    BoneSlider2.ValueChanged += VieraEar03ALeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar03ARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar03ARight_Slider;
                    BoneSlider2.ValueChanged += VieraEar03ARight_Slider;
                }
            }
            if (CharacterDetails.VieraEar04ALeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar04ALeft_Slider;
                    BoneSlider2.ValueChanged += VieraEar04ALeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar04ARight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar04ARight_Slider;
                    BoneSlider2.ValueChanged += VieraEar04ARight_Slider;
                }
            }
            if (CharacterDetails.VieraLipLowerA_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraLipLowerA_Slider;
                    BoneSlider2.ValueChanged += VieraLipLowerA_Slider;
                }
            }
            if (CharacterDetails.VieraLipUpperB_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraLipUpperB_Slider;
                    BoneSlider2.ValueChanged += VieraLipUpperB_Slider;
                }
            }
            if (CharacterDetails.VieraEar01BLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar01BLeft_Slider;
                    BoneSlider2.ValueChanged += VieraEar01BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar01BRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar01BRight_Slider;
                    BoneSlider2.ValueChanged += VieraEar01BRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar02BLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar02BLeft_Slider;
                    BoneSlider2.ValueChanged += VieraEar02BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar02BRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar02BRight_Slider;
                    BoneSlider2.ValueChanged += VieraEar02BRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar03BLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar03BLeft_Slider;
                    BoneSlider2.ValueChanged += VieraEar03BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar03BRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar03BRight_Slider;
                    BoneSlider2.ValueChanged += VieraEar03BRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar04BLeft_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar04BLeft_Slider;
                    BoneSlider2.ValueChanged += VieraEar04BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar04BRight_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraEar04BRight_Slider;
                    BoneSlider2.ValueChanged += VieraEar04BRight_Slider;
                }
            }
            if (CharacterDetails.VieraLipLowerB_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= VieraLipLowerB_Slider;
                    BoneSlider2.ValueChanged += VieraLipLowerB_Slider;
                }
            }
            if (CharacterDetails.ExHairA_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairA_Slider;
                    BoneSlider2.ValueChanged += ExHairA_Slider;
                }
            }
            if (CharacterDetails.ExHairB_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairB_Slider;
                    BoneSlider2.ValueChanged += ExHairB_Slider;
                }
            }
            if (CharacterDetails.ExHairC_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairC_Slider;
                    BoneSlider2.ValueChanged += ExHairC_Slider;
                }
            }
            if (CharacterDetails.ExHairD_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairD_Slider;
                    BoneSlider2.ValueChanged += ExHairD_Slider;
                }
            }
            if (CharacterDetails.ExHairE_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairE_Slider;
                    BoneSlider2.ValueChanged += ExHairE_Slider;
                }
            }
            if (CharacterDetails.ExHairF_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairF_Slider;
                    BoneSlider2.ValueChanged += ExHairF_Slider;
                }
            }
            if (CharacterDetails.ExHairG_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairG_Slider;
                    BoneSlider2.ValueChanged += ExHairG_Slider;
                }
            }
            if (CharacterDetails.ExHairH_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairH_Slider;
                    BoneSlider2.ValueChanged += ExHairH_Slider;
                }
            }
            if (CharacterDetails.ExHairI_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairI_Slider;
                    BoneSlider2.ValueChanged += ExHairI_Slider;
                }
            }
            if (CharacterDetails.ExHairJ_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairJ_Slider;
                    BoneSlider2.ValueChanged += ExHairJ_Slider;
                }
            }
            if (CharacterDetails.ExHairK_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairK_Slider;
                    BoneSlider2.ValueChanged += ExHairK_Slider;
                }
            }
            if (CharacterDetails.ExHairL_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExHairL_Slider;
                    BoneSlider2.ValueChanged += ExHairL_Slider;
                }
            }
            if (CharacterDetails.ExMetA_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetA_Slider;
                    BoneSlider2.ValueChanged += ExMetA_Slider;
                }
            }
            if (CharacterDetails.ExMetB_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetB_Slider;
                    BoneSlider2.ValueChanged += ExMetB_Slider;
                }
            }
            if (CharacterDetails.ExMetC_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetC_Slider;
                    BoneSlider2.ValueChanged += ExMetC_Slider;
                }
            }
            if (CharacterDetails.ExMetD_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetD_Slider;
                    BoneSlider2.ValueChanged += ExMetD_Slider;
                }
            }
            if (CharacterDetails.ExMetE_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetE_Slider;
                    BoneSlider2.ValueChanged += ExMetE_Slider;
                }
            }
            if (CharacterDetails.ExMetF_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetF_Slider;
                    BoneSlider2.ValueChanged += ExMetF_Slider;
                }
            }
            if (CharacterDetails.ExMetG_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetG_Slider;
                    BoneSlider2.ValueChanged += ExMetG_Slider;
                }
            }
            if (CharacterDetails.ExMetH_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetH_Slider;
                    BoneSlider2.ValueChanged += ExMetH_Slider;
                }
            }
            if (CharacterDetails.ExMetI_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetI_Slider;
                    BoneSlider2.ValueChanged += ExMetI_Slider;
                }
            }
            if (CharacterDetails.ExMetJ_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetJ_Slider;
                    BoneSlider2.ValueChanged += ExMetJ_Slider;
                }
            }
            if (CharacterDetails.ExMetK_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetK_Slider;
                    BoneSlider2.ValueChanged += ExMetK_Slider;
                }
            }
            if (CharacterDetails.ExMetL_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetL_Slider;
                    BoneSlider2.ValueChanged += ExMetL_Slider;
                }
            }
            if (CharacterDetails.ExMetM_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetM_Slider;
                    BoneSlider2.ValueChanged += ExMetM_Slider;
                }
            }
            if (CharacterDetails.ExMetN_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetN_Slider;
                    BoneSlider2.ValueChanged += ExMetN_Slider;
                }
            }
            if (CharacterDetails.ExMetO_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetO_Slider;
                    BoneSlider2.ValueChanged += ExMetO_Slider;
                }
            }
            if (CharacterDetails.ExMetP_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetP_Slider;
                    BoneSlider2.ValueChanged += ExMetP_Slider;
                }
            }
            if (CharacterDetails.ExMetQ_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetQ_Slider;
                    BoneSlider2.ValueChanged += ExMetQ_Slider;
                }
            }
            if (CharacterDetails.ExMetR_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExMetR_Slider;
                    BoneSlider2.ValueChanged += ExMetR_Slider;
                }
            }
            if (CharacterDetails.ExTopA_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExTopA_Slider;
                    BoneSlider2.ValueChanged += ExTopA_Slider;
                }
            }
            if (CharacterDetails.ExTopB_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExTopB_Slider;
                    BoneSlider2.ValueChanged += ExTopB_Slider;
                }
            }
            if (CharacterDetails.ExTopC_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExTopC_Slider;
                    BoneSlider2.ValueChanged += ExTopC_Slider;
                }
            }
            if (CharacterDetails.ExTopD_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExTopD_Slider;
                    BoneSlider2.ValueChanged += ExTopD_Slider;
                }
            }
            if (CharacterDetails.ExTopE_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExTopE_Slider;
                    BoneSlider2.ValueChanged += ExTopE_Slider;
                }
            }
            if (CharacterDetails.ExTopF_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExTopF_Slider;
                    BoneSlider2.ValueChanged += ExTopF_Slider;
                }
            }
            if (CharacterDetails.ExTopG_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExTopG_Slider;
                    BoneSlider2.ValueChanged += ExTopG_Slider;
                }
            }
            if (CharacterDetails.ExTopH_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExTopH_Slider;
                    BoneSlider2.ValueChanged += ExTopH_Slider;
                }
            }
            if (CharacterDetails.ExTopI_Rotate)
            {
                if (BoneSlider2.IsKeyboardFocusWithin || BoneSlider2.IsMouseOver)
                {
                    BoneSlider2.ValueChanged -= ExTopI_Slider;
                    BoneSlider2.ValueChanged += ExTopI_Slider;
                }
            }
        }
        private void BoneSliders3_SourceUpdated(object sender, DataTransferEventArgs e)
        {
            if (CharacterDetails.Root_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= Root_Slider;
                    BoneSlider3.ValueChanged += Root_Slider;
                }
            }
            if (CharacterDetails.Abdomen_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= Abdomen_Slider;
                    BoneSlider3.ValueChanged += Abdomen_Slider;
                }
            }
            if (CharacterDetails.Throw_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= Throw_Slider;
                    BoneSlider3.ValueChanged += Throw_Slider;
                }
            }
            if (CharacterDetails.Waist_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= Waist_Slider;
                    BoneSlider3.ValueChanged += Waist_Slider;
                }
            }
            if (CharacterDetails.SpineA_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= SpineA_Slider;
                    BoneSlider3.ValueChanged += SpineA_Slider;
                }
            }
            if (CharacterDetails.LegLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= LegLeft_Slider;
                    BoneSlider3.ValueChanged += LegLeft_Slider;
                }
            }
            if (CharacterDetails.LegRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= LegRight_Slider;
                    BoneSlider3.ValueChanged += LegRight_Slider;
                }
            }
            if (CharacterDetails.HolsterLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HolsterLeft_Slider;
                    BoneSlider3.ValueChanged += HolsterLeft_Slider;
                }
            }
            if (CharacterDetails.HolsterRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HolsterRight_Slider;
                    BoneSlider3.ValueChanged += HolsterRight_Slider;
                }
            }
            if (CharacterDetails.SheatheLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= SheatheLeft_Slider;
                    BoneSlider3.ValueChanged += SheatheLeft_Slider;
                }
            }
            if (CharacterDetails.SheatheRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= SheatheRight_Slider;
                    BoneSlider3.ValueChanged += SheatheRight_Slider;
                }
            }
            if (CharacterDetails.SpineB_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= SpineB_Slider;
                    BoneSlider3.ValueChanged += SpineB_Slider;
                }
            }
            if (CharacterDetails.ClothBackALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothBackALeft_Slider;
                    BoneSlider3.ValueChanged += ClothBackALeft_Slider;
                }
            }
            if (CharacterDetails.ClothBackARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothBackARight_Slider;
                    BoneSlider3.ValueChanged += ClothBackARight_Slider;
                }
            }
            if (CharacterDetails.ClothFrontALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothFrontALeft_Slider;
                    BoneSlider3.ValueChanged += ClothFrontALeft_Slider;
                }
            }
            if (CharacterDetails.ClothFrontARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothFrontARight_Slider;
                    BoneSlider3.ValueChanged += ClothFrontARight_Slider;
                }
            }
            if (CharacterDetails.ClothSideALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothSideALeft_Slider;
                    BoneSlider3.ValueChanged += ClothSideALeft_Slider;
                }
            }
            if (CharacterDetails.ClothSideARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothSideARight_Slider;
                    BoneSlider3.ValueChanged += ClothSideARight_Slider;
                }
            }
            if (CharacterDetails.KneeLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= KneeLeft_Slider;
                    BoneSlider3.ValueChanged += KneeLeft_Slider;
                }
            }
            if (CharacterDetails.KneeRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= KneeRight_Slider;
                    BoneSlider3.ValueChanged += KneeRight_Slider;
                }
            }
            if (CharacterDetails.BreastLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= BreastLeft_Slider;
                    BoneSlider3.ValueChanged += BreastLeft_Slider;
                }
            }
            if (CharacterDetails.BreastRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= BreastRight_Slider;
                    BoneSlider3.ValueChanged += BreastRight_Slider;
                }
            }
            if (CharacterDetails.SpineC_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= SpineC_Slider;
                    BoneSlider3.ValueChanged += SpineC_Slider;
                }
            }
            if (CharacterDetails.ClothBackBLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothBackBLeft_Slider;
                    BoneSlider3.ValueChanged += ClothBackBLeft_Slider;
                }
            }
            if (CharacterDetails.ClothBackBRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothBackBRight_Slider;
                    BoneSlider3.ValueChanged += ClothBackBRight_Slider;
                }
            }
            if (CharacterDetails.ClothFrontBLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothFrontBLeft_Slider;
                    BoneSlider3.ValueChanged += ClothFrontBLeft_Slider;
                }
            }
            if (CharacterDetails.ClothFrontBRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothFrontBRight_Slider;
                    BoneSlider3.ValueChanged += ClothFrontBRight_Slider;
                }
            }
            if (CharacterDetails.ClothSideBLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothSideBLeft_Slider;
                    BoneSlider3.ValueChanged += ClothSideBLeft_Slider;
                }
            }
            if (CharacterDetails.ClothSideBRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothSideBRight_Slider;
                    BoneSlider3.ValueChanged += ClothSideBRight_Slider;
                }
            }
            if (CharacterDetails.CalfLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= CalfLeft_Slider;
                    BoneSlider3.ValueChanged += CalfLeft_Slider;
                }
            }
            if (CharacterDetails.CalfRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= CalfRight_Slider;
                    BoneSlider3.ValueChanged += CalfRight_Slider;
                }
            }
            if (CharacterDetails.ScabbardLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ScabbardLeft_Slider;
                    BoneSlider3.ValueChanged += ScabbardLeft_Slider;
                }
            }
            if (CharacterDetails.ScabbardRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ScabbardRight_Slider;
                    BoneSlider3.ValueChanged += ScabbardRight_Slider;
                }
            }
            if (CharacterDetails.Neck_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= Neck_Slider;
                    BoneSlider3.ValueChanged += Neck_Slider;
                }
            }
            if (CharacterDetails.ClavicleLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClavicleLeft_Slider;
                    BoneSlider3.ValueChanged += ClavicleLeft_Slider;
                }
            }
            if (CharacterDetails.ClavicleRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClavicleRight_Slider;
                    BoneSlider3.ValueChanged += ClavicleRight_Slider;
                }
            }
            if (CharacterDetails.ClothBackCLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothBackCLeft_Slider;
                    BoneSlider3.ValueChanged += ClothBackCLeft_Slider;
                }
            }
            if (CharacterDetails.ClothBackCRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothBackCRight_Slider;
                    BoneSlider3.ValueChanged += ClothBackCRight_Slider;
                }
            }
            if (CharacterDetails.ClothFrontCLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothFrontCLeft_Slider;
                    BoneSlider3.ValueChanged += ClothFrontCLeft_Slider;
                }
            }
            if (CharacterDetails.ClothFrontCRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothFrontCRight_Slider;
                    BoneSlider3.ValueChanged += ClothFrontCRight_Slider;
                }
            }
            if (CharacterDetails.ClothSideCLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothSideCLeft_Slider;
                    BoneSlider3.ValueChanged += ClothSideCLeft_Slider;
                }
            }
            if (CharacterDetails.ClothSideCRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ClothSideCRight_Slider;
                    BoneSlider3.ValueChanged += ClothSideCRight_Slider;
                }
            }
            if (CharacterDetails.PoleynLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= PoleynLeft_Slider;
                    BoneSlider3.ValueChanged += PoleynLeft_Slider;
                }
            }
            if (CharacterDetails.PoleynRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= PoleynRight_Slider;
                    BoneSlider3.ValueChanged += PoleynRight_Slider;
                }
            }
            if (CharacterDetails.FootLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= FootLeft_Slider;
                    BoneSlider3.ValueChanged += FootLeft_Slider;
                }
            }
            if (CharacterDetails.FootRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= FootRight_Slider;
                    BoneSlider3.ValueChanged += FootRight_Slider;
                }
            }
            if (CharacterDetails.Head_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= Head_Slider;
                    BoneSlider3.ValueChanged += Head_Slider;
                }
            }
            if (CharacterDetails.ArmLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ArmLeft_Slider;
                    BoneSlider3.ValueChanged += ArmLeft_Slider;
                }
            }
            if (CharacterDetails.ArmRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ArmRight_Slider;
                    BoneSlider3.ValueChanged += ArmRight_Slider;
                }
            }
            if (CharacterDetails.PauldronLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= PauldronLeft_Slider;
                    BoneSlider3.ValueChanged += PauldronLeft_Slider;
                }
            }
            if (CharacterDetails.PauldronRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= PauldronRight_Slider;
                    BoneSlider3.ValueChanged += PauldronRight_Slider;
                }
            }
            if (CharacterDetails.Unknown00_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= Unknown00_Slider;
                    BoneSlider3.ValueChanged += Unknown00_Slider;
                }
            }
            if (CharacterDetails.ToesLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ToesLeft_Slider;
                    BoneSlider3.ValueChanged += ToesLeft_Slider;
                }
            }
            if (CharacterDetails.ToesRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ToesRight_Slider;
                    BoneSlider3.ValueChanged += ToesRight_Slider;
                }
            }
            if (CharacterDetails.HairA_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HairA_Slider;
                    BoneSlider3.ValueChanged += HairA_Slider;
                }
            }
            if (CharacterDetails.HairFrontLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HairFrontLeft_Slider;
                    BoneSlider3.ValueChanged += HairFrontLeft_Slider;
                }
            }
            if (CharacterDetails.HairFrontRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HairFrontRight_Slider;
                    BoneSlider3.ValueChanged += HairFrontRight_Slider;
                }
            }
            if (CharacterDetails.EarLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EarLeft_Slider;
                    BoneSlider3.ValueChanged += EarLeft_Slider;
                }
            }
            if (CharacterDetails.EarRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EarRight_Slider;
                    BoneSlider3.ValueChanged += EarRight_Slider;
                }
            }
            if (CharacterDetails.ForearmLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ForearmLeft_Slider;
                    BoneSlider3.ValueChanged += ForearmLeft_Slider;
                }
            }
            if (CharacterDetails.ForearmRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ForearmRight_Slider;
                    BoneSlider3.ValueChanged += ForearmRight_Slider;
                }
            }
            if (CharacterDetails.ShoulderLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ShoulderLeft_Slider;
                    BoneSlider3.ValueChanged += ShoulderLeft_Slider;
                }
            }
            if (CharacterDetails.ShoulderRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ShoulderRight_Slider;
                    BoneSlider3.ValueChanged += ShoulderRight_Slider;
                }
            }
            if (CharacterDetails.HairB_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HairB_Slider;
                    BoneSlider3.ValueChanged += HairB_Slider;
                }
            }
            if (CharacterDetails.HandLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HandLeft_Slider;
                    BoneSlider3.ValueChanged += HandLeft_Slider;
                }
            }
            if (CharacterDetails.HandRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HandRight_Slider;
                    BoneSlider3.ValueChanged += HandRight_Slider;
                }
            }
            if (CharacterDetails.ShieldLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ShieldLeft_Slider;
                    BoneSlider3.ValueChanged += ShieldLeft_Slider;
                }
            }
            if (CharacterDetails.ShieldRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ShieldRight_Slider;
                    BoneSlider3.ValueChanged += ShieldRight_Slider;
                }
            }
            if (CharacterDetails.EarringALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EarringALeft_Slider;
                    BoneSlider3.ValueChanged += EarringALeft_Slider;
                }
            }
            if (CharacterDetails.EarringARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EarringARight_Slider;
                    BoneSlider3.ValueChanged += EarringARight_Slider;
                }
            }
            if (CharacterDetails.ElbowLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ElbowLeft_Slider;
                    BoneSlider3.ValueChanged += ElbowLeft_Slider;
                }
            }
            if (CharacterDetails.ElbowRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ElbowRight_Slider;
                    BoneSlider3.ValueChanged += ElbowRight_Slider;
                }
            }
            if (CharacterDetails.CouterLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= CouterLeft_Slider;
                    BoneSlider3.ValueChanged += CouterLeft_Slider;
                }
            }
            if (CharacterDetails.CouterRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= CouterRight_Slider;
                    BoneSlider3.ValueChanged += CouterRight_Slider;
                }
            }
            if (CharacterDetails.WristLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= WristLeft_Slider;
                    BoneSlider3.ValueChanged += WristLeft_Slider;
                }
            }
            if (CharacterDetails.WristRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= WristRight_Slider;
                    BoneSlider3.ValueChanged += WristRight_Slider;
                }
            }
            if (CharacterDetails.IndexALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= IndexALeft_Slider;
                    BoneSlider3.ValueChanged += IndexALeft_Slider;
                }
            }
            if (CharacterDetails.IndexARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= IndexARight_Slider;
                    BoneSlider3.ValueChanged += IndexARight_Slider;
                }
            }
            if (CharacterDetails.PinkyALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= PinkyALeft_Slider;
                    BoneSlider3.ValueChanged += PinkyALeft_Slider;
                }
            }
            if (CharacterDetails.PinkyARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= PinkyARight_Slider;
                    BoneSlider3.ValueChanged += PinkyARight_Slider;
                }
            }
            if (CharacterDetails.RingALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= RingALeft_Slider;
                    BoneSlider3.ValueChanged += RingALeft_Slider;
                }
            }
            if (CharacterDetails.RingARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= RingARight_Slider;
                    BoneSlider3.ValueChanged += RingARight_Slider;
                }
            }
            if (CharacterDetails.MiddleALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= MiddleALeft_Slider;
                    BoneSlider3.ValueChanged += MiddleALeft_Slider;
                }
            }
            if (CharacterDetails.MiddleARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= MiddleARight_Slider;
                    BoneSlider3.ValueChanged += MiddleARight_Slider;
                }
            }
            if (CharacterDetails.ThumbALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ThumbALeft_Slider;
                    BoneSlider3.ValueChanged += ThumbALeft_Slider;
                }
            }
            if (CharacterDetails.ThumbARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ThumbARight_Slider;
                    BoneSlider3.ValueChanged += ThumbARight_Slider;
                }
            }
            if (CharacterDetails.WeaponLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= WeaponLeft_Slider;
                    BoneSlider3.ValueChanged += WeaponLeft_Slider;
                }
            }
            if (CharacterDetails.WeaponRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= WeaponRight_Slider;
                    BoneSlider3.ValueChanged += WeaponRight_Slider;
                }
            }
            if (CharacterDetails.EarringBLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EarringBLeft_Slider;
                    BoneSlider3.ValueChanged += EarringBLeft_Slider;
                }
            }
            if (CharacterDetails.EarringBRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EarringBRight_Slider;
                    BoneSlider3.ValueChanged += EarringBRight_Slider;
                }
            }
            if (CharacterDetails.IndexBLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= IndexBLeft_Slider;
                    BoneSlider3.ValueChanged += IndexBLeft_Slider;
                }
            }
            if (CharacterDetails.IndexBRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= IndexBRight_Slider;
                    BoneSlider3.ValueChanged += IndexBRight_Slider;
                }
            }
            if (CharacterDetails.PinkyBLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= PinkyBLeft_Slider;
                    BoneSlider3.ValueChanged += PinkyBLeft_Slider;
                }
            }
            if (CharacterDetails.PinkyBRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= PinkyBRight_Slider;
                    BoneSlider3.ValueChanged += PinkyBRight_Slider;
                }
            }
            if (CharacterDetails.RingBLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= RingBLeft_Slider;
                    BoneSlider3.ValueChanged += RingBLeft_Slider;
                }
            }
            if (CharacterDetails.RingBRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= RingBRight_Slider;
                    BoneSlider3.ValueChanged += RingBRight_Slider;
                }
            }
            if (CharacterDetails.MiddleBLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= MiddleBLeft_Slider;
                    BoneSlider3.ValueChanged += MiddleBLeft_Slider;
                }
            }
            if (CharacterDetails.MiddleBRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= MiddleBRight_Slider;
                    BoneSlider3.ValueChanged += MiddleBRight_Slider;
                }
            }
            if (CharacterDetails.ThumbBLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ThumbBLeft_Slider;
                    BoneSlider3.ValueChanged += ThumbBLeft_Slider;
                }
            }
            if (CharacterDetails.ThumbBRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ThumbBRight_Slider;
                    BoneSlider3.ValueChanged += ThumbBRight_Slider;
                }
            }
            if (CharacterDetails.TailA_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= TailA_Slider;
                    BoneSlider3.ValueChanged += TailA_Slider;
                }
            }
            if (CharacterDetails.TailB_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= TailB_Slider;
                    BoneSlider3.ValueChanged += TailB_Slider;
                }
            }
            if (CharacterDetails.TailC_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= TailC_Slider;
                    BoneSlider3.ValueChanged += TailC_Slider;
                }
            }
            if (CharacterDetails.TailD_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= TailD_Slider;
                    BoneSlider3.ValueChanged += TailD_Slider;
                }
            }
            if (CharacterDetails.TailE_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= TailE_Slider;
                    BoneSlider3.ValueChanged += TailE_Slider;
                }
            }
            if (CharacterDetails.RootHead_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= RootHead_Slider;
                    BoneSlider3.ValueChanged += RootHead_Slider;
                }
            }
            if (CharacterDetails.Jaw_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= Jaw_Slider;
                    BoneSlider3.ValueChanged += Jaw_Slider;
                }
            }
            if (CharacterDetails.EyelidLowerLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EyelidLowerLeft_Slider;
                    BoneSlider3.ValueChanged += EyelidLowerLeft_Slider;
                }
            }
            if (CharacterDetails.EyelidLowerRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EyelidLowerRight_Slider;
                    BoneSlider3.ValueChanged += EyelidLowerRight_Slider;
                }
            }
            if (CharacterDetails.EyeLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EyeLeft_Slider;
                    BoneSlider3.ValueChanged += EyeLeft_Slider;
                }
            }
            if (CharacterDetails.EyeRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EyeRight_Slider;
                    BoneSlider3.ValueChanged += EyeRight_Slider;
                }
            }
            if (CharacterDetails.Nose_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= Nose_Slider;
                    BoneSlider3.ValueChanged += Nose_Slider;
                }
            }
            if (CharacterDetails.CheekLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= CheekLeft_Slider;
                    BoneSlider3.ValueChanged += CheekLeft_Slider;
                }
            }
            if (CharacterDetails.HrothWhiskersLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothWhiskersLeft_Slider;
                    BoneSlider3.ValueChanged += HrothWhiskersLeft_Slider;
                }
            }
            if (CharacterDetails.CheekRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= CheekRight_Slider;
                    BoneSlider3.ValueChanged += CheekRight_Slider;
                }
            }
            if (CharacterDetails.HrothWhiskersRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothWhiskersRight_Slider;
                    BoneSlider3.ValueChanged += HrothWhiskersRight_Slider;
                }
            }
            if (CharacterDetails.LipsLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= LipsLeft_Slider;
                    BoneSlider3.ValueChanged += LipsLeft_Slider;
                }
            }
            if (CharacterDetails.HrothEyebrowLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothEyebrowLeft_Slider;
                    BoneSlider3.ValueChanged += HrothEyebrowLeft_Slider;
                }
            }
            if (CharacterDetails.LipsRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= LipsRight_Slider;
                    BoneSlider3.ValueChanged += LipsRight_Slider;
                }
            }
            if (CharacterDetails.HrothEyebrowRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothEyebrowRight_Slider;
                    BoneSlider3.ValueChanged += HrothEyebrowRight_Slider;
                }
            }
            if (CharacterDetails.EyebrowLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EyebrowLeft_Slider;
                    BoneSlider3.ValueChanged += EyebrowLeft_Slider;
                }
            }
            if (CharacterDetails.HrothBridge_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothBridge_Slider;
                    BoneSlider3.ValueChanged += HrothBridge_Slider;
                }
            }
            if (CharacterDetails.EyebrowRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EyebrowRight_Slider;
                    BoneSlider3.ValueChanged += EyebrowRight_Slider;
                }
            }
            if (CharacterDetails.HrothBrowLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothBrowLeft_Slider;
                    BoneSlider3.ValueChanged += HrothBrowLeft_Slider;
                }
            }
            if (CharacterDetails.Bridge_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= Bridge_Slider;
                    BoneSlider3.ValueChanged += Bridge_Slider;
                }
            }
            if (CharacterDetails.HrothBrowRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothBrowRight_Slider;
                    BoneSlider3.ValueChanged += HrothBrowRight_Slider;
                }
            }
            if (CharacterDetails.BrowLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= BrowLeft_Slider;
                    BoneSlider3.ValueChanged += BrowLeft_Slider;
                }
            }
            if (CharacterDetails.HrothJawUpper_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothJawUpper_Slider;
                    BoneSlider3.ValueChanged += HrothJawUpper_Slider;
                }
            }
            if (CharacterDetails.BrowRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= BrowRight_Slider;
                    BoneSlider3.ValueChanged += BrowRight_Slider;
                }
            }
            if (CharacterDetails.HrothLipUpper_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothLipUpper_Slider;
                    BoneSlider3.ValueChanged += HrothLipUpper_Slider;
                }
            }
            if (CharacterDetails.LipUpperA_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= LipUpperA_Slider;
                    BoneSlider3.ValueChanged += LipUpperA_Slider;
                }
            }
            if (CharacterDetails.HrothEyelidUpperLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothEyelidUpperLeft_Slider;
                    BoneSlider3.ValueChanged += HrothEyelidUpperLeft_Slider;
                }
            }
            if (CharacterDetails.EyelidUpperLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EyelidUpperLeft_Slider;
                    BoneSlider3.ValueChanged += EyelidUpperLeft_Slider;
                }
            }
            if (CharacterDetails.HrothEyelidUpperRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothEyelidUpperRight_Slider;
                    BoneSlider3.ValueChanged += HrothEyelidUpperRight_Slider;
                }
            }
            if (CharacterDetails.EyelidUpperRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= EyelidUpperRight_Slider;
                    BoneSlider3.ValueChanged += EyelidUpperRight_Slider;
                }
            }
            if (CharacterDetails.HrothLipsLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothLipsLeft_Slider;
                    BoneSlider3.ValueChanged += HrothLipsLeft_Slider;
                }
            }
            if (CharacterDetails.LipLowerA_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= LipLowerA_Slider;
                    BoneSlider3.ValueChanged += LipLowerA_Slider;
                }
            }
            if (CharacterDetails.HrothLipsRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothLipsRight_Slider;
                    BoneSlider3.ValueChanged += HrothLipsRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar01ALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar01ALeft_Slider;
                    BoneSlider3.ValueChanged += VieraEar01ALeft_Slider;
                }
            }
            if (CharacterDetails.LipUpperB_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= LipUpperB_Slider;
                    BoneSlider3.ValueChanged += LipUpperB_Slider;
                }
            }
            if (CharacterDetails.HrothLipUpperLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothLipUpperLeft_Slider;
                    BoneSlider3.ValueChanged += HrothLipUpperLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar01ARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar01ARight_Slider;
                    BoneSlider3.ValueChanged += VieraEar01ARight_Slider;
                }
            }
            if (CharacterDetails.LipLowerB_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= LipLowerB_Slider;
                    BoneSlider3.ValueChanged += LipLowerB_Slider;
                }
            }
            if (CharacterDetails.HrothLipUpperRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothLipUpperRight_Slider;
                    BoneSlider3.ValueChanged += HrothLipUpperRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar02ALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar02ALeft_Slider;
                    BoneSlider3.ValueChanged += VieraEar02ALeft_Slider;
                }
            }
            if (CharacterDetails.HrothLipLower_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= HrothLipLower_Slider;
                    BoneSlider3.ValueChanged += HrothLipLower_Slider;
                }
            }
            if (CharacterDetails.VieraEar02ARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar02ARight_Slider;
                    BoneSlider3.ValueChanged += VieraEar02ARight_Slider;
                }
            }
            if (CharacterDetails.VieraEar03ALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar03ALeft_Slider;
                    BoneSlider3.ValueChanged += VieraEar03ALeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar03ARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar03ARight_Slider;
                    BoneSlider3.ValueChanged += VieraEar03ARight_Slider;
                }
            }
            if (CharacterDetails.VieraEar04ALeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar04ALeft_Slider;
                    BoneSlider3.ValueChanged += VieraEar04ALeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar04ARight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar04ARight_Slider;
                    BoneSlider3.ValueChanged += VieraEar04ARight_Slider;
                }
            }
            if (CharacterDetails.VieraLipLowerA_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraLipLowerA_Slider;
                    BoneSlider3.ValueChanged += VieraLipLowerA_Slider;
                }
            }
            if (CharacterDetails.VieraLipUpperB_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraLipUpperB_Slider;
                    BoneSlider3.ValueChanged += VieraLipUpperB_Slider;
                }
            }
            if (CharacterDetails.VieraEar01BLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar01BLeft_Slider;
                    BoneSlider3.ValueChanged += VieraEar01BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar01BRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar01BRight_Slider;
                    BoneSlider3.ValueChanged += VieraEar01BRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar02BLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar02BLeft_Slider;
                    BoneSlider3.ValueChanged += VieraEar02BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar02BRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar02BRight_Slider;
                    BoneSlider3.ValueChanged += VieraEar02BRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar03BLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar03BLeft_Slider;
                    BoneSlider3.ValueChanged += VieraEar03BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar03BRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar03BRight_Slider;
                    BoneSlider3.ValueChanged += VieraEar03BRight_Slider;
                }
            }
            if (CharacterDetails.VieraEar04BLeft_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar04BLeft_Slider;
                    BoneSlider3.ValueChanged += VieraEar04BLeft_Slider;
                }
            }
            if (CharacterDetails.VieraEar04BRight_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraEar04BRight_Slider;
                    BoneSlider3.ValueChanged += VieraEar04BRight_Slider;
                }
            }
            if (CharacterDetails.VieraLipLowerB_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= VieraLipLowerB_Slider;
                    BoneSlider3.ValueChanged += VieraLipLowerB_Slider;
                }
            }
            if (CharacterDetails.ExHairA_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairA_Slider;
                    BoneSlider3.ValueChanged += ExHairA_Slider;
                }
            }
            if (CharacterDetails.ExHairB_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairB_Slider;
                    BoneSlider3.ValueChanged += ExHairB_Slider;
                }
            }
            if (CharacterDetails.ExHairC_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairC_Slider;
                    BoneSlider3.ValueChanged += ExHairC_Slider;
                }
            }
            if (CharacterDetails.ExHairD_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairD_Slider;
                    BoneSlider3.ValueChanged += ExHairD_Slider;
                }
            }
            if (CharacterDetails.ExHairE_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairE_Slider;
                    BoneSlider3.ValueChanged += ExHairE_Slider;
                }
            }
            if (CharacterDetails.ExHairF_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairF_Slider;
                    BoneSlider3.ValueChanged += ExHairF_Slider;
                }
            }
            if (CharacterDetails.ExHairG_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairG_Slider;
                    BoneSlider3.ValueChanged += ExHairG_Slider;
                }
            }
            if (CharacterDetails.ExHairH_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairH_Slider;
                    BoneSlider3.ValueChanged += ExHairH_Slider;
                }
            }
            if (CharacterDetails.ExHairI_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairI_Slider;
                    BoneSlider3.ValueChanged += ExHairI_Slider;
                }
            }
            if (CharacterDetails.ExHairJ_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairJ_Slider;
                    BoneSlider3.ValueChanged += ExHairJ_Slider;
                }
            }
            if (CharacterDetails.ExHairK_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairK_Slider;
                    BoneSlider3.ValueChanged += ExHairK_Slider;
                }
            }
            if (CharacterDetails.ExHairL_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExHairL_Slider;
                    BoneSlider3.ValueChanged += ExHairL_Slider;
                }
            }
            if (CharacterDetails.ExMetA_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetA_Slider;
                    BoneSlider3.ValueChanged += ExMetA_Slider;
                }
            }
            if (CharacterDetails.ExMetB_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetB_Slider;
                    BoneSlider3.ValueChanged += ExMetB_Slider;
                }
            }
            if (CharacterDetails.ExMetC_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetC_Slider;
                    BoneSlider3.ValueChanged += ExMetC_Slider;
                }
            }
            if (CharacterDetails.ExMetD_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetD_Slider;
                    BoneSlider3.ValueChanged += ExMetD_Slider;
                }
            }
            if (CharacterDetails.ExMetE_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetE_Slider;
                    BoneSlider3.ValueChanged += ExMetE_Slider;
                }
            }
            if (CharacterDetails.ExMetF_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetF_Slider;
                    BoneSlider3.ValueChanged += ExMetF_Slider;
                }
            }
            if (CharacterDetails.ExMetG_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetG_Slider;
                    BoneSlider3.ValueChanged += ExMetG_Slider;
                }
            }
            if (CharacterDetails.ExMetH_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetH_Slider;
                    BoneSlider3.ValueChanged += ExMetH_Slider;
                }
            }
            if (CharacterDetails.ExMetI_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetI_Slider;
                    BoneSlider3.ValueChanged += ExMetI_Slider;
                }
            }
            if (CharacterDetails.ExMetJ_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetJ_Slider;
                    BoneSlider3.ValueChanged += ExMetJ_Slider;
                }
            }
            if (CharacterDetails.ExMetK_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetK_Slider;
                    BoneSlider3.ValueChanged += ExMetK_Slider;
                }
            }
            if (CharacterDetails.ExMetL_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetL_Slider;
                    BoneSlider3.ValueChanged += ExMetL_Slider;
                }
            }
            if (CharacterDetails.ExMetM_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetM_Slider;
                    BoneSlider3.ValueChanged += ExMetM_Slider;
                }
            }
            if (CharacterDetails.ExMetN_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetN_Slider;
                    BoneSlider3.ValueChanged += ExMetN_Slider;
                }
            }
            if (CharacterDetails.ExMetO_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetO_Slider;
                    BoneSlider3.ValueChanged += ExMetO_Slider;
                }
            }
            if (CharacterDetails.ExMetP_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetP_Slider;
                    BoneSlider3.ValueChanged += ExMetP_Slider;
                }
            }
            if (CharacterDetails.ExMetQ_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetQ_Slider;
                    BoneSlider3.ValueChanged += ExMetQ_Slider;
                }
            }
            if (CharacterDetails.ExMetR_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExMetR_Slider;
                    BoneSlider3.ValueChanged += ExMetR_Slider;
                }
            }
            if (CharacterDetails.ExTopA_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExTopA_Slider;
                    BoneSlider3.ValueChanged += ExTopA_Slider;
                }
            }
            if (CharacterDetails.ExTopB_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExTopB_Slider;
                    BoneSlider3.ValueChanged += ExTopB_Slider;
                }
            }
            if (CharacterDetails.ExTopC_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExTopC_Slider;
                    BoneSlider3.ValueChanged += ExTopC_Slider;
                }
            }
            if (CharacterDetails.ExTopD_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExTopD_Slider;
                    BoneSlider3.ValueChanged += ExTopD_Slider;
                }
            }
            if (CharacterDetails.ExTopE_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExTopE_Slider;
                    BoneSlider3.ValueChanged += ExTopE_Slider;
                }
            }
            if (CharacterDetails.ExTopF_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExTopF_Slider;
                    BoneSlider3.ValueChanged += ExTopF_Slider;
                }
            }
            if (CharacterDetails.ExTopG_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExTopG_Slider;
                    BoneSlider3.ValueChanged += ExTopG_Slider;
                }
            }
            if (CharacterDetails.ExTopH_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExTopH_Slider;
                    BoneSlider3.ValueChanged += ExTopH_Slider;
                }
            }
            if (CharacterDetails.ExTopI_Rotate)
            {
                if (BoneSlider3.IsKeyboardFocusWithin || BoneSlider3.IsMouseOver)
                {
                    BoneSlider3.ValueChanged -= ExTopI_Slider;
                    BoneSlider3.ValueChanged += ExTopI_Slider;
                }
            }
        }
        #endregion
        #region UpDown
        private void BoneUpDown_SourceUpdated(object sender, DataTransferEventArgs e)
        {
            if (CharacterDetails.Root_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= Root_UpDown;
                    BoneUpDown.ValueChanged += Root_UpDown;
                }
            }
            if (CharacterDetails.Abdomen_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= Abdomen_UpDown;
                    BoneUpDown.ValueChanged += Abdomen_UpDown;
                }
            }
            if (CharacterDetails.Throw_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= Throw_UpDown;
                    BoneUpDown.ValueChanged += Throw_UpDown;
                }
            }
            if (CharacterDetails.Waist_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= Waist_UpDown;
                    BoneUpDown.ValueChanged += Waist_UpDown;
                }
            }
            if (CharacterDetails.SpineA_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= SpineA_UpDown;
                    BoneUpDown.ValueChanged += SpineA_UpDown;
                }
            }
            if (CharacterDetails.LegLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= LegLeft_UpDown;
                    BoneUpDown.ValueChanged += LegLeft_UpDown;
                }
            }
            if (CharacterDetails.LegRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= LegRight_UpDown;
                    BoneUpDown.ValueChanged += LegRight_UpDown;
                }
            }
            if (CharacterDetails.HolsterLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HolsterLeft_UpDown;
                    BoneUpDown.ValueChanged += HolsterLeft_UpDown;
                }
            }
            if (CharacterDetails.HolsterRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HolsterRight_UpDown;
                    BoneUpDown.ValueChanged += HolsterRight_UpDown;
                }
            }
            if (CharacterDetails.SheatheLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= SheatheLeft_UpDown;
                    BoneUpDown.ValueChanged += SheatheLeft_UpDown;
                }
            }
            if (CharacterDetails.SheatheRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= SheatheRight_UpDown;
                    BoneUpDown.ValueChanged += SheatheRight_UpDown;
                }
            }
            if (CharacterDetails.SpineB_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= SpineB_UpDown;
                    BoneUpDown.ValueChanged += SpineB_UpDown;
                }
            }
            if (CharacterDetails.ClothBackALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothBackALeft_UpDown;
                    BoneUpDown.ValueChanged += ClothBackALeft_UpDown;
                }
            }
            if (CharacterDetails.ClothBackARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothBackARight_UpDown;
                    BoneUpDown.ValueChanged += ClothBackARight_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothFrontALeft_UpDown;
                    BoneUpDown.ValueChanged += ClothFrontALeft_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothFrontARight_UpDown;
                    BoneUpDown.ValueChanged += ClothFrontARight_UpDown;
                }
            }
            if (CharacterDetails.ClothSideALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothSideALeft_UpDown;
                    BoneUpDown.ValueChanged += ClothSideALeft_UpDown;
                }
            }
            if (CharacterDetails.ClothSideARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothSideARight_UpDown;
                    BoneUpDown.ValueChanged += ClothSideARight_UpDown;
                }
            }
            if (CharacterDetails.KneeLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= KneeLeft_UpDown;
                    BoneUpDown.ValueChanged += KneeLeft_UpDown;
                }
            }
            if (CharacterDetails.KneeRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= KneeRight_UpDown;
                    BoneUpDown.ValueChanged += KneeRight_UpDown;
                }
            }
            if (CharacterDetails.BreastLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= BreastLeft_UpDown;
                    BoneUpDown.ValueChanged += BreastLeft_UpDown;
                }
            }
            if (CharacterDetails.BreastRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= BreastRight_UpDown;
                    BoneUpDown.ValueChanged += BreastRight_UpDown;
                }
            }
            if (CharacterDetails.SpineC_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= SpineC_UpDown;
                    BoneUpDown.ValueChanged += SpineC_UpDown;
                }
            }
            if (CharacterDetails.ClothBackBLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothBackBLeft_UpDown;
                    BoneUpDown.ValueChanged += ClothBackBLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothBackBRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothBackBRight_UpDown;
                    BoneUpDown.ValueChanged += ClothBackBRight_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontBLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothFrontBLeft_UpDown;
                    BoneUpDown.ValueChanged += ClothFrontBLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontBRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothFrontBRight_UpDown;
                    BoneUpDown.ValueChanged += ClothFrontBRight_UpDown;
                }
            }
            if (CharacterDetails.ClothSideBLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothSideBLeft_UpDown;
                    BoneUpDown.ValueChanged += ClothSideBLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothSideBRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothSideBRight_UpDown;
                    BoneUpDown.ValueChanged += ClothSideBRight_UpDown;
                }
            }
            if (CharacterDetails.CalfLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= CalfLeft_UpDown;
                    BoneUpDown.ValueChanged += CalfLeft_UpDown;
                }
            }
            if (CharacterDetails.CalfRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= CalfRight_UpDown;
                    BoneUpDown.ValueChanged += CalfRight_UpDown;
                }
            }
            if (CharacterDetails.ScabbardLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ScabbardLeft_UpDown;
                    BoneUpDown.ValueChanged += ScabbardLeft_UpDown;
                }
            }
            if (CharacterDetails.ScabbardRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ScabbardRight_UpDown;
                    BoneUpDown.ValueChanged += ScabbardRight_UpDown;
                }
            }
            if (CharacterDetails.Neck_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= Neck_UpDown;
                    BoneUpDown.ValueChanged += Neck_UpDown;
                }
            }
            if (CharacterDetails.ClavicleLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClavicleLeft_UpDown;
                    BoneUpDown.ValueChanged += ClavicleLeft_UpDown;
                }
            }
            if (CharacterDetails.ClavicleRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClavicleRight_UpDown;
                    BoneUpDown.ValueChanged += ClavicleRight_UpDown;
                }
            }
            if (CharacterDetails.ClothBackCLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothBackCLeft_UpDown;
                    BoneUpDown.ValueChanged += ClothBackCLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothBackCRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothBackCRight_UpDown;
                    BoneUpDown.ValueChanged += ClothBackCRight_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontCLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothFrontCLeft_UpDown;
                    BoneUpDown.ValueChanged += ClothFrontCLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontCRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothFrontCRight_UpDown;
                    BoneUpDown.ValueChanged += ClothFrontCRight_UpDown;
                }
            }
            if (CharacterDetails.ClothSideCLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothSideCLeft_UpDown;
                    BoneUpDown.ValueChanged += ClothSideCLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothSideCRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ClothSideCRight_UpDown;
                    BoneUpDown.ValueChanged += ClothSideCRight_UpDown;
                }
            }
            if (CharacterDetails.PoleynLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= PoleynLeft_UpDown;
                    BoneUpDown.ValueChanged += PoleynLeft_UpDown;
                }
            }
            if (CharacterDetails.PoleynRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= PoleynRight_UpDown;
                    BoneUpDown.ValueChanged += PoleynRight_UpDown;
                }
            }
            if (CharacterDetails.FootLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= FootLeft_UpDown;
                    BoneUpDown.ValueChanged += FootLeft_UpDown;
                }
            }
            if (CharacterDetails.FootRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= FootRight_UpDown;
                    BoneUpDown.ValueChanged += FootRight_UpDown;
                }
            }
            if (CharacterDetails.Head_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= Head_UpDown;
                    BoneUpDown.ValueChanged += Head_UpDown;
                }
            }
            if (CharacterDetails.ArmLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ArmLeft_UpDown;
                    BoneUpDown.ValueChanged += ArmLeft_UpDown;
                }
            }
            if (CharacterDetails.ArmRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ArmRight_UpDown;
                    BoneUpDown.ValueChanged += ArmRight_UpDown;
                }
            }
            if (CharacterDetails.PauldronLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= PauldronLeft_UpDown;
                    BoneUpDown.ValueChanged += PauldronLeft_UpDown;
                }
            }
            if (CharacterDetails.PauldronRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= PauldronRight_UpDown;
                    BoneUpDown.ValueChanged += PauldronRight_UpDown;
                }
            }
            if (CharacterDetails.Unknown00_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= Unknown00_UpDown;
                    BoneUpDown.ValueChanged += Unknown00_UpDown;
                }
            }
            if (CharacterDetails.ToesLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ToesLeft_UpDown;
                    BoneUpDown.ValueChanged += ToesLeft_UpDown;
                }
            }
            if (CharacterDetails.ToesRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ToesRight_UpDown;
                    BoneUpDown.ValueChanged += ToesRight_UpDown;
                }
            }
            if (CharacterDetails.HairA_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HairA_UpDown;
                    BoneUpDown.ValueChanged += HairA_UpDown;
                }
            }
            if (CharacterDetails.HairFrontLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HairFrontLeft_UpDown;
                    BoneUpDown.ValueChanged += HairFrontLeft_UpDown;
                }
            }
            if (CharacterDetails.HairFrontRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HairFrontRight_UpDown;
                    BoneUpDown.ValueChanged += HairFrontRight_UpDown;
                }
            }
            if (CharacterDetails.EarLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EarLeft_UpDown;
                    BoneUpDown.ValueChanged += EarLeft_UpDown;
                }
            }
            if (CharacterDetails.EarRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EarRight_UpDown;
                    BoneUpDown.ValueChanged += EarRight_UpDown;
                }
            }
            if (CharacterDetails.ForearmLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ForearmLeft_UpDown;
                    BoneUpDown.ValueChanged += ForearmLeft_UpDown;
                }
            }
            if (CharacterDetails.ForearmRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ForearmRight_UpDown;
                    BoneUpDown.ValueChanged += ForearmRight_UpDown;
                }
            }
            if (CharacterDetails.ShoulderLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ShoulderLeft_UpDown;
                    BoneUpDown.ValueChanged += ShoulderLeft_UpDown;
                }
            }
            if (CharacterDetails.ShoulderRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ShoulderRight_UpDown;
                    BoneUpDown.ValueChanged += ShoulderRight_UpDown;
                }
            }
            if (CharacterDetails.HairB_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HairB_UpDown;
                    BoneUpDown.ValueChanged += HairB_UpDown;
                }
            }
            if (CharacterDetails.HandLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HandLeft_UpDown;
                    BoneUpDown.ValueChanged += HandLeft_UpDown;
                }
            }
            if (CharacterDetails.HandRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HandRight_UpDown;
                    BoneUpDown.ValueChanged += HandRight_UpDown;
                }
            }
            if (CharacterDetails.ShieldLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ShieldLeft_UpDown;
                    BoneUpDown.ValueChanged += ShieldLeft_UpDown;
                }
            }
            if (CharacterDetails.ShieldRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ShieldRight_UpDown;
                    BoneUpDown.ValueChanged += ShieldRight_UpDown;
                }
            }
            if (CharacterDetails.EarringALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EarringALeft_UpDown;
                    BoneUpDown.ValueChanged += EarringALeft_UpDown;
                }
            }
            if (CharacterDetails.EarringARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EarringARight_UpDown;
                    BoneUpDown.ValueChanged += EarringARight_UpDown;
                }
            }
            if (CharacterDetails.ElbowLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ElbowLeft_UpDown;
                    BoneUpDown.ValueChanged += ElbowLeft_UpDown;
                }
            }
            if (CharacterDetails.ElbowRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ElbowRight_UpDown;
                    BoneUpDown.ValueChanged += ElbowRight_UpDown;
                }
            }
            if (CharacterDetails.CouterLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= CouterLeft_UpDown;
                    BoneUpDown.ValueChanged += CouterLeft_UpDown;
                }
            }
            if (CharacterDetails.CouterRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= CouterRight_UpDown;
                    BoneUpDown.ValueChanged += CouterRight_UpDown;
                }
            }
            if (CharacterDetails.WristLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= WristLeft_UpDown;
                    BoneUpDown.ValueChanged += WristLeft_UpDown;
                }
            }
            if (CharacterDetails.WristRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= WristRight_UpDown;
                    BoneUpDown.ValueChanged += WristRight_UpDown;
                }
            }
            if (CharacterDetails.IndexALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= IndexALeft_UpDown;
                    BoneUpDown.ValueChanged += IndexALeft_UpDown;
                }
            }
            if (CharacterDetails.IndexARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= IndexARight_UpDown;
                    BoneUpDown.ValueChanged += IndexARight_UpDown;
                }
            }
            if (CharacterDetails.PinkyALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= PinkyALeft_UpDown;
                    BoneUpDown.ValueChanged += PinkyALeft_UpDown;
                }
            }
            if (CharacterDetails.PinkyARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= PinkyARight_UpDown;
                    BoneUpDown.ValueChanged += PinkyARight_UpDown;
                }
            }
            if (CharacterDetails.RingALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= RingALeft_UpDown;
                    BoneUpDown.ValueChanged += RingALeft_UpDown;
                }
            }
            if (CharacterDetails.RingARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= RingARight_UpDown;
                    BoneUpDown.ValueChanged += RingARight_UpDown;
                }
            }
            if (CharacterDetails.MiddleALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= MiddleALeft_UpDown;
                    BoneUpDown.ValueChanged += MiddleALeft_UpDown;
                }
            }
            if (CharacterDetails.MiddleARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= MiddleARight_UpDown;
                    BoneUpDown.ValueChanged += MiddleARight_UpDown;
                }
            }
            if (CharacterDetails.ThumbALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ThumbALeft_UpDown;
                    BoneUpDown.ValueChanged += ThumbALeft_UpDown;
                }
            }
            if (CharacterDetails.ThumbARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ThumbARight_UpDown;
                    BoneUpDown.ValueChanged += ThumbARight_UpDown;
                }
            }
            if (CharacterDetails.WeaponLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= WeaponLeft_UpDown;
                    BoneUpDown.ValueChanged += WeaponLeft_UpDown;
                }
            }
            if (CharacterDetails.WeaponRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= WeaponRight_UpDown;
                    BoneUpDown.ValueChanged += WeaponRight_UpDown;
                }
            }
            if (CharacterDetails.EarringBLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EarringBLeft_UpDown;
                    BoneUpDown.ValueChanged += EarringBLeft_UpDown;
                }
            }
            if (CharacterDetails.EarringBRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EarringBRight_UpDown;
                    BoneUpDown.ValueChanged += EarringBRight_UpDown;
                }
            }
            if (CharacterDetails.IndexBLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= IndexBLeft_UpDown;
                    BoneUpDown.ValueChanged += IndexBLeft_UpDown;
                }
            }
            if (CharacterDetails.IndexBRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= IndexBRight_UpDown;
                    BoneUpDown.ValueChanged += IndexBRight_UpDown;
                }
            }
            if (CharacterDetails.PinkyBLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= PinkyBLeft_UpDown;
                    BoneUpDown.ValueChanged += PinkyBLeft_UpDown;
                }
            }
            if (CharacterDetails.PinkyBRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= PinkyBRight_UpDown;
                    BoneUpDown.ValueChanged += PinkyBRight_UpDown;
                }
            }
            if (CharacterDetails.RingBLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= RingBLeft_UpDown;
                    BoneUpDown.ValueChanged += RingBLeft_UpDown;
                }
            }
            if (CharacterDetails.RingBRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= RingBRight_UpDown;
                    BoneUpDown.ValueChanged += RingBRight_UpDown;
                }
            }
            if (CharacterDetails.MiddleBLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= MiddleBLeft_UpDown;
                    BoneUpDown.ValueChanged += MiddleBLeft_UpDown;
                }
            }
            if (CharacterDetails.MiddleBRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= MiddleBRight_UpDown;
                    BoneUpDown.ValueChanged += MiddleBRight_UpDown;
                }
            }
            if (CharacterDetails.ThumbBLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ThumbBLeft_UpDown;
                    BoneUpDown.ValueChanged += ThumbBLeft_UpDown;
                }
            }
            if (CharacterDetails.ThumbBRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ThumbBRight_UpDown;
                    BoneUpDown.ValueChanged += ThumbBRight_UpDown;
                }
            }
            if (CharacterDetails.TailA_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= TailA_UpDown;
                    BoneUpDown.ValueChanged += TailA_UpDown;
                }
            }
            if (CharacterDetails.TailB_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= TailB_UpDown;
                    BoneUpDown.ValueChanged += TailB_UpDown;
                }
            }
            if (CharacterDetails.TailC_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= TailC_UpDown;
                    BoneUpDown.ValueChanged += TailC_UpDown;
                }
            }
            if (CharacterDetails.TailD_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= TailD_UpDown;
                    BoneUpDown.ValueChanged += TailD_UpDown;
                }
            }
            if (CharacterDetails.TailE_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= TailE_UpDown;
                    BoneUpDown.ValueChanged += TailE_UpDown;
                }
            }
            if (CharacterDetails.RootHead_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= RootHead_UpDown;
                    BoneUpDown.ValueChanged += RootHead_UpDown;
                }
            }
            if (CharacterDetails.Jaw_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= Jaw_UpDown;
                    BoneUpDown.ValueChanged += Jaw_UpDown;
                }
            }
            if (CharacterDetails.EyelidLowerLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EyelidLowerLeft_UpDown;
                    BoneUpDown.ValueChanged += EyelidLowerLeft_UpDown;
                }
            }
            if (CharacterDetails.EyelidLowerRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EyelidLowerRight_UpDown;
                    BoneUpDown.ValueChanged += EyelidLowerRight_UpDown;
                }
            }
            if (CharacterDetails.EyeLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EyeLeft_UpDown;
                    BoneUpDown.ValueChanged += EyeLeft_UpDown;
                }
            }
            if (CharacterDetails.EyeRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EyeRight_UpDown;
                    BoneUpDown.ValueChanged += EyeRight_UpDown;
                }
            }
            if (CharacterDetails.Nose_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= Nose_UpDown;
                    BoneUpDown.ValueChanged += Nose_UpDown;
                }
            }
            if (CharacterDetails.CheekLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= CheekLeft_UpDown;
                    BoneUpDown.ValueChanged += CheekLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothWhiskersLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothWhiskersLeft_UpDown;
                    BoneUpDown.ValueChanged += HrothWhiskersLeft_UpDown;
                }
            }
            if (CharacterDetails.CheekRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= CheekRight_UpDown;
                    BoneUpDown.ValueChanged += CheekRight_UpDown;
                }
            }
            if (CharacterDetails.HrothWhiskersRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothWhiskersRight_UpDown;
                    BoneUpDown.ValueChanged += HrothWhiskersRight_UpDown;
                }
            }
            if (CharacterDetails.LipsLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= LipsLeft_UpDown;
                    BoneUpDown.ValueChanged += LipsLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothEyebrowLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothEyebrowLeft_UpDown;
                    BoneUpDown.ValueChanged += HrothEyebrowLeft_UpDown;
                }
            }
            if (CharacterDetails.LipsRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= LipsRight_UpDown;
                    BoneUpDown.ValueChanged += LipsRight_UpDown;
                }
            }
            if (CharacterDetails.HrothEyebrowRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothEyebrowRight_UpDown;
                    BoneUpDown.ValueChanged += HrothEyebrowRight_UpDown;
                }
            }
            if (CharacterDetails.EyebrowLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EyebrowLeft_UpDown;
                    BoneUpDown.ValueChanged += EyebrowLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothBridge_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothBridge_UpDown;
                    BoneUpDown.ValueChanged += HrothBridge_UpDown;
                }
            }
            if (CharacterDetails.EyebrowRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EyebrowRight_UpDown;
                    BoneUpDown.ValueChanged += EyebrowRight_UpDown;
                }
            }
            if (CharacterDetails.HrothBrowLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothBrowLeft_UpDown;
                    BoneUpDown.ValueChanged += HrothBrowLeft_UpDown;
                }
            }
            if (CharacterDetails.Bridge_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= Bridge_UpDown;
                    BoneUpDown.ValueChanged += Bridge_UpDown;
                }
            }
            if (CharacterDetails.HrothBrowRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothBrowRight_UpDown;
                    BoneUpDown.ValueChanged += HrothBrowRight_UpDown;
                }
            }
            if (CharacterDetails.BrowLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= BrowLeft_UpDown;
                    BoneUpDown.ValueChanged += BrowLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothJawUpper_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothJawUpper_UpDown;
                    BoneUpDown.ValueChanged += HrothJawUpper_UpDown;
                }
            }
            if (CharacterDetails.BrowRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= BrowRight_UpDown;
                    BoneUpDown.ValueChanged += BrowRight_UpDown;
                }
            }
            if (CharacterDetails.HrothLipUpper_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothLipUpper_UpDown;
                    BoneUpDown.ValueChanged += HrothLipUpper_UpDown;
                }
            }
            if (CharacterDetails.LipUpperA_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= LipUpperA_UpDown;
                    BoneUpDown.ValueChanged += LipUpperA_UpDown;
                }
            }
            if (CharacterDetails.HrothEyelidUpperLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothEyelidUpperLeft_UpDown;
                    BoneUpDown.ValueChanged += HrothEyelidUpperLeft_UpDown;
                }
            }
            if (CharacterDetails.EyelidUpperLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EyelidUpperLeft_UpDown;
                    BoneUpDown.ValueChanged += EyelidUpperLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothEyelidUpperRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothEyelidUpperRight_UpDown;
                    BoneUpDown.ValueChanged += HrothEyelidUpperRight_UpDown;
                }
            }
            if (CharacterDetails.EyelidUpperRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= EyelidUpperRight_UpDown;
                    BoneUpDown.ValueChanged += EyelidUpperRight_UpDown;
                }
            }
            if (CharacterDetails.HrothLipsLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothLipsLeft_UpDown;
                    BoneUpDown.ValueChanged += HrothLipsLeft_UpDown;
                }
            }
            if (CharacterDetails.LipLowerA_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= LipLowerA_UpDown;
                    BoneUpDown.ValueChanged += LipLowerA_UpDown;
                }
            }
            if (CharacterDetails.HrothLipsRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothLipsRight_UpDown;
                    BoneUpDown.ValueChanged += HrothLipsRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01ALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar01ALeft_UpDown;
                    BoneUpDown.ValueChanged += VieraEar01ALeft_UpDown;
                }
            }
            if (CharacterDetails.LipUpperB_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= LipUpperB_UpDown;
                    BoneUpDown.ValueChanged += LipUpperB_UpDown;
                }
            }
            if (CharacterDetails.HrothLipUpperLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothLipUpperLeft_UpDown;
                    BoneUpDown.ValueChanged += HrothLipUpperLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01ARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar01ARight_UpDown;
                    BoneUpDown.ValueChanged += VieraEar01ARight_UpDown;
                }
            }
            if (CharacterDetails.LipLowerB_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= LipLowerB_UpDown;
                    BoneUpDown.ValueChanged += LipLowerB_UpDown;
                }
            }
            if (CharacterDetails.HrothLipUpperRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothLipUpperRight_UpDown;
                    BoneUpDown.ValueChanged += HrothLipUpperRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02ALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar02ALeft_UpDown;
                    BoneUpDown.ValueChanged += VieraEar02ALeft_UpDown;
                }
            }
            if (CharacterDetails.HrothLipLower_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= HrothLipLower_UpDown;
                    BoneUpDown.ValueChanged += HrothLipLower_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02ARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar02ARight_UpDown;
                    BoneUpDown.ValueChanged += VieraEar02ARight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03ALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar03ALeft_UpDown;
                    BoneUpDown.ValueChanged += VieraEar03ALeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03ARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar03ARight_UpDown;
                    BoneUpDown.ValueChanged += VieraEar03ARight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04ALeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar04ALeft_UpDown;
                    BoneUpDown.ValueChanged += VieraEar04ALeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04ARight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar04ARight_UpDown;
                    BoneUpDown.ValueChanged += VieraEar04ARight_UpDown;
                }
            }
            if (CharacterDetails.VieraLipLowerA_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraLipLowerA_UpDown;
                    BoneUpDown.ValueChanged += VieraLipLowerA_UpDown;
                }
            }
            if (CharacterDetails.VieraLipUpperB_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraLipUpperB_UpDown;
                    BoneUpDown.ValueChanged += VieraLipUpperB_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01BLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar01BLeft_UpDown;
                    BoneUpDown.ValueChanged += VieraEar01BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01BRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar01BRight_UpDown;
                    BoneUpDown.ValueChanged += VieraEar01BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02BLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar02BLeft_UpDown;
                    BoneUpDown.ValueChanged += VieraEar02BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02BRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar02BRight_UpDown;
                    BoneUpDown.ValueChanged += VieraEar02BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03BLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar03BLeft_UpDown;
                    BoneUpDown.ValueChanged += VieraEar03BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03BRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar03BRight_UpDown;
                    BoneUpDown.ValueChanged += VieraEar03BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04BLeft_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar04BLeft_UpDown;
                    BoneUpDown.ValueChanged += VieraEar04BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04BRight_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraEar04BRight_UpDown;
                    BoneUpDown.ValueChanged += VieraEar04BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraLipLowerB_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= VieraLipLowerB_UpDown;
                    BoneUpDown.ValueChanged += VieraLipLowerB_UpDown;
                }
            }
            if (CharacterDetails.ExHairA_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairA_UpDown;
                    BoneUpDown.ValueChanged += ExHairA_UpDown;
                }
            }
            if (CharacterDetails.ExHairB_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairB_UpDown;
                    BoneUpDown.ValueChanged += ExHairB_UpDown;
                }
            }
            if (CharacterDetails.ExHairC_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairC_UpDown;
                    BoneUpDown.ValueChanged += ExHairC_UpDown;
                }
            }
            if (CharacterDetails.ExHairD_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairD_UpDown;
                    BoneUpDown.ValueChanged += ExHairD_UpDown;
                }
            }
            if (CharacterDetails.ExHairE_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairE_UpDown;
                    BoneUpDown.ValueChanged += ExHairE_UpDown;
                }
            }
            if (CharacterDetails.ExHairF_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairF_UpDown;
                    BoneUpDown.ValueChanged += ExHairF_UpDown;
                }
            }
            if (CharacterDetails.ExHairG_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairG_UpDown;
                    BoneUpDown.ValueChanged += ExHairG_UpDown;
                }
            }
            if (CharacterDetails.ExHairH_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairH_UpDown;
                    BoneUpDown.ValueChanged += ExHairH_UpDown;
                }
            }
            if (CharacterDetails.ExHairI_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairI_UpDown;
                    BoneUpDown.ValueChanged += ExHairI_UpDown;
                }
            }
            if (CharacterDetails.ExHairJ_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairJ_UpDown;
                    BoneUpDown.ValueChanged += ExHairJ_UpDown;
                }
            }
            if (CharacterDetails.ExHairK_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairK_UpDown;
                    BoneUpDown.ValueChanged += ExHairK_UpDown;
                }
            }
            if (CharacterDetails.ExHairL_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExHairL_UpDown;
                    BoneUpDown.ValueChanged += ExHairL_UpDown;
                }
            }
            if (CharacterDetails.ExMetA_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetA_UpDown;
                    BoneUpDown.ValueChanged += ExMetA_UpDown;
                }
            }
            if (CharacterDetails.ExMetB_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetB_UpDown;
                    BoneUpDown.ValueChanged += ExMetB_UpDown;
                }
            }
            if (CharacterDetails.ExMetC_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetC_UpDown;
                    BoneUpDown.ValueChanged += ExMetC_UpDown;
                }
            }
            if (CharacterDetails.ExMetD_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetD_UpDown;
                    BoneUpDown.ValueChanged += ExMetD_UpDown;
                }
            }
            if (CharacterDetails.ExMetE_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetE_UpDown;
                    BoneUpDown.ValueChanged += ExMetE_UpDown;
                }
            }
            if (CharacterDetails.ExMetF_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetF_UpDown;
                    BoneUpDown.ValueChanged += ExMetF_UpDown;
                }
            }
            if (CharacterDetails.ExMetG_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetG_UpDown;
                    BoneUpDown.ValueChanged += ExMetG_UpDown;
                }
            }
            if (CharacterDetails.ExMetH_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetH_UpDown;
                    BoneUpDown.ValueChanged += ExMetH_UpDown;
                }
            }
            if (CharacterDetails.ExMetI_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetI_UpDown;
                    BoneUpDown.ValueChanged += ExMetI_UpDown;
                }
            }
            if (CharacterDetails.ExMetJ_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetJ_UpDown;
                    BoneUpDown.ValueChanged += ExMetJ_UpDown;
                }
            }
            if (CharacterDetails.ExMetK_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetK_UpDown;
                    BoneUpDown.ValueChanged += ExMetK_UpDown;
                }
            }
            if (CharacterDetails.ExMetL_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetL_UpDown;
                    BoneUpDown.ValueChanged += ExMetL_UpDown;
                }
            }
            if (CharacterDetails.ExMetM_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetM_UpDown;
                    BoneUpDown.ValueChanged += ExMetM_UpDown;
                }
            }
            if (CharacterDetails.ExMetN_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetN_UpDown;
                    BoneUpDown.ValueChanged += ExMetN_UpDown;
                }
            }
            if (CharacterDetails.ExMetO_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetO_UpDown;
                    BoneUpDown.ValueChanged += ExMetO_UpDown;
                }
            }
            if (CharacterDetails.ExMetP_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetP_UpDown;
                    BoneUpDown.ValueChanged += ExMetP_UpDown;
                }
            }
            if (CharacterDetails.ExMetQ_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetQ_UpDown;
                    BoneUpDown.ValueChanged += ExMetQ_UpDown;
                }
            }
            if (CharacterDetails.ExMetR_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExMetR_UpDown;
                    BoneUpDown.ValueChanged += ExMetR_UpDown;
                }
            }
            if (CharacterDetails.ExTopA_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExTopA_UpDown;
                    BoneUpDown.ValueChanged += ExTopA_UpDown;
                }
            }
            if (CharacterDetails.ExTopB_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExTopB_UpDown;
                    BoneUpDown.ValueChanged += ExTopB_UpDown;
                }
            }
            if (CharacterDetails.ExTopC_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExTopC_UpDown;
                    BoneUpDown.ValueChanged += ExTopC_UpDown;
                }
            }
            if (CharacterDetails.ExTopD_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExTopD_UpDown;
                    BoneUpDown.ValueChanged += ExTopD_UpDown;
                }
            }
            if (CharacterDetails.ExTopE_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExTopE_UpDown;
                    BoneUpDown.ValueChanged += ExTopE_UpDown;
                }
            }
            if (CharacterDetails.ExTopF_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExTopF_UpDown;
                    BoneUpDown.ValueChanged += ExTopF_UpDown;
                }
            }
            if (CharacterDetails.ExTopG_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExTopG_UpDown;
                    BoneUpDown.ValueChanged += ExTopG_UpDown;
                }
            }
            if (CharacterDetails.ExTopH_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExTopH_UpDown;
                    BoneUpDown.ValueChanged += ExTopH_UpDown;
                }
            }
            if (CharacterDetails.ExTopI_Rotate)
            {
                if (BoneUpDown.IsKeyboardFocusWithin || BoneUpDown.IsMouseOver)
                {
                    BoneUpDown.ValueChanged -= ExTopI_UpDown;
                    BoneUpDown.ValueChanged += ExTopI_UpDown;
                }
            }
        }
        private void BoneUpDown2_SourceUpdated(object sender, DataTransferEventArgs e)
        {
            if (CharacterDetails.Root_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= Root_UpDown;
                    BoneUpDown2.ValueChanged += Root_UpDown;
                }
            }
            if (CharacterDetails.Abdomen_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= Abdomen_UpDown;
                    BoneUpDown2.ValueChanged += Abdomen_UpDown;
                }
            }
            if (CharacterDetails.Throw_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= Throw_UpDown;
                    BoneUpDown2.ValueChanged += Throw_UpDown;
                }
            }
            if (CharacterDetails.Waist_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= Waist_UpDown;
                    BoneUpDown2.ValueChanged += Waist_UpDown;
                }
            }
            if (CharacterDetails.SpineA_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= SpineA_UpDown;
                    BoneUpDown2.ValueChanged += SpineA_UpDown;
                }
            }
            if (CharacterDetails.LegLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= LegLeft_UpDown;
                    BoneUpDown2.ValueChanged += LegLeft_UpDown;
                }
            }
            if (CharacterDetails.LegRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= LegRight_UpDown;
                    BoneUpDown2.ValueChanged += LegRight_UpDown;
                }
            }
            if (CharacterDetails.HolsterLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HolsterLeft_UpDown;
                    BoneUpDown2.ValueChanged += HolsterLeft_UpDown;
                }
            }
            if (CharacterDetails.HolsterRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HolsterRight_UpDown;
                    BoneUpDown2.ValueChanged += HolsterRight_UpDown;
                }
            }
            if (CharacterDetails.SheatheLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= SheatheLeft_UpDown;
                    BoneUpDown2.ValueChanged += SheatheLeft_UpDown;
                }
            }
            if (CharacterDetails.SheatheRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= SheatheRight_UpDown;
                    BoneUpDown2.ValueChanged += SheatheRight_UpDown;
                }
            }
            if (CharacterDetails.SpineB_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= SpineB_UpDown;
                    BoneUpDown2.ValueChanged += SpineB_UpDown;
                }
            }
            if (CharacterDetails.ClothBackALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothBackALeft_UpDown;
                    BoneUpDown2.ValueChanged += ClothBackALeft_UpDown;
                }
            }
            if (CharacterDetails.ClothBackARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothBackARight_UpDown;
                    BoneUpDown2.ValueChanged += ClothBackARight_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothFrontALeft_UpDown;
                    BoneUpDown2.ValueChanged += ClothFrontALeft_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothFrontARight_UpDown;
                    BoneUpDown2.ValueChanged += ClothFrontARight_UpDown;
                }
            }
            if (CharacterDetails.ClothSideALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothSideALeft_UpDown;
                    BoneUpDown2.ValueChanged += ClothSideALeft_UpDown;
                }
            }
            if (CharacterDetails.ClothSideARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothSideARight_UpDown;
                    BoneUpDown2.ValueChanged += ClothSideARight_UpDown;
                }
            }
            if (CharacterDetails.KneeLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= KneeLeft_UpDown;
                    BoneUpDown2.ValueChanged += KneeLeft_UpDown;
                }
            }
            if (CharacterDetails.KneeRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= KneeRight_UpDown;
                    BoneUpDown2.ValueChanged += KneeRight_UpDown;
                }
            }
            if (CharacterDetails.BreastLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= BreastLeft_UpDown;
                    BoneUpDown2.ValueChanged += BreastLeft_UpDown;
                }
            }
            if (CharacterDetails.BreastRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= BreastRight_UpDown;
                    BoneUpDown2.ValueChanged += BreastRight_UpDown;
                }
            }
            if (CharacterDetails.SpineC_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= SpineC_UpDown;
                    BoneUpDown2.ValueChanged += SpineC_UpDown;
                }
            }
            if (CharacterDetails.ClothBackBLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothBackBLeft_UpDown;
                    BoneUpDown2.ValueChanged += ClothBackBLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothBackBRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothBackBRight_UpDown;
                    BoneUpDown2.ValueChanged += ClothBackBRight_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontBLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothFrontBLeft_UpDown;
                    BoneUpDown2.ValueChanged += ClothFrontBLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontBRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothFrontBRight_UpDown;
                    BoneUpDown2.ValueChanged += ClothFrontBRight_UpDown;
                }
            }
            if (CharacterDetails.ClothSideBLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothSideBLeft_UpDown;
                    BoneUpDown2.ValueChanged += ClothSideBLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothSideBRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothSideBRight_UpDown;
                    BoneUpDown2.ValueChanged += ClothSideBRight_UpDown;
                }
            }
            if (CharacterDetails.CalfLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= CalfLeft_UpDown;
                    BoneUpDown2.ValueChanged += CalfLeft_UpDown;
                }
            }
            if (CharacterDetails.CalfRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= CalfRight_UpDown;
                    BoneUpDown2.ValueChanged += CalfRight_UpDown;
                }
            }
            if (CharacterDetails.ScabbardLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ScabbardLeft_UpDown;
                    BoneUpDown2.ValueChanged += ScabbardLeft_UpDown;
                }
            }
            if (CharacterDetails.ScabbardRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ScabbardRight_UpDown;
                    BoneUpDown2.ValueChanged += ScabbardRight_UpDown;
                }
            }
            if (CharacterDetails.Neck_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= Neck_UpDown;
                    BoneUpDown2.ValueChanged += Neck_UpDown;
                }
            }
            if (CharacterDetails.ClavicleLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClavicleLeft_UpDown;
                    BoneUpDown2.ValueChanged += ClavicleLeft_UpDown;
                }
            }
            if (CharacterDetails.ClavicleRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClavicleRight_UpDown;
                    BoneUpDown2.ValueChanged += ClavicleRight_UpDown;
                }
            }
            if (CharacterDetails.ClothBackCLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothBackCLeft_UpDown;
                    BoneUpDown2.ValueChanged += ClothBackCLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothBackCRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothBackCRight_UpDown;
                    BoneUpDown2.ValueChanged += ClothBackCRight_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontCLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothFrontCLeft_UpDown;
                    BoneUpDown2.ValueChanged += ClothFrontCLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontCRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothFrontCRight_UpDown;
                    BoneUpDown2.ValueChanged += ClothFrontCRight_UpDown;
                }
            }
            if (CharacterDetails.ClothSideCLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothSideCLeft_UpDown;
                    BoneUpDown2.ValueChanged += ClothSideCLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothSideCRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ClothSideCRight_UpDown;
                    BoneUpDown2.ValueChanged += ClothSideCRight_UpDown;
                }
            }
            if (CharacterDetails.PoleynLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= PoleynLeft_UpDown;
                    BoneUpDown2.ValueChanged += PoleynLeft_UpDown;
                }
            }
            if (CharacterDetails.PoleynRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= PoleynRight_UpDown;
                    BoneUpDown2.ValueChanged += PoleynRight_UpDown;
                }
            }
            if (CharacterDetails.FootLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= FootLeft_UpDown;
                    BoneUpDown2.ValueChanged += FootLeft_UpDown;
                }
            }
            if (CharacterDetails.FootRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= FootRight_UpDown;
                    BoneUpDown2.ValueChanged += FootRight_UpDown;
                }
            }
            if (CharacterDetails.Head_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= Head_UpDown;
                    BoneUpDown2.ValueChanged += Head_UpDown;
                }
            }
            if (CharacterDetails.ArmLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ArmLeft_UpDown;
                    BoneUpDown2.ValueChanged += ArmLeft_UpDown;
                }
            }
            if (CharacterDetails.ArmRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ArmRight_UpDown;
                    BoneUpDown2.ValueChanged += ArmRight_UpDown;
                }
            }
            if (CharacterDetails.PauldronLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= PauldronLeft_UpDown;
                    BoneUpDown2.ValueChanged += PauldronLeft_UpDown;
                }
            }
            if (CharacterDetails.PauldronRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= PauldronRight_UpDown;
                    BoneUpDown2.ValueChanged += PauldronRight_UpDown;
                }
            }
            if (CharacterDetails.Unknown00_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= Unknown00_UpDown;
                    BoneUpDown2.ValueChanged += Unknown00_UpDown;
                }
            }
            if (CharacterDetails.ToesLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ToesLeft_UpDown;
                    BoneUpDown2.ValueChanged += ToesLeft_UpDown;
                }
            }
            if (CharacterDetails.ToesRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ToesRight_UpDown;
                    BoneUpDown2.ValueChanged += ToesRight_UpDown;
                }
            }
            if (CharacterDetails.HairA_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HairA_UpDown;
                    BoneUpDown2.ValueChanged += HairA_UpDown;
                }
            }
            if (CharacterDetails.HairFrontLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HairFrontLeft_UpDown;
                    BoneUpDown2.ValueChanged += HairFrontLeft_UpDown;
                }
            }
            if (CharacterDetails.HairFrontRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HairFrontRight_UpDown;
                    BoneUpDown2.ValueChanged += HairFrontRight_UpDown;
                }
            }
            if (CharacterDetails.EarLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EarLeft_UpDown;
                    BoneUpDown2.ValueChanged += EarLeft_UpDown;
                }
            }
            if (CharacterDetails.EarRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EarRight_UpDown;
                    BoneUpDown2.ValueChanged += EarRight_UpDown;
                }
            }
            if (CharacterDetails.ForearmLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ForearmLeft_UpDown;
                    BoneUpDown2.ValueChanged += ForearmLeft_UpDown;
                }
            }
            if (CharacterDetails.ForearmRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ForearmRight_UpDown;
                    BoneUpDown2.ValueChanged += ForearmRight_UpDown;
                }
            }
            if (CharacterDetails.ShoulderLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ShoulderLeft_UpDown;
                    BoneUpDown2.ValueChanged += ShoulderLeft_UpDown;
                }
            }
            if (CharacterDetails.ShoulderRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ShoulderRight_UpDown;
                    BoneUpDown2.ValueChanged += ShoulderRight_UpDown;
                }
            }
            if (CharacterDetails.HairB_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HairB_UpDown;
                    BoneUpDown2.ValueChanged += HairB_UpDown;
                }
            }
            if (CharacterDetails.HandLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HandLeft_UpDown;
                    BoneUpDown2.ValueChanged += HandLeft_UpDown;
                }
            }
            if (CharacterDetails.HandRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HandRight_UpDown;
                    BoneUpDown2.ValueChanged += HandRight_UpDown;
                }
            }
            if (CharacterDetails.ShieldLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ShieldLeft_UpDown;
                    BoneUpDown2.ValueChanged += ShieldLeft_UpDown;
                }
            }
            if (CharacterDetails.ShieldRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ShieldRight_UpDown;
                    BoneUpDown2.ValueChanged += ShieldRight_UpDown;
                }
            }
            if (CharacterDetails.EarringALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EarringALeft_UpDown;
                    BoneUpDown2.ValueChanged += EarringALeft_UpDown;
                }
            }
            if (CharacterDetails.EarringARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EarringARight_UpDown;
                    BoneUpDown2.ValueChanged += EarringARight_UpDown;
                }
            }
            if (CharacterDetails.ElbowLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ElbowLeft_UpDown;
                    BoneUpDown2.ValueChanged += ElbowLeft_UpDown;
                }
            }
            if (CharacterDetails.ElbowRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ElbowRight_UpDown;
                    BoneUpDown2.ValueChanged += ElbowRight_UpDown;
                }
            }
            if (CharacterDetails.CouterLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= CouterLeft_UpDown;
                    BoneUpDown2.ValueChanged += CouterLeft_UpDown;
                }
            }
            if (CharacterDetails.CouterRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= CouterRight_UpDown;
                    BoneUpDown2.ValueChanged += CouterRight_UpDown;
                }
            }
            if (CharacterDetails.WristLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= WristLeft_UpDown;
                    BoneUpDown2.ValueChanged += WristLeft_UpDown;
                }
            }
            if (CharacterDetails.WristRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= WristRight_UpDown;
                    BoneUpDown2.ValueChanged += WristRight_UpDown;
                }
            }
            if (CharacterDetails.IndexALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= IndexALeft_UpDown;
                    BoneUpDown2.ValueChanged += IndexALeft_UpDown;
                }
            }
            if (CharacterDetails.IndexARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= IndexARight_UpDown;
                    BoneUpDown2.ValueChanged += IndexARight_UpDown;
                }
            }
            if (CharacterDetails.PinkyALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= PinkyALeft_UpDown;
                    BoneUpDown2.ValueChanged += PinkyALeft_UpDown;
                }
            }
            if (CharacterDetails.PinkyARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= PinkyARight_UpDown;
                    BoneUpDown2.ValueChanged += PinkyARight_UpDown;
                }
            }
            if (CharacterDetails.RingALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= RingALeft_UpDown;
                    BoneUpDown2.ValueChanged += RingALeft_UpDown;
                }
            }
            if (CharacterDetails.RingARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= RingARight_UpDown;
                    BoneUpDown2.ValueChanged += RingARight_UpDown;
                }
            }
            if (CharacterDetails.MiddleALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= MiddleALeft_UpDown;
                    BoneUpDown2.ValueChanged += MiddleALeft_UpDown;
                }
            }
            if (CharacterDetails.MiddleARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= MiddleARight_UpDown;
                    BoneUpDown2.ValueChanged += MiddleARight_UpDown;
                }
            }
            if (CharacterDetails.ThumbALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ThumbALeft_UpDown;
                    BoneUpDown2.ValueChanged += ThumbALeft_UpDown;
                }
            }
            if (CharacterDetails.ThumbARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ThumbARight_UpDown;
                    BoneUpDown2.ValueChanged += ThumbARight_UpDown;
                }
            }
            if (CharacterDetails.WeaponLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= WeaponLeft_UpDown;
                    BoneUpDown2.ValueChanged += WeaponLeft_UpDown;
                }
            }
            if (CharacterDetails.WeaponRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= WeaponRight_UpDown;
                    BoneUpDown2.ValueChanged += WeaponRight_UpDown;
                }
            }
            if (CharacterDetails.EarringBLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EarringBLeft_UpDown;
                    BoneUpDown2.ValueChanged += EarringBLeft_UpDown;
                }
            }
            if (CharacterDetails.EarringBRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EarringBRight_UpDown;
                    BoneUpDown2.ValueChanged += EarringBRight_UpDown;
                }
            }
            if (CharacterDetails.IndexBLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= IndexBLeft_UpDown;
                    BoneUpDown2.ValueChanged += IndexBLeft_UpDown;
                }
            }
            if (CharacterDetails.IndexBRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= IndexBRight_UpDown;
                    BoneUpDown2.ValueChanged += IndexBRight_UpDown;
                }
            }
            if (CharacterDetails.PinkyBLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= PinkyBLeft_UpDown;
                    BoneUpDown2.ValueChanged += PinkyBLeft_UpDown;
                }
            }
            if (CharacterDetails.PinkyBRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= PinkyBRight_UpDown;
                    BoneUpDown2.ValueChanged += PinkyBRight_UpDown;
                }
            }
            if (CharacterDetails.RingBLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= RingBLeft_UpDown;
                    BoneUpDown2.ValueChanged += RingBLeft_UpDown;
                }
            }
            if (CharacterDetails.RingBRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= RingBRight_UpDown;
                    BoneUpDown2.ValueChanged += RingBRight_UpDown;
                }
            }
            if (CharacterDetails.MiddleBLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= MiddleBLeft_UpDown;
                    BoneUpDown2.ValueChanged += MiddleBLeft_UpDown;
                }
            }
            if (CharacterDetails.MiddleBRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= MiddleBRight_UpDown;
                    BoneUpDown2.ValueChanged += MiddleBRight_UpDown;
                }
            }
            if (CharacterDetails.ThumbBLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ThumbBLeft_UpDown;
                    BoneUpDown2.ValueChanged += ThumbBLeft_UpDown;
                }
            }
            if (CharacterDetails.ThumbBRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ThumbBRight_UpDown;
                    BoneUpDown2.ValueChanged += ThumbBRight_UpDown;
                }
            }
            if (CharacterDetails.TailA_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= TailA_UpDown;
                    BoneUpDown2.ValueChanged += TailA_UpDown;
                }
            }
            if (CharacterDetails.TailB_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= TailB_UpDown;
                    BoneUpDown2.ValueChanged += TailB_UpDown;
                }
            }
            if (CharacterDetails.TailC_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= TailC_UpDown;
                    BoneUpDown2.ValueChanged += TailC_UpDown;
                }
            }
            if (CharacterDetails.TailD_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= TailD_UpDown;
                    BoneUpDown2.ValueChanged += TailD_UpDown;
                }
            }
            if (CharacterDetails.TailE_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= TailE_UpDown;
                    BoneUpDown2.ValueChanged += TailE_UpDown;
                }
            }
            if (CharacterDetails.RootHead_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= RootHead_UpDown;
                    BoneUpDown2.ValueChanged += RootHead_UpDown;
                }
            }
            if (CharacterDetails.Jaw_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= Jaw_UpDown;
                    BoneUpDown2.ValueChanged += Jaw_UpDown;
                }
            }
            if (CharacterDetails.EyelidLowerLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EyelidLowerLeft_UpDown;
                    BoneUpDown2.ValueChanged += EyelidLowerLeft_UpDown;
                }
            }
            if (CharacterDetails.EyelidLowerRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EyelidLowerRight_UpDown;
                    BoneUpDown2.ValueChanged += EyelidLowerRight_UpDown;
                }
            }
            if (CharacterDetails.EyeLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EyeLeft_UpDown;
                    BoneUpDown2.ValueChanged += EyeLeft_UpDown;
                }
            }
            if (CharacterDetails.EyeRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EyeRight_UpDown;
                    BoneUpDown2.ValueChanged += EyeRight_UpDown;
                }
            }
            if (CharacterDetails.Nose_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= Nose_UpDown;
                    BoneUpDown2.ValueChanged += Nose_UpDown;
                }
            }
            if (CharacterDetails.CheekLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= CheekLeft_UpDown;
                    BoneUpDown2.ValueChanged += CheekLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothWhiskersLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothWhiskersLeft_UpDown;
                    BoneUpDown2.ValueChanged += HrothWhiskersLeft_UpDown;
                }
            }
            if (CharacterDetails.CheekRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= CheekRight_UpDown;
                    BoneUpDown2.ValueChanged += CheekRight_UpDown;
                }
            }
            if (CharacterDetails.HrothWhiskersRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothWhiskersRight_UpDown;
                    BoneUpDown2.ValueChanged += HrothWhiskersRight_UpDown;
                }
            }
            if (CharacterDetails.LipsLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= LipsLeft_UpDown;
                    BoneUpDown2.ValueChanged += LipsLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothEyebrowLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothEyebrowLeft_UpDown;
                    BoneUpDown2.ValueChanged += HrothEyebrowLeft_UpDown;
                }
            }
            if (CharacterDetails.LipsRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= LipsRight_UpDown;
                    BoneUpDown2.ValueChanged += LipsRight_UpDown;
                }
            }
            if (CharacterDetails.HrothEyebrowRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothEyebrowRight_UpDown;
                    BoneUpDown2.ValueChanged += HrothEyebrowRight_UpDown;
                }
            }
            if (CharacterDetails.EyebrowLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EyebrowLeft_UpDown;
                    BoneUpDown2.ValueChanged += EyebrowLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothBridge_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothBridge_UpDown;
                    BoneUpDown2.ValueChanged += HrothBridge_UpDown;
                }
            }
            if (CharacterDetails.EyebrowRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EyebrowRight_UpDown;
                    BoneUpDown2.ValueChanged += EyebrowRight_UpDown;
                }
            }
            if (CharacterDetails.HrothBrowLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothBrowLeft_UpDown;
                    BoneUpDown2.ValueChanged += HrothBrowLeft_UpDown;
                }
            }
            if (CharacterDetails.Bridge_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= Bridge_UpDown;
                    BoneUpDown2.ValueChanged += Bridge_UpDown;
                }
            }
            if (CharacterDetails.HrothBrowRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothBrowRight_UpDown;
                    BoneUpDown2.ValueChanged += HrothBrowRight_UpDown;
                }
            }
            if (CharacterDetails.BrowLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= BrowLeft_UpDown;
                    BoneUpDown2.ValueChanged += BrowLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothJawUpper_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothJawUpper_UpDown;
                    BoneUpDown2.ValueChanged += HrothJawUpper_UpDown;
                }
            }
            if (CharacterDetails.BrowRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= BrowRight_UpDown;
                    BoneUpDown2.ValueChanged += BrowRight_UpDown;
                }
            }
            if (CharacterDetails.HrothLipUpper_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothLipUpper_UpDown;
                    BoneUpDown2.ValueChanged += HrothLipUpper_UpDown;
                }
            }
            if (CharacterDetails.LipUpperA_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= LipUpperA_UpDown;
                    BoneUpDown2.ValueChanged += LipUpperA_UpDown;
                }
            }
            if (CharacterDetails.HrothEyelidUpperLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothEyelidUpperLeft_UpDown;
                    BoneUpDown2.ValueChanged += HrothEyelidUpperLeft_UpDown;
                }
            }
            if (CharacterDetails.EyelidUpperLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EyelidUpperLeft_UpDown;
                    BoneUpDown2.ValueChanged += EyelidUpperLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothEyelidUpperRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothEyelidUpperRight_UpDown;
                    BoneUpDown2.ValueChanged += HrothEyelidUpperRight_UpDown;
                }
            }
            if (CharacterDetails.EyelidUpperRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= EyelidUpperRight_UpDown;
                    BoneUpDown2.ValueChanged += EyelidUpperRight_UpDown;
                }
            }
            if (CharacterDetails.HrothLipsLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothLipsLeft_UpDown;
                    BoneUpDown2.ValueChanged += HrothLipsLeft_UpDown;
                }
            }
            if (CharacterDetails.LipLowerA_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= LipLowerA_UpDown;
                    BoneUpDown2.ValueChanged += LipLowerA_UpDown;
                }
            }
            if (CharacterDetails.HrothLipsRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothLipsRight_UpDown;
                    BoneUpDown2.ValueChanged += HrothLipsRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01ALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar01ALeft_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar01ALeft_UpDown;
                }
            }
            if (CharacterDetails.LipUpperB_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= LipUpperB_UpDown;
                    BoneUpDown2.ValueChanged += LipUpperB_UpDown;
                }
            }
            if (CharacterDetails.HrothLipUpperLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothLipUpperLeft_UpDown;
                    BoneUpDown2.ValueChanged += HrothLipUpperLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01ARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar01ARight_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar01ARight_UpDown;
                }
            }
            if (CharacterDetails.LipLowerB_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= LipLowerB_UpDown;
                    BoneUpDown2.ValueChanged += LipLowerB_UpDown;
                }
            }
            if (CharacterDetails.HrothLipUpperRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothLipUpperRight_UpDown;
                    BoneUpDown2.ValueChanged += HrothLipUpperRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02ALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar02ALeft_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar02ALeft_UpDown;
                }
            }
            if (CharacterDetails.HrothLipLower_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= HrothLipLower_UpDown;
                    BoneUpDown2.ValueChanged += HrothLipLower_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02ARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar02ARight_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar02ARight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03ALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar03ALeft_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar03ALeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03ARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar03ARight_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar03ARight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04ALeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar04ALeft_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar04ALeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04ARight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar04ARight_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar04ARight_UpDown;
                }
            }
            if (CharacterDetails.VieraLipLowerA_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraLipLowerA_UpDown;
                    BoneUpDown2.ValueChanged += VieraLipLowerA_UpDown;
                }
            }
            if (CharacterDetails.VieraLipUpperB_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraLipUpperB_UpDown;
                    BoneUpDown2.ValueChanged += VieraLipUpperB_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01BLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar01BLeft_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar01BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01BRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar01BRight_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar01BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02BLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar02BLeft_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar02BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02BRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar02BRight_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar02BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03BLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar03BLeft_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar03BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03BRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar03BRight_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar03BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04BLeft_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar04BLeft_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar04BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04BRight_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraEar04BRight_UpDown;
                    BoneUpDown2.ValueChanged += VieraEar04BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraLipLowerB_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= VieraLipLowerB_UpDown;
                    BoneUpDown2.ValueChanged += VieraLipLowerB_UpDown;
                }
            }
            if (CharacterDetails.ExHairA_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairA_UpDown;
                    BoneUpDown2.ValueChanged += ExHairA_UpDown;
                }
            }
            if (CharacterDetails.ExHairB_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairB_UpDown;
                    BoneUpDown2.ValueChanged += ExHairB_UpDown;
                }
            }
            if (CharacterDetails.ExHairC_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairC_UpDown;
                    BoneUpDown2.ValueChanged += ExHairC_UpDown;
                }
            }
            if (CharacterDetails.ExHairD_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairD_UpDown;
                    BoneUpDown2.ValueChanged += ExHairD_UpDown;
                }
            }
            if (CharacterDetails.ExHairE_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairE_UpDown;
                    BoneUpDown2.ValueChanged += ExHairE_UpDown;
                }
            }
            if (CharacterDetails.ExHairF_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairF_UpDown;
                    BoneUpDown2.ValueChanged += ExHairF_UpDown;
                }
            }
            if (CharacterDetails.ExHairG_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairG_UpDown;
                    BoneUpDown2.ValueChanged += ExHairG_UpDown;
                }
            }
            if (CharacterDetails.ExHairH_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairH_UpDown;
                    BoneUpDown2.ValueChanged += ExHairH_UpDown;
                }
            }
            if (CharacterDetails.ExHairI_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairI_UpDown;
                    BoneUpDown2.ValueChanged += ExHairI_UpDown;
                }
            }
            if (CharacterDetails.ExHairJ_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairJ_UpDown;
                    BoneUpDown2.ValueChanged += ExHairJ_UpDown;
                }
            }
            if (CharacterDetails.ExHairK_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairK_UpDown;
                    BoneUpDown2.ValueChanged += ExHairK_UpDown;
                }
            }
            if (CharacterDetails.ExHairL_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExHairL_UpDown;
                    BoneUpDown2.ValueChanged += ExHairL_UpDown;
                }
            }
            if (CharacterDetails.ExMetA_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetA_UpDown;
                    BoneUpDown2.ValueChanged += ExMetA_UpDown;
                }
            }
            if (CharacterDetails.ExMetB_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetB_UpDown;
                    BoneUpDown2.ValueChanged += ExMetB_UpDown;
                }
            }
            if (CharacterDetails.ExMetC_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetC_UpDown;
                    BoneUpDown2.ValueChanged += ExMetC_UpDown;
                }
            }
            if (CharacterDetails.ExMetD_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetD_UpDown;
                    BoneUpDown2.ValueChanged += ExMetD_UpDown;
                }
            }
            if (CharacterDetails.ExMetE_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetE_UpDown;
                    BoneUpDown2.ValueChanged += ExMetE_UpDown;
                }
            }
            if (CharacterDetails.ExMetF_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetF_UpDown;
                    BoneUpDown2.ValueChanged += ExMetF_UpDown;
                }
            }
            if (CharacterDetails.ExMetG_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetG_UpDown;
                    BoneUpDown2.ValueChanged += ExMetG_UpDown;
                }
            }
            if (CharacterDetails.ExMetH_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetH_UpDown;
                    BoneUpDown2.ValueChanged += ExMetH_UpDown;
                }
            }
            if (CharacterDetails.ExMetI_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetI_UpDown;
                    BoneUpDown2.ValueChanged += ExMetI_UpDown;
                }
            }
            if (CharacterDetails.ExMetJ_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetJ_UpDown;
                    BoneUpDown2.ValueChanged += ExMetJ_UpDown;
                }
            }
            if (CharacterDetails.ExMetK_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetK_UpDown;
                    BoneUpDown2.ValueChanged += ExMetK_UpDown;
                }
            }
            if (CharacterDetails.ExMetL_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetL_UpDown;
                    BoneUpDown2.ValueChanged += ExMetL_UpDown;
                }
            }
            if (CharacterDetails.ExMetM_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetM_UpDown;
                    BoneUpDown2.ValueChanged += ExMetM_UpDown;
                }
            }
            if (CharacterDetails.ExMetN_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetN_UpDown;
                    BoneUpDown2.ValueChanged += ExMetN_UpDown;
                }
            }
            if (CharacterDetails.ExMetO_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetO_UpDown;
                    BoneUpDown2.ValueChanged += ExMetO_UpDown;
                }
            }
            if (CharacterDetails.ExMetP_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetP_UpDown;
                    BoneUpDown2.ValueChanged += ExMetP_UpDown;
                }
            }
            if (CharacterDetails.ExMetQ_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetQ_UpDown;
                    BoneUpDown2.ValueChanged += ExMetQ_UpDown;
                }
            }
            if (CharacterDetails.ExMetR_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExMetR_UpDown;
                    BoneUpDown2.ValueChanged += ExMetR_UpDown;
                }
            }
            if (CharacterDetails.ExTopA_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExTopA_UpDown;
                    BoneUpDown2.ValueChanged += ExTopA_UpDown;
                }
            }
            if (CharacterDetails.ExTopB_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExTopB_UpDown;
                    BoneUpDown2.ValueChanged += ExTopB_UpDown;
                }
            }
            if (CharacterDetails.ExTopC_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExTopC_UpDown;
                    BoneUpDown2.ValueChanged += ExTopC_UpDown;
                }
            }
            if (CharacterDetails.ExTopD_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExTopD_UpDown;
                    BoneUpDown2.ValueChanged += ExTopD_UpDown;
                }
            }
            if (CharacterDetails.ExTopE_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExTopE_UpDown;
                    BoneUpDown2.ValueChanged += ExTopE_UpDown;
                }
            }
            if (CharacterDetails.ExTopF_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExTopF_UpDown;
                    BoneUpDown2.ValueChanged += ExTopF_UpDown;
                }
            }
            if (CharacterDetails.ExTopG_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExTopG_UpDown;
                    BoneUpDown2.ValueChanged += ExTopG_UpDown;
                }
            }
            if (CharacterDetails.ExTopH_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExTopH_UpDown;
                    BoneUpDown2.ValueChanged += ExTopH_UpDown;
                }
            }
            if (CharacterDetails.ExTopI_Rotate)
            {
                if (BoneUpDown2.IsKeyboardFocusWithin || BoneUpDown2.IsMouseOver)
                {
                    BoneUpDown2.ValueChanged -= ExTopI_UpDown;
                    BoneUpDown2.ValueChanged += ExTopI_UpDown;
                }
            }
        }
        private void BoneUpDown3_SourceUpdated(object sender, DataTransferEventArgs e)
        {
            if (CharacterDetails.Root_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= Root_UpDown;
                    BoneUpDown3.ValueChanged += Root_UpDown;
                }
            }
            if (CharacterDetails.Abdomen_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= Abdomen_UpDown;
                    BoneUpDown3.ValueChanged += Abdomen_UpDown;
                }
            }
            if (CharacterDetails.Throw_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= Throw_UpDown;
                    BoneUpDown3.ValueChanged += Throw_UpDown;
                }
            }
            if (CharacterDetails.Waist_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= Waist_UpDown;
                    BoneUpDown3.ValueChanged += Waist_UpDown;
                }
            }
            if (CharacterDetails.SpineA_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= SpineA_UpDown;
                    BoneUpDown3.ValueChanged += SpineA_UpDown;
                }
            }
            if (CharacterDetails.LegLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= LegLeft_UpDown;
                    BoneUpDown3.ValueChanged += LegLeft_UpDown;
                }
            }
            if (CharacterDetails.LegRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= LegRight_UpDown;
                    BoneUpDown3.ValueChanged += LegRight_UpDown;
                }
            }
            if (CharacterDetails.HolsterLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HolsterLeft_UpDown;
                    BoneUpDown3.ValueChanged += HolsterLeft_UpDown;
                }
            }
            if (CharacterDetails.HolsterRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HolsterRight_UpDown;
                    BoneUpDown3.ValueChanged += HolsterRight_UpDown;
                }
            }
            if (CharacterDetails.SheatheLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= SheatheLeft_UpDown;
                    BoneUpDown3.ValueChanged += SheatheLeft_UpDown;
                }
            }
            if (CharacterDetails.SheatheRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= SheatheRight_UpDown;
                    BoneUpDown3.ValueChanged += SheatheRight_UpDown;
                }
            }
            if (CharacterDetails.SpineB_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= SpineB_UpDown;
                    BoneUpDown3.ValueChanged += SpineB_UpDown;
                }
            }
            if (CharacterDetails.ClothBackALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothBackALeft_UpDown;
                    BoneUpDown3.ValueChanged += ClothBackALeft_UpDown;
                }
            }
            if (CharacterDetails.ClothBackARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothBackARight_UpDown;
                    BoneUpDown3.ValueChanged += ClothBackARight_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothFrontALeft_UpDown;
                    BoneUpDown3.ValueChanged += ClothFrontALeft_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothFrontARight_UpDown;
                    BoneUpDown3.ValueChanged += ClothFrontARight_UpDown;
                }
            }
            if (CharacterDetails.ClothSideALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothSideALeft_UpDown;
                    BoneUpDown3.ValueChanged += ClothSideALeft_UpDown;
                }
            }
            if (CharacterDetails.ClothSideARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothSideARight_UpDown;
                    BoneUpDown3.ValueChanged += ClothSideARight_UpDown;
                }
            }
            if (CharacterDetails.KneeLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= KneeLeft_UpDown;
                    BoneUpDown3.ValueChanged += KneeLeft_UpDown;
                }
            }
            if (CharacterDetails.KneeRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= KneeRight_UpDown;
                    BoneUpDown3.ValueChanged += KneeRight_UpDown;
                }
            }
            if (CharacterDetails.BreastLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= BreastLeft_UpDown;
                    BoneUpDown3.ValueChanged += BreastLeft_UpDown;
                }
            }
            if (CharacterDetails.BreastRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= BreastRight_UpDown;
                    BoneUpDown3.ValueChanged += BreastRight_UpDown;
                }
            }
            if (CharacterDetails.SpineC_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= SpineC_UpDown;
                    BoneUpDown3.ValueChanged += SpineC_UpDown;
                }
            }
            if (CharacterDetails.ClothBackBLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothBackBLeft_UpDown;
                    BoneUpDown3.ValueChanged += ClothBackBLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothBackBRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothBackBRight_UpDown;
                    BoneUpDown3.ValueChanged += ClothBackBRight_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontBLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothFrontBLeft_UpDown;
                    BoneUpDown3.ValueChanged += ClothFrontBLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontBRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothFrontBRight_UpDown;
                    BoneUpDown3.ValueChanged += ClothFrontBRight_UpDown;
                }
            }
            if (CharacterDetails.ClothSideBLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothSideBLeft_UpDown;
                    BoneUpDown3.ValueChanged += ClothSideBLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothSideBRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothSideBRight_UpDown;
                    BoneUpDown3.ValueChanged += ClothSideBRight_UpDown;
                }
            }
            if (CharacterDetails.CalfLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= CalfLeft_UpDown;
                    BoneUpDown3.ValueChanged += CalfLeft_UpDown;
                }
            }
            if (CharacterDetails.CalfRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= CalfRight_UpDown;
                    BoneUpDown3.ValueChanged += CalfRight_UpDown;
                }
            }
            if (CharacterDetails.ScabbardLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ScabbardLeft_UpDown;
                    BoneUpDown3.ValueChanged += ScabbardLeft_UpDown;
                }
            }
            if (CharacterDetails.ScabbardRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ScabbardRight_UpDown;
                    BoneUpDown3.ValueChanged += ScabbardRight_UpDown;
                }
            }
            if (CharacterDetails.Neck_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= Neck_UpDown;
                    BoneUpDown3.ValueChanged += Neck_UpDown;
                }
            }
            if (CharacterDetails.ClavicleLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClavicleLeft_UpDown;
                    BoneUpDown3.ValueChanged += ClavicleLeft_UpDown;
                }
            }
            if (CharacterDetails.ClavicleRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClavicleRight_UpDown;
                    BoneUpDown3.ValueChanged += ClavicleRight_UpDown;
                }
            }
            if (CharacterDetails.ClothBackCLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothBackCLeft_UpDown;
                    BoneUpDown3.ValueChanged += ClothBackCLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothBackCRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothBackCRight_UpDown;
                    BoneUpDown3.ValueChanged += ClothBackCRight_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontCLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothFrontCLeft_UpDown;
                    BoneUpDown3.ValueChanged += ClothFrontCLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothFrontCRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothFrontCRight_UpDown;
                    BoneUpDown3.ValueChanged += ClothFrontCRight_UpDown;
                }
            }
            if (CharacterDetails.ClothSideCLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothSideCLeft_UpDown;
                    BoneUpDown3.ValueChanged += ClothSideCLeft_UpDown;
                }
            }
            if (CharacterDetails.ClothSideCRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ClothSideCRight_UpDown;
                    BoneUpDown3.ValueChanged += ClothSideCRight_UpDown;
                }
            }
            if (CharacterDetails.PoleynLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= PoleynLeft_UpDown;
                    BoneUpDown3.ValueChanged += PoleynLeft_UpDown;
                }
            }
            if (CharacterDetails.PoleynRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= PoleynRight_UpDown;
                    BoneUpDown3.ValueChanged += PoleynRight_UpDown;
                }
            }
            if (CharacterDetails.FootLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= FootLeft_UpDown;
                    BoneUpDown3.ValueChanged += FootLeft_UpDown;
                }
            }
            if (CharacterDetails.FootRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= FootRight_UpDown;
                    BoneUpDown3.ValueChanged += FootRight_UpDown;
                }
            }
            if (CharacterDetails.Head_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= Head_UpDown;
                    BoneUpDown3.ValueChanged += Head_UpDown;
                }
            }
            if (CharacterDetails.ArmLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ArmLeft_UpDown;
                    BoneUpDown3.ValueChanged += ArmLeft_UpDown;
                }
            }
            if (CharacterDetails.ArmRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ArmRight_UpDown;
                    BoneUpDown3.ValueChanged += ArmRight_UpDown;
                }
            }
            if (CharacterDetails.PauldronLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= PauldronLeft_UpDown;
                    BoneUpDown3.ValueChanged += PauldronLeft_UpDown;
                }
            }
            if (CharacterDetails.PauldronRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= PauldronRight_UpDown;
                    BoneUpDown3.ValueChanged += PauldronRight_UpDown;
                }
            }
            if (CharacterDetails.Unknown00_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= Unknown00_UpDown;
                    BoneUpDown3.ValueChanged += Unknown00_UpDown;
                }
            }
            if (CharacterDetails.ToesLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ToesLeft_UpDown;
                    BoneUpDown3.ValueChanged += ToesLeft_UpDown;
                }
            }
            if (CharacterDetails.ToesRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ToesRight_UpDown;
                    BoneUpDown3.ValueChanged += ToesRight_UpDown;
                }
            }
            if (CharacterDetails.HairA_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HairA_UpDown;
                    BoneUpDown3.ValueChanged += HairA_UpDown;
                }
            }
            if (CharacterDetails.HairFrontLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HairFrontLeft_UpDown;
                    BoneUpDown3.ValueChanged += HairFrontLeft_UpDown;
                }
            }
            if (CharacterDetails.HairFrontRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HairFrontRight_UpDown;
                    BoneUpDown3.ValueChanged += HairFrontRight_UpDown;
                }
            }
            if (CharacterDetails.EarLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EarLeft_UpDown;
                    BoneUpDown3.ValueChanged += EarLeft_UpDown;
                }
            }
            if (CharacterDetails.EarRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EarRight_UpDown;
                    BoneUpDown3.ValueChanged += EarRight_UpDown;
                }
            }
            if (CharacterDetails.ForearmLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ForearmLeft_UpDown;
                    BoneUpDown3.ValueChanged += ForearmLeft_UpDown;
                }
            }
            if (CharacterDetails.ForearmRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ForearmRight_UpDown;
                    BoneUpDown3.ValueChanged += ForearmRight_UpDown;
                }
            }
            if (CharacterDetails.ShoulderLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ShoulderLeft_UpDown;
                    BoneUpDown3.ValueChanged += ShoulderLeft_UpDown;
                }
            }
            if (CharacterDetails.ShoulderRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ShoulderRight_UpDown;
                    BoneUpDown3.ValueChanged += ShoulderRight_UpDown;
                }
            }
            if (CharacterDetails.HairB_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HairB_UpDown;
                    BoneUpDown3.ValueChanged += HairB_UpDown;
                }
            }
            if (CharacterDetails.HandLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HandLeft_UpDown;
                    BoneUpDown3.ValueChanged += HandLeft_UpDown;
                }
            }
            if (CharacterDetails.HandRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HandRight_UpDown;
                    BoneUpDown3.ValueChanged += HandRight_UpDown;
                }
            }
            if (CharacterDetails.ShieldLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ShieldLeft_UpDown;
                    BoneUpDown3.ValueChanged += ShieldLeft_UpDown;
                }
            }
            if (CharacterDetails.ShieldRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ShieldRight_UpDown;
                    BoneUpDown3.ValueChanged += ShieldRight_UpDown;
                }
            }
            if (CharacterDetails.EarringALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EarringALeft_UpDown;
                    BoneUpDown3.ValueChanged += EarringALeft_UpDown;
                }
            }
            if (CharacterDetails.EarringARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EarringARight_UpDown;
                    BoneUpDown3.ValueChanged += EarringARight_UpDown;
                }
            }
            if (CharacterDetails.ElbowLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ElbowLeft_UpDown;
                    BoneUpDown3.ValueChanged += ElbowLeft_UpDown;
                }
            }
            if (CharacterDetails.ElbowRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ElbowRight_UpDown;
                    BoneUpDown3.ValueChanged += ElbowRight_UpDown;
                }
            }
            if (CharacterDetails.CouterLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= CouterLeft_UpDown;
                    BoneUpDown3.ValueChanged += CouterLeft_UpDown;
                }
            }
            if (CharacterDetails.CouterRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= CouterRight_UpDown;
                    BoneUpDown3.ValueChanged += CouterRight_UpDown;
                }
            }
            if (CharacterDetails.WristLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= WristLeft_UpDown;
                    BoneUpDown3.ValueChanged += WristLeft_UpDown;
                }
            }
            if (CharacterDetails.WristRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= WristRight_UpDown;
                    BoneUpDown3.ValueChanged += WristRight_UpDown;
                }
            }
            if (CharacterDetails.IndexALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= IndexALeft_UpDown;
                    BoneUpDown3.ValueChanged += IndexALeft_UpDown;
                }
            }
            if (CharacterDetails.IndexARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= IndexARight_UpDown;
                    BoneUpDown3.ValueChanged += IndexARight_UpDown;
                }
            }
            if (CharacterDetails.PinkyALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= PinkyALeft_UpDown;
                    BoneUpDown3.ValueChanged += PinkyALeft_UpDown;
                }
            }
            if (CharacterDetails.PinkyARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= PinkyARight_UpDown;
                    BoneUpDown3.ValueChanged += PinkyARight_UpDown;
                }
            }
            if (CharacterDetails.RingALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= RingALeft_UpDown;
                    BoneUpDown3.ValueChanged += RingALeft_UpDown;
                }
            }
            if (CharacterDetails.RingARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= RingARight_UpDown;
                    BoneUpDown3.ValueChanged += RingARight_UpDown;
                }
            }
            if (CharacterDetails.MiddleALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= MiddleALeft_UpDown;
                    BoneUpDown3.ValueChanged += MiddleALeft_UpDown;
                }
            }
            if (CharacterDetails.MiddleARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= MiddleARight_UpDown;
                    BoneUpDown3.ValueChanged += MiddleARight_UpDown;
                }
            }
            if (CharacterDetails.ThumbALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ThumbALeft_UpDown;
                    BoneUpDown3.ValueChanged += ThumbALeft_UpDown;
                }
            }
            if (CharacterDetails.ThumbARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ThumbARight_UpDown;
                    BoneUpDown3.ValueChanged += ThumbARight_UpDown;
                }
            }
            if (CharacterDetails.WeaponLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= WeaponLeft_UpDown;
                    BoneUpDown3.ValueChanged += WeaponLeft_UpDown;
                }
            }
            if (CharacterDetails.WeaponRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= WeaponRight_UpDown;
                    BoneUpDown3.ValueChanged += WeaponRight_UpDown;
                }
            }
            if (CharacterDetails.EarringBLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EarringBLeft_UpDown;
                    BoneUpDown3.ValueChanged += EarringBLeft_UpDown;
                }
            }
            if (CharacterDetails.EarringBRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EarringBRight_UpDown;
                    BoneUpDown3.ValueChanged += EarringBRight_UpDown;
                }
            }
            if (CharacterDetails.IndexBLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= IndexBLeft_UpDown;
                    BoneUpDown3.ValueChanged += IndexBLeft_UpDown;
                }
            }
            if (CharacterDetails.IndexBRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= IndexBRight_UpDown;
                    BoneUpDown3.ValueChanged += IndexBRight_UpDown;
                }
            }
            if (CharacterDetails.PinkyBLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= PinkyBLeft_UpDown;
                    BoneUpDown3.ValueChanged += PinkyBLeft_UpDown;
                }
            }
            if (CharacterDetails.PinkyBRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= PinkyBRight_UpDown;
                    BoneUpDown3.ValueChanged += PinkyBRight_UpDown;
                }
            }
            if (CharacterDetails.RingBLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= RingBLeft_UpDown;
                    BoneUpDown3.ValueChanged += RingBLeft_UpDown;
                }
            }
            if (CharacterDetails.RingBRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= RingBRight_UpDown;
                    BoneUpDown3.ValueChanged += RingBRight_UpDown;
                }
            }
            if (CharacterDetails.MiddleBLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= MiddleBLeft_UpDown;
                    BoneUpDown3.ValueChanged += MiddleBLeft_UpDown;
                }
            }
            if (CharacterDetails.MiddleBRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= MiddleBRight_UpDown;
                    BoneUpDown3.ValueChanged += MiddleBRight_UpDown;
                }
            }
            if (CharacterDetails.ThumbBLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ThumbBLeft_UpDown;
                    BoneUpDown3.ValueChanged += ThumbBLeft_UpDown;
                }
            }
            if (CharacterDetails.ThumbBRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ThumbBRight_UpDown;
                    BoneUpDown3.ValueChanged += ThumbBRight_UpDown;
                }
            }
            if (CharacterDetails.TailA_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= TailA_UpDown;
                    BoneUpDown3.ValueChanged += TailA_UpDown;
                }
            }
            if (CharacterDetails.TailB_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= TailB_UpDown;
                    BoneUpDown3.ValueChanged += TailB_UpDown;
                }
            }
            if (CharacterDetails.TailC_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= TailC_UpDown;
                    BoneUpDown3.ValueChanged += TailC_UpDown;
                }
            }
            if (CharacterDetails.TailD_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= TailD_UpDown;
                    BoneUpDown3.ValueChanged += TailD_UpDown;
                }
            }
            if (CharacterDetails.TailE_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= TailE_UpDown;
                    BoneUpDown3.ValueChanged += TailE_UpDown;
                }
            }
            if (CharacterDetails.RootHead_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= RootHead_UpDown;
                    BoneUpDown3.ValueChanged += RootHead_UpDown;
                }
            }
            if (CharacterDetails.Jaw_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= Jaw_UpDown;
                    BoneUpDown3.ValueChanged += Jaw_UpDown;
                }
            }
            if (CharacterDetails.EyelidLowerLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EyelidLowerLeft_UpDown;
                    BoneUpDown3.ValueChanged += EyelidLowerLeft_UpDown;
                }
            }
            if (CharacterDetails.EyelidLowerRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EyelidLowerRight_UpDown;
                    BoneUpDown3.ValueChanged += EyelidLowerRight_UpDown;
                }
            }
            if (CharacterDetails.EyeLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EyeLeft_UpDown;
                    BoneUpDown3.ValueChanged += EyeLeft_UpDown;
                }
            }
            if (CharacterDetails.EyeRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EyeRight_UpDown;
                    BoneUpDown3.ValueChanged += EyeRight_UpDown;
                }
            }
            if (CharacterDetails.Nose_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= Nose_UpDown;
                    BoneUpDown3.ValueChanged += Nose_UpDown;
                }
            }
            if (CharacterDetails.CheekLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= CheekLeft_UpDown;
                    BoneUpDown3.ValueChanged += CheekLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothWhiskersLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothWhiskersLeft_UpDown;
                    BoneUpDown3.ValueChanged += HrothWhiskersLeft_UpDown;
                }
            }
            if (CharacterDetails.CheekRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= CheekRight_UpDown;
                    BoneUpDown3.ValueChanged += CheekRight_UpDown;
                }
            }
            if (CharacterDetails.HrothWhiskersRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothWhiskersRight_UpDown;
                    BoneUpDown3.ValueChanged += HrothWhiskersRight_UpDown;
                }
            }
            if (CharacterDetails.LipsLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= LipsLeft_UpDown;
                    BoneUpDown3.ValueChanged += LipsLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothEyebrowLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothEyebrowLeft_UpDown;
                    BoneUpDown3.ValueChanged += HrothEyebrowLeft_UpDown;
                }
            }
            if (CharacterDetails.LipsRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= LipsRight_UpDown;
                    BoneUpDown3.ValueChanged += LipsRight_UpDown;
                }
            }
            if (CharacterDetails.HrothEyebrowRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothEyebrowRight_UpDown;
                    BoneUpDown3.ValueChanged += HrothEyebrowRight_UpDown;
                }
            }
            if (CharacterDetails.EyebrowLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EyebrowLeft_UpDown;
                    BoneUpDown3.ValueChanged += EyebrowLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothBridge_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothBridge_UpDown;
                    BoneUpDown3.ValueChanged += HrothBridge_UpDown;
                }
            }
            if (CharacterDetails.EyebrowRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EyebrowRight_UpDown;
                    BoneUpDown3.ValueChanged += EyebrowRight_UpDown;
                }
            }
            if (CharacterDetails.HrothBrowLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothBrowLeft_UpDown;
                    BoneUpDown3.ValueChanged += HrothBrowLeft_UpDown;
                }
            }
            if (CharacterDetails.Bridge_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= Bridge_UpDown;
                    BoneUpDown3.ValueChanged += Bridge_UpDown;
                }
            }
            if (CharacterDetails.HrothBrowRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothBrowRight_UpDown;
                    BoneUpDown3.ValueChanged += HrothBrowRight_UpDown;
                }
            }
            if (CharacterDetails.BrowLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= BrowLeft_UpDown;
                    BoneUpDown3.ValueChanged += BrowLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothJawUpper_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothJawUpper_UpDown;
                    BoneUpDown3.ValueChanged += HrothJawUpper_UpDown;
                }
            }
            if (CharacterDetails.BrowRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= BrowRight_UpDown;
                    BoneUpDown3.ValueChanged += BrowRight_UpDown;
                }
            }
            if (CharacterDetails.HrothLipUpper_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothLipUpper_UpDown;
                    BoneUpDown3.ValueChanged += HrothLipUpper_UpDown;
                }
            }
            if (CharacterDetails.LipUpperA_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= LipUpperA_UpDown;
                    BoneUpDown3.ValueChanged += LipUpperA_UpDown;
                }
            }
            if (CharacterDetails.HrothEyelidUpperLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothEyelidUpperLeft_UpDown;
                    BoneUpDown3.ValueChanged += HrothEyelidUpperLeft_UpDown;
                }
            }
            if (CharacterDetails.EyelidUpperLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EyelidUpperLeft_UpDown;
                    BoneUpDown3.ValueChanged += EyelidUpperLeft_UpDown;
                }
            }
            if (CharacterDetails.HrothEyelidUpperRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothEyelidUpperRight_UpDown;
                    BoneUpDown3.ValueChanged += HrothEyelidUpperRight_UpDown;
                }
            }
            if (CharacterDetails.EyelidUpperRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= EyelidUpperRight_UpDown;
                    BoneUpDown3.ValueChanged += EyelidUpperRight_UpDown;
                }
            }
            if (CharacterDetails.HrothLipsLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothLipsLeft_UpDown;
                    BoneUpDown3.ValueChanged += HrothLipsLeft_UpDown;
                }
            }
            if (CharacterDetails.LipLowerA_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= LipLowerA_UpDown;
                    BoneUpDown3.ValueChanged += LipLowerA_UpDown;
                }
            }
            if (CharacterDetails.HrothLipsRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothLipsRight_UpDown;
                    BoneUpDown3.ValueChanged += HrothLipsRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01ALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar01ALeft_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar01ALeft_UpDown;
                }
            }
            if (CharacterDetails.LipUpperB_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= LipUpperB_UpDown;
                    BoneUpDown3.ValueChanged += LipUpperB_UpDown;
                }
            }
            if (CharacterDetails.HrothLipUpperLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothLipUpperLeft_UpDown;
                    BoneUpDown3.ValueChanged += HrothLipUpperLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01ARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar01ARight_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar01ARight_UpDown;
                }
            }
            if (CharacterDetails.LipLowerB_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= LipLowerB_UpDown;
                    BoneUpDown3.ValueChanged += LipLowerB_UpDown;
                }
            }
            if (CharacterDetails.HrothLipUpperRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothLipUpperRight_UpDown;
                    BoneUpDown3.ValueChanged += HrothLipUpperRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02ALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar02ALeft_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar02ALeft_UpDown;
                }
            }
            if (CharacterDetails.HrothLipLower_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= HrothLipLower_UpDown;
                    BoneUpDown3.ValueChanged += HrothLipLower_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02ARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar02ARight_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar02ARight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03ALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar03ALeft_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar03ALeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03ARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar03ARight_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar03ARight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04ALeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar04ALeft_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar04ALeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04ARight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar04ARight_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar04ARight_UpDown;
                }
            }
            if (CharacterDetails.VieraLipLowerA_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraLipLowerA_UpDown;
                    BoneUpDown3.ValueChanged += VieraLipLowerA_UpDown;
                }
            }
            if (CharacterDetails.VieraLipUpperB_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraLipUpperB_UpDown;
                    BoneUpDown3.ValueChanged += VieraLipUpperB_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01BLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar01BLeft_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar01BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar01BRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar01BRight_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar01BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02BLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar02BLeft_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar02BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar02BRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar02BRight_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar02BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03BLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar03BLeft_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar03BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar03BRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar03BRight_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar03BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04BLeft_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar04BLeft_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar04BLeft_UpDown;
                }
            }
            if (CharacterDetails.VieraEar04BRight_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraEar04BRight_UpDown;
                    BoneUpDown3.ValueChanged += VieraEar04BRight_UpDown;
                }
            }
            if (CharacterDetails.VieraLipLowerB_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= VieraLipLowerB_UpDown;
                    BoneUpDown3.ValueChanged += VieraLipLowerB_UpDown;
                }
            }
            if (CharacterDetails.ExHairA_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairA_UpDown;
                    BoneUpDown3.ValueChanged += ExHairA_UpDown;
                }
            }
            if (CharacterDetails.ExHairB_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairB_UpDown;
                    BoneUpDown3.ValueChanged += ExHairB_UpDown;
                }
            }
            if (CharacterDetails.ExHairC_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairC_UpDown;
                    BoneUpDown3.ValueChanged += ExHairC_UpDown;
                }
            }
            if (CharacterDetails.ExHairD_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairD_UpDown;
                    BoneUpDown3.ValueChanged += ExHairD_UpDown;
                }
            }
            if (CharacterDetails.ExHairE_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairE_UpDown;
                    BoneUpDown3.ValueChanged += ExHairE_UpDown;
                }
            }
            if (CharacterDetails.ExHairF_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairF_UpDown;
                    BoneUpDown3.ValueChanged += ExHairF_UpDown;
                }
            }
            if (CharacterDetails.ExHairG_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairG_UpDown;
                    BoneUpDown3.ValueChanged += ExHairG_UpDown;
                }
            }
            if (CharacterDetails.ExHairH_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairH_UpDown;
                    BoneUpDown3.ValueChanged += ExHairH_UpDown;
                }
            }
            if (CharacterDetails.ExHairI_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairI_UpDown;
                    BoneUpDown3.ValueChanged += ExHairI_UpDown;
                }
            }
            if (CharacterDetails.ExHairJ_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairJ_UpDown;
                    BoneUpDown3.ValueChanged += ExHairJ_UpDown;
                }
            }
            if (CharacterDetails.ExHairK_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairK_UpDown;
                    BoneUpDown3.ValueChanged += ExHairK_UpDown;
                }
            }
            if (CharacterDetails.ExHairL_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExHairL_UpDown;
                    BoneUpDown3.ValueChanged += ExHairL_UpDown;
                }
            }
            if (CharacterDetails.ExMetA_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetA_UpDown;
                    BoneUpDown3.ValueChanged += ExMetA_UpDown;
                }
            }
            if (CharacterDetails.ExMetB_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetB_UpDown;
                    BoneUpDown3.ValueChanged += ExMetB_UpDown;
                }
            }
            if (CharacterDetails.ExMetC_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetC_UpDown;
                    BoneUpDown3.ValueChanged += ExMetC_UpDown;
                }
            }
            if (CharacterDetails.ExMetD_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetD_UpDown;
                    BoneUpDown3.ValueChanged += ExMetD_UpDown;
                }
            }
            if (CharacterDetails.ExMetE_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetE_UpDown;
                    BoneUpDown3.ValueChanged += ExMetE_UpDown;
                }
            }
            if (CharacterDetails.ExMetF_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetF_UpDown;
                    BoneUpDown3.ValueChanged += ExMetF_UpDown;
                }
            }
            if (CharacterDetails.ExMetG_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetG_UpDown;
                    BoneUpDown3.ValueChanged += ExMetG_UpDown;
                }
            }
            if (CharacterDetails.ExMetH_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetH_UpDown;
                    BoneUpDown3.ValueChanged += ExMetH_UpDown;
                }
            }
            if (CharacterDetails.ExMetI_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetI_UpDown;
                    BoneUpDown3.ValueChanged += ExMetI_UpDown;
                }
            }
            if (CharacterDetails.ExMetJ_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetJ_UpDown;
                    BoneUpDown3.ValueChanged += ExMetJ_UpDown;
                }
            }
            if (CharacterDetails.ExMetK_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetK_UpDown;
                    BoneUpDown3.ValueChanged += ExMetK_UpDown;
                }
            }
            if (CharacterDetails.ExMetL_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetL_UpDown;
                    BoneUpDown3.ValueChanged += ExMetL_UpDown;
                }
            }
            if (CharacterDetails.ExMetM_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetM_UpDown;
                    BoneUpDown3.ValueChanged += ExMetM_UpDown;
                }
            }
            if (CharacterDetails.ExMetN_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetN_UpDown;
                    BoneUpDown3.ValueChanged += ExMetN_UpDown;
                }
            }
            if (CharacterDetails.ExMetO_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetO_UpDown;
                    BoneUpDown3.ValueChanged += ExMetO_UpDown;
                }
            }
            if (CharacterDetails.ExMetP_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetP_UpDown;
                    BoneUpDown3.ValueChanged += ExMetP_UpDown;
                }
            }
            if (CharacterDetails.ExMetQ_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetQ_UpDown;
                    BoneUpDown3.ValueChanged += ExMetQ_UpDown;
                }
            }
            if (CharacterDetails.ExMetR_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExMetR_UpDown;
                    BoneUpDown3.ValueChanged += ExMetR_UpDown;
                }
            }
            if (CharacterDetails.ExTopA_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExTopA_UpDown;
                    BoneUpDown3.ValueChanged += ExTopA_UpDown;
                }
            }
            if (CharacterDetails.ExTopB_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExTopB_UpDown;
                    BoneUpDown3.ValueChanged += ExTopB_UpDown;
                }
            }
            if (CharacterDetails.ExTopC_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExTopC_UpDown;
                    BoneUpDown3.ValueChanged += ExTopC_UpDown;
                }
            }
            if (CharacterDetails.ExTopD_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExTopD_UpDown;
                    BoneUpDown3.ValueChanged += ExTopD_UpDown;
                }
            }
            if (CharacterDetails.ExTopE_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExTopE_UpDown;
                    BoneUpDown3.ValueChanged += ExTopE_UpDown;
                }
            }
            if (CharacterDetails.ExTopF_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExTopF_UpDown;
                    BoneUpDown3.ValueChanged += ExTopF_UpDown;
                }
            }
            if (CharacterDetails.ExTopG_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExTopG_UpDown;
                    BoneUpDown3.ValueChanged += ExTopG_UpDown;
                }
            }
            if (CharacterDetails.ExTopH_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExTopH_UpDown;
                    BoneUpDown3.ValueChanged += ExTopH_UpDown;
                }
            }
            if (CharacterDetails.ExTopI_Rotate)
            {
                if (BoneUpDown3.IsKeyboardFocusWithin || BoneUpDown3.IsMouseOver)
                {
                    BoneUpDown3.ValueChanged -= ExTopI_UpDown;
                    BoneUpDown3.ValueChanged += ExTopI_UpDown;
                }
            }
        }
        #endregion

        private void BoneSliderButton_Checked(object sender, RoutedEventArgs e)
        {
            BoneUpDown.Visibility = Visibility.Hidden;
            BoneUpDown.IsEnabled = false;
            BoneUpDown2.Visibility = Visibility.Hidden;
            BoneUpDown2.IsEnabled = false;
            BoneUpDown3.Visibility = Visibility.Hidden;
            BoneUpDown3.IsEnabled = false;

            BoneSlider.Visibility = Visibility.Visible;
            BoneSlider.IsEnabled = true;
            BoneSlider2.Visibility = Visibility.Visible;
            BoneSlider2.IsEnabled = true;
            BoneSlider3.Visibility = Visibility.Visible;
            BoneSlider3.IsEnabled = true;
            SaveSettings.Default.AltPoseRotate = true;
        }
        private void BoneSliderButton_Unchecked(object sender, RoutedEventArgs e)
        {
            BoneUpDown.Visibility = Visibility.Visible;
            BoneUpDown.IsEnabled = true;
            BoneUpDown2.Visibility = Visibility.Visible;
            BoneUpDown2.IsEnabled = true;
            BoneUpDown3.Visibility = Visibility.Visible;
            BoneUpDown3.IsEnabled = true;

            BoneSlider.Visibility = Visibility.Hidden;
            BoneSlider.IsEnabled = false;
            BoneSlider2.Visibility = Visibility.Hidden;
            BoneSlider2.IsEnabled = false;
            BoneSlider3.Visibility = Visibility.Hidden;
            BoneSlider3.IsEnabled = false;

            SaveSettings.Default.AltPoseRotate = false;
        }
        public void Rotate_ChildBone (BoneNode boneParent, Quaternion q1_inv, Quaternion q1_new)
        {
            foreach (BoneNode boneNode in boneParent)
            {
                ChildBone_Propagator(boneNode, q1_inv, q1_new);
            }
        }
        private void QuatCheck(Quaternion q, string name)
        {
            if (q.X == 0 && q.Y == 0 && q.Z == 0 && q.W == 0)
            {
                Console.WriteLine(name);
                Console.WriteLine("{0:F}, {1:F}, {2:F}, {3:F}", q.X, q.Y, q.Z, q.W);
            }
        }
        private void Rotate_UnitBone(string boneOffset, Quaternion q1_inv, Quaternion q1_new)
        {
            byte[] bytearray = m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, boneOffset), 16);
            if (bytearray == null) return;
            int ctr = 0;
            while (bytearray.All(singleByte => singleByte == 0) && ctr < 100)
            {
                bytearray = m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, boneOffset), 16);
                ctr++;
            }
            Quaternion q2 = new Quaternion(BitConverter.ToSingle(bytearray, 0), BitConverter.ToSingle(bytearray, 4), BitConverter.ToSingle(bytearray, 8), BitConverter.ToSingle(bytearray, 12));
            Quaternion q2_new = QuatMult(QuatMult(q2, q1_inv), q1_new);
            QuatCheck(q2, "q2");
            QuatCheck(q1_inv, "q1_inv");
            QuatCheck(q1_new, "q1_new");
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, boneOffset), GetBytes(q2_new));

        }
        private void ChildBone_Propagator(BoneNode boneParent, Quaternion q1_inv, Quaternion q1_new)
        {
            Rotate_UnitBone(boneParent.Get(), q1_inv, q1_new);
            Rotate_ChildBone(boneParent, q1_inv, q1_new);
        }

        public void EnableTertiaryFlags()
        {
            if (!ReadTetriaryFromRunTime)
            {
                ReadTetriaryFromRunTime = true;
                if (CharacterDetails.Race.value == 4 || CharacterDetails.Race.value == 6 || CharacterDetails.Race.value == 7)
                {
                    TailA.IsEnabled = true;
                    TailB.IsEnabled = true;
                    TailC.IsEnabled = true;
                    TailD.IsEnabled = true;
                    TailE.IsEnabled = true;
                    bone_waist.Add(bone_tail_a);
                }
                if (CharacterDetails.Race.value == 7)
                {
                    HrothWhiskersLeft.IsEnabled = true;
                    HrothWhiskersRight.IsEnabled = true;
                }
                if (CharacterDetails.Race.value == 8)
                {
                    VieraEarALeft.IsEnabled = true;
                    VieraEarARight.IsEnabled = true;
                    VieraEarBLeft.IsEnabled = true;
                    VieraEarBRight.IsEnabled = true;
                    for (int i = 0; i < bone_viera_ear_l.Length; i++)
                    {
                        bone_face_viera.Remove(bone_viera_ear_l[i]);
                        bone_face_viera.Remove(bone_viera_ear_r[i]);
                    }
                    bone_face_viera.Add(bone_viera_ear_l[CharacterDetails.TailType.value]);
                    bone_face_viera.Add(bone_viera_ear_r[CharacterDetails.TailType.value]);
                }
                #region Exhair
                int exhair_value = m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value));
                for (int i = 0; i < exhair_value - 1; i++)
                {
                    bone_face.Add(bone_exhair[i]);
                    exhair_buttons[i].IsEnabled = true;
                }
                #endregion
                #region ExMet
                int exmet_value = m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value));
                for (int i = 0; i < exmet_value - 1; i++)
                {
                    if (toggle_helm_parenting) bone_face.Add(bone_exmet[i]);
                    exmet_buttons[i].IsEnabled = true;
                }
                #endregion
                #region ExTop
                int extop_value = m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value));
                for (int i = 0; i < extop_value - 1; i++)
                {
                    extop_buttons[i].IsEnabled = true;
                }
                #endregion
            }
        }

        public void Bone_Flag_Manager()
        {
            if (face_check != FaceRace.Middy && CharacterDetails.Race.value < 7)
            {
                face_check = FaceRace.Middy;
                bone_face = bone_face_middy;
                bone_neck.Remove(bone_face_hroth);
                bone_neck.Remove(bone_face_viera);
                bone_neck.Add(bone_face_middy);
            }
            else if (face_check != FaceRace.Hroth && CharacterDetails.Race.value == 7)
            {
                face_check = FaceRace.Hroth;
                bone_face = bone_face_hroth;
                bone_neck.Remove(bone_face_middy);
                bone_neck.Remove(bone_face_viera);
                bone_neck.Add(bone_face_hroth);
            }
            else if (face_check != FaceRace.Viera && CharacterDetails.Race.value == 8)
            {
                face_check = FaceRace.Viera;
                bone_face = bone_face_viera;
                bone_neck.Remove(bone_face_middy);
                bone_neck.Remove(bone_face_hroth);
                bone_neck.Add(bone_face_viera);
            }
            EnableTertiaryFlags();
        }

        private void RemoveRoutedEventListener(RoutedPropertyChangedEventHandler<double> reh)
        {
            BoneSlider.ValueChanged -= reh;
            BoneSlider2.ValueChanged -= reh;
            BoneSlider3.ValueChanged -= reh;

        }
        private void RemoveRoutedEventListener(RoutedPropertyChangedEventHandler<double?> reh)
        {
            BoneUpDown.ValueChanged -= reh;
            BoneUpDown2.ValueChanged -= reh;
            BoneUpDown3.ValueChanged -= reh;

        }
        public void RotateHelper(Address<float> x, Address<float> y, Address<float> z, Address<float> w, BoneNode bnode = null)
        {
            Quaternion quat = GetEulerAngles().ToQuaternion();
            x.value = (float)quat.X;
            y.value = (float)quat.Y;
            z.value = (float)quat.Z;
            w.value = (float)quat.W;
            oldrot = newrot;
            newrot = new Vector3D(CharacterDetails.BoneX, CharacterDetails.BoneY, CharacterDetails.BoneZ);
            #region Child Bones
            if (ParentingToggle.IsChecked == true && bnode != null)
            {
                Bone_Flag_Manager();
                Quaternion q1_inv = QInv(oldrot.ToQuaternion());
                Quaternion q1_new = newrot.ToQuaternion();
                Rotate_ChildBone(bnode, q1_inv, q1_new);
            }
#endregion
        }
#region Root
        private void Root_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            RotateHelper(CharacterDetails.Root_X, CharacterDetails.Root_Y, CharacterDetails.Root_Z, CharacterDetails.Root_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(Root_Slider);
        }

        private void Root_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            RotateHelper(CharacterDetails.Root_X, CharacterDetails.Root_Y, CharacterDetails.Root_Z, CharacterDetails.Root_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(Root_UpDown);
        }

        public void Root_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(Root);

            //Load Current Values for Slider
            CharacterDetails.Root_Toggle = true;
        }
        private void Root_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(Root_Slider);
            RemoveRoutedEventListener(Root_UpDown);
            CharacterDetails.Root_Rotate = false;
        }
#endregion
#region Abdomen
        private void Abdomen_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            RotateHelper(CharacterDetails.Abdomen_X, CharacterDetails.Abdomen_Y, CharacterDetails.Abdomen_Z, CharacterDetails.Abdomen_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(Abdomen_Slider);
        }

        private void Abdomen_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            RotateHelper(CharacterDetails.Abdomen_X, CharacterDetails.Abdomen_Y, CharacterDetails.Abdomen_Z, CharacterDetails.Abdomen_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(Abdomen_UpDown);
        }

        public void Abdomen_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(Abdomen);

            //Load Current Values for Slider
            CharacterDetails.Abdomen_Toggle = true;
        }
        private void Abdomen_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(Abdomen_Slider);
            RemoveRoutedEventListener(Abdomen_UpDown);
            CharacterDetails.Abdomen_Rotate = false;
        }
#endregion
#region Throw
        private void Throw_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            RotateHelper(CharacterDetails.Throw_X, CharacterDetails.Throw_Y, CharacterDetails.Throw_Z, CharacterDetails.Throw_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(Throw_Slider);
        }

        private void Throw_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            RotateHelper(CharacterDetails.Throw_X, CharacterDetails.Throw_Y, CharacterDetails.Throw_Z, CharacterDetails.Throw_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(Throw_UpDown);
        }

        public void Throw_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(Throw);

            //Load Current Values for Slider
            CharacterDetails.Throw_Toggle = true;
        }
        private void Throw_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(Throw_Slider);
            RemoveRoutedEventListener(Throw_UpDown);
            CharacterDetails.Throw_Rotate = false;
        }
#endregion
#region Waist
        private void Waist_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            RotateHelper(CharacterDetails.Waist_X, CharacterDetails.Waist_Y, CharacterDetails.Waist_Z, CharacterDetails.Waist_W, bone_waist);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(Waist_Slider);
        }

        private void Waist_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            RotateHelper(CharacterDetails.Waist_X, CharacterDetails.Waist_Y, CharacterDetails.Waist_Z, CharacterDetails.Waist_W, bone_waist);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(Waist_UpDown);
        }

        public void Waist_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(Waist);

            //Load Current Values for Slider
            CharacterDetails.Waist_Toggle = true;
        }
        private void Waist_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(Waist_Slider);
            RemoveRoutedEventListener(Waist_UpDown);
            CharacterDetails.Waist_Rotate = false;
        }
#endregion
#region SpineA
        private void SpineA_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            RotateHelper(CharacterDetails.SpineA_X, CharacterDetails.SpineA_Y, CharacterDetails.SpineA_Z, CharacterDetails.SpineA_W, bone_lumbar);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(SpineA_Slider);
        }

        private void SpineA_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            RotateHelper(CharacterDetails.SpineA_X, CharacterDetails.SpineA_Y, CharacterDetails.SpineA_Z, CharacterDetails.SpineA_W, bone_lumbar);
            RemoveRoutedEventListener(SpineA_UpDown);
        }

        public void SpineA_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(SpineA);

            //Load Current Values for Slider
            CharacterDetails.SpineA_Toggle = true;
        }
        private void SpineA_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(SpineA_Slider);
            RemoveRoutedEventListener(SpineA_UpDown);
            CharacterDetails.SpineA_Rotate = false;
        }
#endregion
#region LegLeft
        private void LegLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            RotateHelper(CharacterDetails.LegLeft_X, CharacterDetails.LegLeft_Y, CharacterDetails.LegLeft_Z, CharacterDetails.LegLeft_W, bone_leg_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(LegLeft_Slider);
        }

        private void LegLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            RotateHelper(CharacterDetails.LegLeft_X, CharacterDetails.LegLeft_Y, CharacterDetails.LegLeft_Z, CharacterDetails.LegLeft_W, bone_leg_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(LegLeft_UpDown);
        }

        public void LegLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(LegLeft);

            //Load Current Values for Slider
            CharacterDetails.LegLeft_Toggle = true;
        }
        private void LegLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(LegLeft_Slider);
            RemoveRoutedEventListener(LegLeft_UpDown);
            CharacterDetails.LegLeft_Rotate = false;
        }
#endregion
#region LegRight
        private void LegRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            RotateHelper(CharacterDetails.LegRight_X, CharacterDetails.LegRight_Y, CharacterDetails.LegRight_Z, CharacterDetails.LegRight_W, bone_leg_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(LegRight_Slider);
        }

        private void LegRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            RotateHelper(CharacterDetails.LegRight_X, CharacterDetails.LegRight_Y, CharacterDetails.LegRight_Z, CharacterDetails.LegRight_W, bone_leg_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(LegRight_UpDown);
        }

        public void LegRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(LegRight);

            //Load Current Values for Slider
            CharacterDetails.LegRight_Toggle = true;
        }
        private void LegRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(LegRight_Slider);
            RemoveRoutedEventListener(LegRight_UpDown);
            CharacterDetails.LegRight_Rotate = false;
        }
#endregion
#region HolsterLeft
        private void HolsterLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            RotateHelper(CharacterDetails.HolsterLeft_X, CharacterDetails.HolsterLeft_Y, CharacterDetails.HolsterLeft_Z, CharacterDetails.HolsterLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HolsterLeft_Slider);
        }

        private void HolsterLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            RotateHelper(CharacterDetails.HolsterLeft_X, CharacterDetails.HolsterLeft_Y, CharacterDetails.HolsterLeft_Z, CharacterDetails.HolsterLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HolsterLeft_UpDown);
        }

        public void HolsterLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(HolsterLeft);

            //Load Current Values for Slider
            CharacterDetails.HolsterLeft_Toggle = true;
        }
        private void HolsterLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(HolsterLeft_Slider);
            RemoveRoutedEventListener(HolsterLeft_UpDown);
            CharacterDetails.HolsterLeft_Rotate = false;
        }
#endregion
#region HolsterRight
        private void HolsterRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            RotateHelper(CharacterDetails.HolsterRight_X, CharacterDetails.HolsterRight_Y, CharacterDetails.HolsterRight_Z, CharacterDetails.HolsterRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HolsterRight_Slider);
        }

        private void HolsterRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            RotateHelper(CharacterDetails.HolsterRight_X, CharacterDetails.HolsterRight_Y, CharacterDetails.HolsterRight_Z, CharacterDetails.HolsterRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HolsterRight_UpDown);
        }

        public void HolsterRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(HolsterRight);

            //Load Current Values for Slider
            CharacterDetails.HolsterRight_Toggle = true;
        }
        private void HolsterRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(HolsterRight_Slider);
            RemoveRoutedEventListener(HolsterRight_UpDown);
            CharacterDetails.HolsterRight_Rotate = false;
        }
#endregion
#region SheatheLeft
        private void SheatheLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            RotateHelper(CharacterDetails.SheatheLeft_X, CharacterDetails.SheatheLeft_Y, CharacterDetails.SheatheLeft_Z, CharacterDetails.SheatheLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(SheatheLeft_Slider);
        }

        private void SheatheLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            RotateHelper(CharacterDetails.SheatheLeft_X, CharacterDetails.SheatheLeft_Y, CharacterDetails.SheatheLeft_Z, CharacterDetails.SheatheLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(SheatheLeft_UpDown);
        }

        public void SheatheLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(SheatheLeft);

            //Load Current Values for Slider
            CharacterDetails.SheatheLeft_Toggle = true;
        }
        private void SheatheLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(SheatheLeft_Slider);
            RemoveRoutedEventListener(SheatheLeft_UpDown);
            CharacterDetails.SheatheLeft_Rotate = false;
        }
#endregion
#region SheatheRight
        private void SheatheRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            RotateHelper(CharacterDetails.SheatheRight_X, CharacterDetails.SheatheRight_Y, CharacterDetails.SheatheRight_Z, CharacterDetails.SheatheRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(SheatheRight_Slider);
        }

        private void SheatheRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            RotateHelper(CharacterDetails.SheatheRight_X, CharacterDetails.SheatheRight_Y, CharacterDetails.SheatheRight_Z, CharacterDetails.SheatheRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(SheatheRight_UpDown);
        }

        public void SheatheRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(SheatheRight);

            //Load Current Values for Slider
            CharacterDetails.SheatheRight_Toggle = true;
        }
        private void SheatheRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(SheatheRight_Slider);
            RemoveRoutedEventListener(SheatheRight_UpDown);
            CharacterDetails.SheatheRight_Rotate = false;
        }
#endregion
#region SpineB
        private void SpineB_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            RotateHelper(CharacterDetails.SpineB_X, CharacterDetails.SpineB_Y, CharacterDetails.SpineB_Z, CharacterDetails.SpineB_W, bone_thora);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(SpineB_Slider);
        }

        private void SpineB_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            RotateHelper(CharacterDetails.SpineB_X, CharacterDetails.SpineB_Y, CharacterDetails.SpineB_Z, CharacterDetails.SpineB_W, bone_thora);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(SpineB_UpDown);
        }

        public void SpineB_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(SpineB);

            //Load Current Values for Slider
            CharacterDetails.SpineB_Toggle = true;
        }
        private void SpineB_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(SpineB_Slider);
            RemoveRoutedEventListener(SpineB_UpDown);
            CharacterDetails.SpineB_Rotate = false;
        }
#endregion
#region ClothBackALeft
        private void ClothBackALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ClothBackALeft_X, CharacterDetails.ClothBackALeft_Y, CharacterDetails.ClothBackALeft_Z, CharacterDetails.ClothBackALeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothBackALeft_Slider);
        }

        private void ClothBackALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ClothBackALeft_X, CharacterDetails.ClothBackALeft_Y, CharacterDetails.ClothBackALeft_Z, CharacterDetails.ClothBackALeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothBackALeft_UpDown);
        }

        public void ClothBackALeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothBackALeft);

            //Load Current Values for Slider
            CharacterDetails.ClothBackALeft_Toggle = true;
        }
        private void ClothBackALeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ClothBackALeft_Slider);
            RemoveRoutedEventListener(ClothBackALeft_UpDown);
            CharacterDetails.ClothBackALeft_Rotate = false;
        }
#endregion
#region ClothBackARight
        private void ClothBackARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ClothBackARight_X, CharacterDetails.ClothBackARight_Y, CharacterDetails.ClothBackARight_Z, CharacterDetails.ClothBackARight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothBackARight_Slider);
        }

        private void ClothBackARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ClothBackARight_X, CharacterDetails.ClothBackARight_Y, CharacterDetails.ClothBackARight_Z, CharacterDetails.ClothBackARight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothBackARight_UpDown);
        }

        public void ClothBackARight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothBackARight);

            //Load Current Values for Slider
            CharacterDetails.ClothBackARight_Toggle = true;
        }
        private void ClothBackARight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ClothBackARight_Slider);
            RemoveRoutedEventListener(ClothBackARight_UpDown);
            CharacterDetails.ClothBackARight_Rotate = false;
        }
#endregion
#region ClothFrontALeft
        private void ClothFrontALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ClothFrontALeft_X, CharacterDetails.ClothFrontALeft_Y, CharacterDetails.ClothFrontALeft_Z, CharacterDetails.ClothFrontALeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothFrontALeft_Slider);
        }

        private void ClothFrontALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ClothFrontALeft_X, CharacterDetails.ClothFrontALeft_Y, CharacterDetails.ClothFrontALeft_Z, CharacterDetails.ClothFrontALeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothFrontALeft_UpDown);
        }

        public void ClothFrontALeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothFrontALeft);

            //Load Current Values for Slider
            CharacterDetails.ClothFrontALeft_Toggle = true;
        }
        private void ClothFrontALeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ClothFrontALeft_Slider);
            RemoveRoutedEventListener(ClothFrontALeft_UpDown);
            CharacterDetails.ClothFrontALeft_Rotate = false;
        }
#endregion
#region ClothFrontARight
        private void ClothFrontARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ClothFrontARight_X, CharacterDetails.ClothFrontARight_Y, CharacterDetails.ClothFrontARight_Z, CharacterDetails.ClothFrontARight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothFrontARight_Slider);
        }

        private void ClothFrontARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ClothFrontARight_X, CharacterDetails.ClothFrontARight_Y, CharacterDetails.ClothFrontARight_Z, CharacterDetails.ClothFrontARight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothFrontARight_UpDown);
        }

        public void ClothFrontARight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothFrontARight);

            //Load Current Values for Slider
            CharacterDetails.ClothFrontARight_Toggle = true;
        }
        private void ClothFrontARight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ClothFrontARight_Slider);
            RemoveRoutedEventListener(ClothFrontARight_UpDown);
            CharacterDetails.ClothFrontARight_Rotate = false;
        }
#endregion
#region ClothSideALeft
        private void ClothSideALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ClothSideALeft_X, CharacterDetails.ClothSideALeft_Y, CharacterDetails.ClothSideALeft_Z, CharacterDetails.ClothSideALeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothSideALeft_Slider);
        }

        private void ClothSideALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ClothSideALeft_X, CharacterDetails.ClothSideALeft_Y, CharacterDetails.ClothSideALeft_Z, CharacterDetails.ClothSideALeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothSideALeft_UpDown);
        }

        public void ClothSideALeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothSideALeft);

            //Load Current Values for Slider
            CharacterDetails.ClothSideALeft_Toggle = true;
        }
        private void ClothSideALeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ClothSideALeft_Slider);
            RemoveRoutedEventListener(ClothSideALeft_UpDown);
            CharacterDetails.ClothSideALeft_Rotate = false;
        }
#endregion
#region ClothSideARight
        private void ClothSideARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ClothSideARight_X, CharacterDetails.ClothSideARight_Y, CharacterDetails.ClothSideARight_Z, CharacterDetails.ClothSideARight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothSideARight_Slider);
        }

        private void ClothSideARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ClothSideARight_X, CharacterDetails.ClothSideARight_Y, CharacterDetails.ClothSideARight_Z, CharacterDetails.ClothSideARight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothSideARight_UpDown);
        }

        public void ClothSideARight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothSideARight);

            //Load Current Values for Slider
            CharacterDetails.ClothSideARight_Toggle = true;
        }
        private void ClothSideARight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ClothSideARight_Slider);
            RemoveRoutedEventListener(ClothSideARight_UpDown);
            CharacterDetails.ClothSideARight_Rotate = false;
        }
#endregion
#region KneeLeft
        private void KneeLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            RotateHelper(CharacterDetails.KneeLeft_X, CharacterDetails.KneeLeft_Y, CharacterDetails.KneeLeft_Z, CharacterDetails.KneeLeft_W, bone_knee_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(KneeLeft_Slider);
        }

        private void KneeLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            RotateHelper(CharacterDetails.KneeLeft_X, CharacterDetails.KneeLeft_Y, CharacterDetails.KneeLeft_Z, CharacterDetails.KneeLeft_W, bone_knee_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(KneeLeft_UpDown);
        }

        public void KneeLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(KneeLeft);

            //Load Current Values for Slider
            CharacterDetails.KneeLeft_Toggle = true;
        }
        private void KneeLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(KneeLeft_Slider);
            RemoveRoutedEventListener(KneeLeft_UpDown);
            CharacterDetails.KneeLeft_Rotate = false;
        }
#endregion
#region KneeRight
        private void KneeRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            RotateHelper(CharacterDetails.KneeRight_X, CharacterDetails.KneeRight_Y, CharacterDetails.KneeRight_Z, CharacterDetails.KneeRight_W, bone_knee_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(KneeRight_Slider);
        }

        private void KneeRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            RotateHelper(CharacterDetails.KneeRight_X, CharacterDetails.KneeRight_Y, CharacterDetails.KneeRight_Z, CharacterDetails.KneeRight_W, bone_knee_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(KneeRight_UpDown);
        }

        public void KneeRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(KneeRight);

            //Load Current Values for Slider
            CharacterDetails.KneeRight_Toggle = true;
        }
        private void KneeRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(KneeRight_Slider);
            RemoveRoutedEventListener(KneeRight_UpDown);
            CharacterDetails.KneeRight_Rotate = false;
        }
#endregion
#region BreastLeft
        private void BreastLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            RotateHelper(CharacterDetails.BreastLeft_X, CharacterDetails.BreastLeft_Y, CharacterDetails.BreastLeft_Z, CharacterDetails.BreastLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(BreastLeft_Slider);
            RemoveRoutedEventListener(BreastLeft_UpDown);
        }

        private void BreastLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            RotateHelper(CharacterDetails.BreastLeft_X, CharacterDetails.BreastLeft_Y, CharacterDetails.BreastLeft_Z, CharacterDetails.BreastLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(BreastLeft_UpDown);
        }

        public void BreastLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(BreastLeft);

            //Load Current Values for Slider
            CharacterDetails.BreastLeft_Toggle = true;
        }
        private void BreastLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(BreastLeft_Slider);
            RemoveRoutedEventListener(BreastLeft_UpDown);
            CharacterDetails.BreastLeft_Rotate = false;
        }
#endregion
#region BreastRight
        private void BreastRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            RotateHelper(CharacterDetails.BreastRight_X, CharacterDetails.BreastRight_Y, CharacterDetails.BreastRight_Z, CharacterDetails.BreastRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(BreastRight_Slider);
        }

        private void BreastRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {
            RotateHelper(CharacterDetails.BreastRight_X, CharacterDetails.BreastRight_Y, CharacterDetails.BreastRight_Z, CharacterDetails.BreastRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(BreastRight_UpDown);
        }

        public void BreastRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(BreastRight);

            //Load Current Values for Slider
            CharacterDetails.BreastRight_Toggle = true;
        }
        private void BreastRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(BreastRight_Slider);
            RemoveRoutedEventListener(BreastRight_UpDown);
            CharacterDetails.BreastRight_Rotate = false;
        }
#endregion
#region SpineC
        private void SpineC_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.SpineC_X, CharacterDetails.SpineC_Y, CharacterDetails.SpineC_Z, CharacterDetails.SpineC_W, bone_cerv);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(SpineC_Slider);
            RemoveRoutedEventListener(SpineC_UpDown);
        }

        private void SpineC_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.SpineC_X, CharacterDetails.SpineC_Y, CharacterDetails.SpineC_Z, CharacterDetails.SpineC_W, bone_cerv);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(SpineC_UpDown);
        }

        public void SpineC_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(SpineC);

            //Load Current Values for Slider
            CharacterDetails.SpineC_Toggle = true;
        }
        private void SpineC_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(SpineC_Slider);
            RemoveRoutedEventListener(SpineC_UpDown);
            CharacterDetails.SpineC_Rotate = false;
        }
#endregion
#region ClothBackBLeft
        private void ClothBackBLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ClothBackBLeft_X, CharacterDetails.ClothBackBLeft_Y, CharacterDetails.ClothBackBLeft_Z, CharacterDetails.ClothBackBLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothBackBLeft_Slider);
            RemoveRoutedEventListener(ClothBackBLeft_UpDown);
        }

        private void ClothBackBLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ClothBackBLeft_X, CharacterDetails.ClothBackBLeft_Y, CharacterDetails.ClothBackBLeft_Z, CharacterDetails.ClothBackBLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothBackBLeft_UpDown);
        }

        public void ClothBackBLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothBackBLeft);

            //Load Current Values for Slider
            CharacterDetails.ClothBackBLeft_Toggle = true;
        }
        private void ClothBackBLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ClothBackBLeft_Slider);
            RemoveRoutedEventListener(ClothBackBLeft_UpDown);
            CharacterDetails.ClothBackBLeft_Rotate = false;
        }
#endregion
#region ClothBackBRight
        private void ClothBackBRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ClothBackBRight_X, CharacterDetails.ClothBackBRight_Y, CharacterDetails.ClothBackBRight_Z, CharacterDetails.ClothBackBRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothBackBRight_Slider);
        }

        private void ClothBackBRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ClothBackBRight_X, CharacterDetails.ClothBackBRight_Y, CharacterDetails.ClothBackBRight_Z, CharacterDetails.ClothBackBRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothBackBRight_UpDown);
        }

        public void ClothBackBRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothBackBRight);

            //Load Current Values for Slider
            CharacterDetails.ClothBackBRight_Toggle = true;
        }
        private void ClothBackBRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ClothBackBRight_Slider);
            RemoveRoutedEventListener(ClothBackBRight_UpDown);
            CharacterDetails.ClothBackBRight_Rotate = false;
        }
#endregion
#region ClothFrontBLeft
        private void ClothFrontBLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ClothFrontBLeft_X, CharacterDetails.ClothFrontBLeft_Y, CharacterDetails.ClothFrontBLeft_Z, CharacterDetails.ClothFrontBLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothFrontBLeft_Slider);
        }

        private void ClothFrontBLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ClothFrontBLeft_X, CharacterDetails.ClothFrontBLeft_Y, CharacterDetails.ClothFrontBLeft_Z, CharacterDetails.ClothFrontBLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothFrontBLeft_UpDown);
        }

        public void ClothFrontBLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothFrontBLeft);

            //Load Current Values for Slider
            CharacterDetails.ClothFrontBLeft_Toggle = true;
        }
        private void ClothFrontBLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ClothFrontBLeft_Slider);
            RemoveRoutedEventListener(ClothFrontBLeft_UpDown);
            CharacterDetails.ClothFrontBLeft_Rotate = false;
        }
#endregion
#region ClothFrontBRight
        private void ClothFrontBRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ClothFrontBRight_X, CharacterDetails.ClothFrontBRight_Y, CharacterDetails.ClothFrontBRight_Z, CharacterDetails.ClothFrontBRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothFrontBRight_Slider);
        }

        private void ClothFrontBRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ClothFrontBRight_X, CharacterDetails.ClothFrontBRight_Y, CharacterDetails.ClothFrontBRight_Z, CharacterDetails.ClothFrontBRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothFrontBRight_UpDown);
        }

        public void ClothFrontBRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothFrontBRight);

            //Load Current Values for Slider
            CharacterDetails.ClothFrontBRight_Toggle = true;
        }
        private void ClothFrontBRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ClothFrontBRight_Slider);
            RemoveRoutedEventListener(ClothFrontBRight_UpDown);
            CharacterDetails.ClothFrontBRight_Rotate = false;
        }
#endregion
#region ClothSideBLeft
        private void ClothSideBLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ClothSideBLeft_X, CharacterDetails.ClothSideBLeft_Y, CharacterDetails.ClothSideBLeft_Z, CharacterDetails.ClothSideBLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothSideBLeft_Slider);
        }

        private void ClothSideBLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ClothSideBLeft_X, CharacterDetails.ClothSideBLeft_Y, CharacterDetails.ClothSideBLeft_Z, CharacterDetails.ClothSideBLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothSideBLeft_UpDown);
        }

        public void ClothSideBLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothSideBLeft);

            //Load Current Values for Slider
            CharacterDetails.ClothSideBLeft_Toggle = true;
        }
        private void ClothSideBLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ClothSideBLeft_Slider);
            RemoveRoutedEventListener(ClothSideBLeft_UpDown);
            CharacterDetails.ClothSideBLeft_Rotate = false;
        }
#endregion
#region ClothSideBRight
        private void ClothSideBRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ClothSideBRight_X, CharacterDetails.ClothSideBRight_Y, CharacterDetails.ClothSideBRight_Z, CharacterDetails.ClothSideBRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothSideBRight_Slider);
        }

        private void ClothSideBRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ClothSideBRight_X, CharacterDetails.ClothSideBRight_Y, CharacterDetails.ClothSideBRight_Z, CharacterDetails.ClothSideBRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothSideBRight_UpDown);
        }

        public void ClothSideBRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothSideBRight);

            //Load Current Values for Slider
            CharacterDetails.ClothSideBRight_Toggle = true;
        }
        private void ClothSideBRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ClothSideBRight_Slider);
            RemoveRoutedEventListener(ClothSideBRight_UpDown);
            CharacterDetails.ClothSideBRight_Rotate = false;
        }
#endregion
#region CalfLeft
        private void CalfLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.CalfLeft_X, CharacterDetails.CalfLeft_Y, CharacterDetails.CalfLeft_Z, CharacterDetails.CalfLeft_W, bone_calf_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(CalfLeft_Slider);
        }

        private void CalfLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.CalfLeft_X, CharacterDetails.CalfLeft_Y, CharacterDetails.CalfLeft_Z, CharacterDetails.CalfLeft_W, bone_calf_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(CalfLeft_UpDown);
        }

        public void CalfLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(CalfLeft);

            //Load Current Values for Slider
            CharacterDetails.CalfLeft_Toggle = true;
        }
        private void CalfLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(CalfLeft_Slider);
            RemoveRoutedEventListener(CalfLeft_UpDown);
            CharacterDetails.CalfLeft_Rotate = false;
        }
#endregion
#region CalfRight
        private void CalfRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.CalfRight_X, CharacterDetails.CalfRight_Y, CharacterDetails.CalfRight_Z, CharacterDetails.CalfRight_W, bone_calf_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(CalfRight_Slider);
        }

        private void CalfRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.CalfRight_X, CharacterDetails.CalfRight_Y, CharacterDetails.CalfRight_Z, CharacterDetails.CalfRight_W, bone_calf_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(CalfRight_UpDown);
        }

        public void CalfRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(CalfRight);

            //Load Current Values for Slider
            CharacterDetails.CalfRight_Toggle = true;
        }
        private void CalfRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(CalfRight_Slider);
            RemoveRoutedEventListener(CalfRight_UpDown);
            CharacterDetails.CalfRight_Rotate = false;
        }
#endregion
#region ScabbardLeft
        private void ScabbardLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ScabbardLeft_X, CharacterDetails.ScabbardLeft_Y, CharacterDetails.ScabbardLeft_Z, CharacterDetails.ScabbardLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ScabbardLeft_Slider);
        }

        private void ScabbardLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ScabbardLeft_X, CharacterDetails.ScabbardLeft_Y, CharacterDetails.ScabbardLeft_Z, CharacterDetails.ScabbardLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ScabbardLeft_UpDown);
        }

        public void ScabbardLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ScabbardLeft);

            //Load Current Values for Slider
            CharacterDetails.ScabbardLeft_Toggle = true;
        }
        private void ScabbardLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ScabbardLeft_Slider);
            RemoveRoutedEventListener(ScabbardLeft_UpDown);
            CharacterDetails.ScabbardLeft_Rotate = false;
        }
#endregion
#region ScabbardRight
        private void ScabbardRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ScabbardRight_X, CharacterDetails.ScabbardRight_Y, CharacterDetails.ScabbardRight_Z, CharacterDetails.ScabbardRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ScabbardRight_Slider);
        }

        private void ScabbardRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ScabbardRight_X, CharacterDetails.ScabbardRight_Y, CharacterDetails.ScabbardRight_Z, CharacterDetails.ScabbardRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ScabbardRight_UpDown);
        }

        public void ScabbardRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ScabbardRight);

            //Load Current Values for Slider
            CharacterDetails.ScabbardRight_Toggle = true;
        }
        private void ScabbardRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ScabbardRight_Slider);
            RemoveRoutedEventListener(ScabbardRight_UpDown);
            CharacterDetails.ScabbardRight_Rotate = false;
        }
#endregion
#region Neck
        private void Neck_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.Neck_X, CharacterDetails.Neck_Y, CharacterDetails.Neck_Z, CharacterDetails.Neck_W, bone_neck);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(Neck_Slider);
        }

        private void Neck_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.Neck_X, CharacterDetails.Neck_Y, CharacterDetails.Neck_Z, CharacterDetails.Neck_W, bone_neck);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(Neck_UpDown);
        }

        public void Neck_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(Neck);

            //Load Current Values for Slider
            CharacterDetails.Neck_Toggle = true;
        }
        private void Neck_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(Neck_Slider);
            RemoveRoutedEventListener(Neck_UpDown);
            CharacterDetails.Neck_Rotate = false;
        }
#endregion
#region ClavicleLeft
        private void ClavicleLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ClavicleLeft_X, CharacterDetails.ClavicleLeft_Y, CharacterDetails.ClavicleLeft_Z, CharacterDetails.ClavicleLeft_W, bone_clav_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClavicleLeft_Slider);
        }

        private void ClavicleLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ClavicleLeft_X, CharacterDetails.ClavicleLeft_Y, CharacterDetails.ClavicleLeft_Z, CharacterDetails.ClavicleLeft_W, bone_clav_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClavicleLeft_UpDown);
        }

        public void ClavicleLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClavicleLeft);

            //Load Current Values for Slider
            CharacterDetails.ClavicleLeft_Toggle = true;
        }
        private void ClavicleLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ClavicleLeft_Slider);
            RemoveRoutedEventListener(ClavicleLeft_UpDown);
            CharacterDetails.ClavicleLeft_Rotate = false;
        }
#endregion
#region ClavicleRight
        private void ClavicleRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ClavicleRight_X, CharacterDetails.ClavicleRight_Y, CharacterDetails.ClavicleRight_Z, CharacterDetails.ClavicleRight_W, bone_clav_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClavicleRight_Slider);
        }

        private void ClavicleRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ClavicleRight_X, CharacterDetails.ClavicleRight_Y, CharacterDetails.ClavicleRight_Z, CharacterDetails.ClavicleRight_W, bone_clav_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClavicleRight_UpDown);
        }

        public void ClavicleRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClavicleRight);

            //Load Current Values for Slider
            CharacterDetails.ClavicleRight_Toggle = true;
        }
        private void ClavicleRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ClavicleRight_Slider);
            RemoveRoutedEventListener(ClavicleRight_UpDown);
            CharacterDetails.ClavicleRight_Rotate = false;
        }
#endregion
#region ClothBackCLeft
        private void ClothBackCLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ClothBackCLeft_X, CharacterDetails.ClothBackCLeft_Y, CharacterDetails.ClothBackCLeft_Z, CharacterDetails.ClothBackCLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothBackCLeft_Slider);
        }

        private void ClothBackCLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ClothBackCLeft_X, CharacterDetails.ClothBackCLeft_Y, CharacterDetails.ClothBackCLeft_Z, CharacterDetails.ClothBackCLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothBackCLeft_UpDown);
        }

        public void ClothBackCLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothBackCLeft);

            //Load Current Values for Slider
            CharacterDetails.ClothBackCLeft_Toggle = true;
        }
        private void ClothBackCLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ClothBackCLeft_Slider);
            RemoveRoutedEventListener(ClothBackCLeft_UpDown);
            CharacterDetails.ClothBackCLeft_Rotate = false;
        }
#endregion
#region ClothBackCRight
        private void ClothBackCRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ClothBackCRight_X, CharacterDetails.ClothBackCRight_Y, CharacterDetails.ClothBackCRight_Z, CharacterDetails.ClothBackCRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothBackCRight_Slider);
        }

        private void ClothBackCRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ClothBackCRight_X, CharacterDetails.ClothBackCRight_Y, CharacterDetails.ClothBackCRight_Z, CharacterDetails.ClothBackCRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothBackCRight_UpDown);
        }

        public void ClothBackCRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothBackCRight);

            //Load Current Values for Slider
            CharacterDetails.ClothBackCRight_Toggle = true;
        }
        private void ClothBackCRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ClothBackCRight_Slider);
            RemoveRoutedEventListener(ClothBackCRight_UpDown);
            CharacterDetails.ClothBackCRight_Rotate = false;
        }
#endregion
#region ClothFrontCLeft
        private void ClothFrontCLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ClothFrontCLeft_X, CharacterDetails.ClothFrontCLeft_Y, CharacterDetails.ClothFrontCLeft_Z, CharacterDetails.ClothFrontCLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothFrontCLeft_Slider);
        }

        private void ClothFrontCLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ClothFrontCLeft_X, CharacterDetails.ClothFrontCLeft_Y, CharacterDetails.ClothFrontCLeft_Z, CharacterDetails.ClothFrontCLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothFrontCLeft_UpDown);
        }

        public void ClothFrontCLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothFrontCLeft);

            //Load Current Values for Slider
            CharacterDetails.ClothFrontCLeft_Toggle = true;
        }
        private void ClothFrontCLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ClothFrontCLeft_Slider);
            RemoveRoutedEventListener(ClothFrontCLeft_UpDown);
            CharacterDetails.ClothFrontCLeft_Rotate = false;
        }
#endregion
#region ClothFrontCRight
        private void ClothFrontCRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ClothFrontCRight_X, CharacterDetails.ClothFrontCRight_Y, CharacterDetails.ClothFrontCRight_Z, CharacterDetails.ClothFrontCRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothFrontCRight_Slider);
        }

        private void ClothFrontCRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ClothFrontCRight_X, CharacterDetails.ClothFrontCRight_Y, CharacterDetails.ClothFrontCRight_Z, CharacterDetails.ClothFrontCRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothFrontCRight_UpDown);
        }

        public void ClothFrontCRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothFrontCRight);

            //Load Current Values for Slider
            CharacterDetails.ClothFrontCRight_Toggle = true;
        }
        private void ClothFrontCRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ClothFrontCRight_Slider);
            RemoveRoutedEventListener(ClothFrontCRight_UpDown);
            CharacterDetails.ClothFrontCRight_Rotate = false;
        }
#endregion
#region ClothSideCLeft
        private void ClothSideCLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ClothSideCLeft_X, CharacterDetails.ClothSideCLeft_Y, CharacterDetails.ClothSideCLeft_Z, CharacterDetails.ClothSideCLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothSideCLeft_Slider);
        }

        private void ClothSideCLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ClothSideCLeft_X, CharacterDetails.ClothSideCLeft_Y, CharacterDetails.ClothSideCLeft_Z, CharacterDetails.ClothSideCLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothSideCLeft_UpDown);
        }

        public void ClothSideCLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothSideCLeft);

            //Load Current Values for Slider
            CharacterDetails.ClothSideCLeft_Toggle = true;
        }
        private void ClothSideCLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ClothSideCLeft_Slider);
            RemoveRoutedEventListener(ClothSideCLeft_UpDown);
            CharacterDetails.ClothSideCLeft_Rotate = false;
        }
#endregion
#region ClothSideCRight
        private void ClothSideCRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ClothSideCRight_X, CharacterDetails.ClothSideCRight_Y, CharacterDetails.ClothSideCRight_Z, CharacterDetails.ClothSideCRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothSideCRight_Slider);
        }

        private void ClothSideCRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ClothSideCRight_X, CharacterDetails.ClothSideCRight_Y, CharacterDetails.ClothSideCRight_Z, CharacterDetails.ClothSideCRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ClothSideCRight_UpDown);
        }

        public void ClothSideCRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ClothSideCRight);

            //Load Current Values for Slider
            CharacterDetails.ClothSideCRight_Toggle = true;
        }
        private void ClothSideCRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ClothSideCRight_Slider);
            RemoveRoutedEventListener(ClothSideCRight_UpDown);
            CharacterDetails.ClothSideCRight_Rotate = false;
        }
#endregion
#region PoleynLeft
        private void PoleynLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.PoleynLeft_X, CharacterDetails.PoleynLeft_Y, CharacterDetails.PoleynLeft_Z, CharacterDetails.PoleynLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(PoleynLeft_Slider);
        }

        private void PoleynLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.PoleynLeft_X, CharacterDetails.PoleynLeft_Y, CharacterDetails.PoleynLeft_Z, CharacterDetails.PoleynLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(PoleynLeft_UpDown);
        }

        public void PoleynLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(PoleynLeft);

            //Load Current Values for Slider
            CharacterDetails.PoleynLeft_Toggle = true;
        }
        private void PoleynLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(PoleynLeft_Slider);
            RemoveRoutedEventListener(PoleynLeft_UpDown);
            CharacterDetails.PoleynLeft_Rotate = false;
        }
#endregion
#region PoleynRight
        private void PoleynRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.PoleynRight_X, CharacterDetails.PoleynRight_Y, CharacterDetails.PoleynRight_Z, CharacterDetails.PoleynRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(PoleynRight_Slider);
        }

        private void PoleynRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.PoleynRight_X, CharacterDetails.PoleynRight_Y, CharacterDetails.PoleynRight_Z, CharacterDetails.PoleynRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(PoleynRight_UpDown);
        }

        public void PoleynRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(PoleynRight);

            //Load Current Values for Slider
            CharacterDetails.PoleynRight_Toggle = true;
        }
        private void PoleynRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(PoleynRight_Slider);
            RemoveRoutedEventListener(PoleynRight_UpDown);
            CharacterDetails.PoleynRight_Rotate = false;
        }
#endregion
#region FootLeft
        private void FootLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.FootLeft_X, CharacterDetails.FootLeft_Y, CharacterDetails.FootLeft_Z, CharacterDetails.FootLeft_W, bone_foot_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(FootLeft_Slider);
        }

        private void FootLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.FootLeft_X, CharacterDetails.FootLeft_Y, CharacterDetails.FootLeft_Z, CharacterDetails.FootLeft_W, bone_foot_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(FootLeft_UpDown);
        }

        public void FootLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(FootLeft);

            //Load Current Values for Slider
            CharacterDetails.FootLeft_Toggle = true;
        }
        private void FootLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(FootLeft_Slider);
            RemoveRoutedEventListener(FootLeft_UpDown);
            CharacterDetails.FootLeft_Rotate = false;
        }
#endregion
#region FootRight
        private void FootRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.FootRight_X, CharacterDetails.FootRight_Y, CharacterDetails.FootRight_Z, CharacterDetails.FootRight_W, bone_foot_r);
#region Child Bones
            if (ParentingToggle.IsChecked == true)
            {
                oldrot = newrot;
                newrot = new Vector3D(CharacterDetails.BoneX, CharacterDetails.BoneY, CharacterDetails.BoneZ);
                Quaternion q1_inv = QInv(oldrot.ToQuaternion());
                Quaternion q1_new = newrot.ToQuaternion();
                Rotate_ChildBone(bone_foot_r, q1_inv, q1_new);
            }
#endregion
            // Remove listeners for value changed.
            RemoveRoutedEventListener(FootRight_Slider);
        }

        private void FootRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.FootRight_X, CharacterDetails.FootRight_Y, CharacterDetails.FootRight_Z, CharacterDetails.FootRight_W, bone_foot_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(FootRight_UpDown);
        }

        public void FootRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(FootRight);

            //Load Current Values for Slider
            CharacterDetails.FootRight_Toggle = true;
        }
        private void FootRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(FootRight_Slider);
            RemoveRoutedEventListener(FootRight_UpDown);
            CharacterDetails.FootRight_Rotate = false;
        }
#endregion
#region Head
        private void Head_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.Head_X, CharacterDetails.Head_Y, CharacterDetails.Head_Z, CharacterDetails.Head_W, bone_face);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(Head_Slider);
        }

        private void Head_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.Head_X, CharacterDetails.Head_Y, CharacterDetails.Head_Z, CharacterDetails.Head_W, bone_face);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(Head_UpDown);
        }

        public void Head_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(Head);

            //Load Current Values for Slider
            CharacterDetails.Head_Toggle = true;
        }
        private void Head_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(Head_Slider);
            RemoveRoutedEventListener(Head_UpDown);
            CharacterDetails.Head_Rotate = false;
        }
#endregion
#region ArmLeft
        private void ArmLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ArmLeft_X, CharacterDetails.ArmLeft_Y, CharacterDetails.ArmLeft_Z, CharacterDetails.ArmLeft_W, bone_arm_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ArmLeft_Slider);
        }

        private void ArmLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ArmLeft_X, CharacterDetails.ArmLeft_Y, CharacterDetails.ArmLeft_Z, CharacterDetails.ArmLeft_W, bone_arm_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ArmLeft_UpDown);
        }

        public void ArmLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ArmLeft);

            //Load Current Values for Slider
            CharacterDetails.ArmLeft_Toggle = true;
        }
        private void ArmLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ArmLeft_Slider);
            RemoveRoutedEventListener(ArmLeft_UpDown);
            CharacterDetails.ArmLeft_Rotate = false;
        }
#endregion
#region ArmRight
        private void ArmRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ArmRight_X, CharacterDetails.ArmRight_Y, CharacterDetails.ArmRight_Z, CharacterDetails.ArmRight_W, bone_arm_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ArmRight_Slider);
        }

        private void ArmRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ArmRight_X, CharacterDetails.ArmRight_Y, CharacterDetails.ArmRight_Z, CharacterDetails.ArmRight_W, bone_arm_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ArmRight_UpDown);
        }

        public void ArmRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ArmRight);

            //Load Current Values for Slider
            CharacterDetails.ArmRight_Toggle = true;
        }
        private void ArmRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ArmRight_Slider);
            RemoveRoutedEventListener(ArmRight_UpDown);
            CharacterDetails.ArmRight_Rotate = false;
        }
#endregion
#region PauldronLeft
        private void PauldronLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.PauldronLeft_X, CharacterDetails.PauldronLeft_Y, CharacterDetails.PauldronLeft_Z, CharacterDetails.PauldronLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(PauldronLeft_Slider);
        }

        private void PauldronLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.PauldronLeft_X, CharacterDetails.PauldronLeft_Y, CharacterDetails.PauldronLeft_Z, CharacterDetails.PauldronLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(PauldronLeft_UpDown);
        }

        public void PauldronLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(PauldronLeft);

            //Load Current Values for Slider
            CharacterDetails.PauldronLeft_Toggle = true;
        }
        private void PauldronLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(PauldronLeft_Slider);
            RemoveRoutedEventListener(PauldronLeft_UpDown);
            CharacterDetails.PauldronLeft_Rotate = false;
        }
#endregion
#region PauldronRight
        private void PauldronRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.PauldronRight_X, CharacterDetails.PauldronRight_Y, CharacterDetails.PauldronRight_Z, CharacterDetails.PauldronRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(PauldronRight_Slider);
        }

        private void PauldronRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.PauldronRight_X, CharacterDetails.PauldronRight_Y, CharacterDetails.PauldronRight_Z, CharacterDetails.PauldronRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(PauldronRight_UpDown);
        }

        public void PauldronRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(PauldronRight);

            //Load Current Values for Slider
            CharacterDetails.PauldronRight_Toggle = true;
        }
        private void PauldronRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(PauldronRight_Slider);
            RemoveRoutedEventListener(PauldronRight_UpDown);
            CharacterDetails.PauldronRight_Rotate = false;
        }
#endregion
#region Unknown00
        private void Unknown00_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.Unknown00_X, CharacterDetails.Unknown00_Y, CharacterDetails.Unknown00_Z, CharacterDetails.Unknown00_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(Unknown00_Slider);
        }

        private void Unknown00_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.Unknown00_X, CharacterDetails.Unknown00_Y, CharacterDetails.Unknown00_Z, CharacterDetails.Unknown00_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(Unknown00_UpDown);
        }

        public void Unknown00_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(Unknown00);

            //Load Current Values for Slider
            CharacterDetails.Unknown00_Toggle = true;
        }
        private void Unknown00_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(Unknown00_Slider);
            RemoveRoutedEventListener(Unknown00_UpDown);
            CharacterDetails.Unknown00_Rotate = false;
        }
#endregion
#region ToesLeft
        private void ToesLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ToesLeft_X, CharacterDetails.ToesLeft_Y, CharacterDetails.ToesLeft_Z, CharacterDetails.ToesLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ToesLeft_Slider);
        }

        private void ToesLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ToesLeft_X, CharacterDetails.ToesLeft_Y, CharacterDetails.ToesLeft_Z, CharacterDetails.ToesLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ToesLeft_UpDown);
            }

        public void ToesLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ToesLeft);

            //Load Current Values for Slider
            CharacterDetails.ToesLeft_Toggle = true;
        }
        private void ToesLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ToesLeft_Slider);
            RemoveRoutedEventListener(ToesLeft_UpDown);
            CharacterDetails.ToesLeft_Rotate = false;
        }
#endregion
#region ToesRight
        private void ToesRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ToesRight_X, CharacterDetails.ToesRight_Y, CharacterDetails.ToesRight_Z, CharacterDetails.ToesRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ToesRight_Slider);
        }

        private void ToesRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ToesRight_X, CharacterDetails.ToesRight_Y, CharacterDetails.ToesRight_Z, CharacterDetails.ToesRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ToesRight_UpDown);
        }

        public void ToesRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ToesRight);

            //Load Current Values for Slider
            CharacterDetails.ToesRight_Toggle = true;
        }
        private void ToesRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ToesRight_Slider);
            RemoveRoutedEventListener(ToesRight_UpDown);
            CharacterDetails.ToesRight_Rotate = false;
        }
#endregion
#region HairA
        private void HairA_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.HairA_X, CharacterDetails.HairA_Y, CharacterDetails.HairA_Z, CharacterDetails.HairA_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HairA_Slider);
        }

        private void HairA_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.HairA_X, CharacterDetails.HairA_Y, CharacterDetails.HairA_Z, CharacterDetails.HairA_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HairA_UpDown);
        }

        public void HairA_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(HairA);

            //Load Current Values for Slider
            CharacterDetails.HairA_Toggle = true;
        }
        private void HairA_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(HairA_Slider);
            RemoveRoutedEventListener(HairA_UpDown);
            CharacterDetails.HairA_Rotate = false;
        }
#endregion
#region HairFrontLeft
        private void HairFrontLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.HairFrontLeft_X, CharacterDetails.HairFrontLeft_Y, CharacterDetails.HairFrontLeft_Z, CharacterDetails.HairFrontLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HairFrontLeft_Slider);
        }

        private void HairFrontLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.HairFrontLeft_X, CharacterDetails.HairFrontLeft_Y, CharacterDetails.HairFrontLeft_Z, CharacterDetails.HairFrontLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HairFrontLeft_UpDown);
        }

        public void HairFrontLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(HairFrontLeft);

            //Load Current Values for Slider
            CharacterDetails.HairFrontLeft_Toggle = true;
        }
        private void HairFrontLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(HairFrontLeft_Slider);
            RemoveRoutedEventListener(HairFrontLeft_UpDown);
            CharacterDetails.HairFrontLeft_Rotate = false;
        }
#endregion
#region HairFrontRight
        private void HairFrontRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.HairFrontRight_X, CharacterDetails.HairFrontRight_Y, CharacterDetails.HairFrontRight_Z, CharacterDetails.HairFrontRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HairFrontRight_Slider);
        }

        private void HairFrontRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.HairFrontRight_X, CharacterDetails.HairFrontRight_Y, CharacterDetails.HairFrontRight_Z, CharacterDetails.HairFrontRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HairFrontRight_UpDown);
        }

        public void HairFrontRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(HairFrontRight);

            //Load Current Values for Slider
            CharacterDetails.HairFrontRight_Toggle = true;
        }
        private void HairFrontRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(HairFrontRight_Slider);
            RemoveRoutedEventListener(HairFrontRight_UpDown);
            CharacterDetails.HairFrontRight_Rotate = false;
        }
#endregion
#region EarLeft
        private void EarLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.EarLeft_X, CharacterDetails.EarLeft_Y, CharacterDetails.EarLeft_Z, CharacterDetails.EarLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EarLeft_Slider);
        }

        private void EarLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.EarLeft_X, CharacterDetails.EarLeft_Y, CharacterDetails.EarLeft_Z, CharacterDetails.EarLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EarLeft_UpDown);
        }

        public void EarLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EarLeft);

            //Load Current Values for Slider
            CharacterDetails.EarLeft_Toggle = true;
        }
        private void EarLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(EarLeft_Slider);
            RemoveRoutedEventListener(EarLeft_UpDown);
            CharacterDetails.EarLeft_Rotate = false;
        }
#endregion
#region EarRight
        private void EarRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.EarRight_X, CharacterDetails.EarRight_Y, CharacterDetails.EarRight_Z, CharacterDetails.EarRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EarRight_Slider);
        }

        private void EarRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.EarRight_X, CharacterDetails.EarRight_Y, CharacterDetails.EarRight_Z, CharacterDetails.EarRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EarRight_UpDown);
        }

        public void EarRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EarRight);

            //Load Current Values for Slider
            CharacterDetails.EarRight_Toggle = true;
        }
        private void EarRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(EarRight_Slider);
            RemoveRoutedEventListener(EarRight_UpDown);
            CharacterDetails.EarRight_Rotate = false;
        }
#endregion
#region ForearmLeft
        private void ForearmLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ForearmLeft_X, CharacterDetails.ForearmLeft_Y, CharacterDetails.ForearmLeft_Z, CharacterDetails.ForearmLeft_W, bone_forearm_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ForearmLeft_Slider);
        }

        private void ForearmLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ForearmLeft_X, CharacterDetails.ForearmLeft_Y, CharacterDetails.ForearmLeft_Z, CharacterDetails.ForearmLeft_W, bone_forearm_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ForearmLeft_UpDown);
        }

        public void ForearmLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ForearmLeft);

            //Load Current Values for Slider
            CharacterDetails.ForearmLeft_Toggle = true;
        }
        private void ForearmLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ForearmLeft_Slider);
            RemoveRoutedEventListener(ForearmLeft_UpDown);
            CharacterDetails.ForearmLeft_Rotate = false;
        }
#endregion
#region ForearmRight
        private void ForearmRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ForearmRight_X, CharacterDetails.ForearmRight_Y, CharacterDetails.ForearmRight_Z, CharacterDetails.ForearmRight_W, bone_forearm_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ForearmRight_Slider);
        }

        private void ForearmRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ForearmRight_X, CharacterDetails.ForearmRight_Y, CharacterDetails.ForearmRight_Z, CharacterDetails.ForearmRight_W, bone_forearm_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ForearmRight_UpDown);
        }

        public void ForearmRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ForearmRight);

            //Load Current Values for Slider
            CharacterDetails.ForearmRight_Toggle = true;
        }
        private void ForearmRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ForearmRight_Slider);
            RemoveRoutedEventListener(ForearmRight_UpDown);
            CharacterDetails.ForearmRight_Rotate = false;
        }
#endregion
#region ShoulderLeft
        private void ShoulderLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ShoulderLeft_X, CharacterDetails.ShoulderLeft_Y, CharacterDetails.ShoulderLeft_Z, CharacterDetails.ShoulderLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ShoulderLeft_Slider);
            RemoveRoutedEventListener(ShoulderLeft_UpDown);
        }

        private void ShoulderLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ShoulderLeft_X, CharacterDetails.ShoulderLeft_Y, CharacterDetails.ShoulderLeft_Z, CharacterDetails.ShoulderLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ShoulderLeft_Slider);
            RemoveRoutedEventListener(ShoulderLeft_UpDown);
        }

        public void ShoulderLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ShoulderLeft);

            //Load Current Values for Slider
            CharacterDetails.ShoulderLeft_Toggle = true;
        }
        private void ShoulderLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ShoulderLeft_Slider);
            RemoveRoutedEventListener(ShoulderLeft_UpDown);
            CharacterDetails.ShoulderLeft_Rotate = false;
        }
#endregion
#region ShoulderRight
        private void ShoulderRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ShoulderRight_X, CharacterDetails.ShoulderRight_Y, CharacterDetails.ShoulderRight_Z, CharacterDetails.ShoulderRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ShoulderRight_Slider);
        }

        private void ShoulderRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ShoulderRight_X, CharacterDetails.ShoulderRight_Y, CharacterDetails.ShoulderRight_Z, CharacterDetails.ShoulderRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ShoulderRight_UpDown);
        }

        public void ShoulderRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ShoulderRight);

            //Load Current Values for Slider
            CharacterDetails.ShoulderRight_Toggle = true;
        }
        private void ShoulderRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ShoulderRight_Slider);
            RemoveRoutedEventListener(ShoulderRight_UpDown);
            CharacterDetails.ShoulderRight_Rotate = false;
        }
#endregion
#region HairB
        private void HairB_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.HairB_X, CharacterDetails.HairB_Y, CharacterDetails.HairB_Z, CharacterDetails.HairB_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HairB_Slider);
            RemoveRoutedEventListener(HairB_UpDown);
        }

        private void HairB_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.HairB_X, CharacterDetails.HairB_Y, CharacterDetails.HairB_Z, CharacterDetails.HairB_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HairB_Slider);
        }

        public void HairB_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(HairB);

            //Load Current Values for Slider
            CharacterDetails.HairB_Toggle = true;
        }
        private void HairB_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(HairB_UpDown);
            CharacterDetails.HairB_Rotate = false;
        }
#endregion
#region HandLeft
        private void HandLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.HandLeft_X, CharacterDetails.HandLeft_Y, CharacterDetails.HandLeft_Z, CharacterDetails.HandLeft_W, bone_hand_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HandLeft_Slider);
        }

        private void HandLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.HandLeft_X, CharacterDetails.HandLeft_Y, CharacterDetails.HandLeft_Z, CharacterDetails.HandLeft_W, bone_hand_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HandLeft_UpDown);
        }

        public void HandLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(HandLeft);

            //Load Current Values for Slider
            CharacterDetails.HandLeft_Toggle = true;
        }
        private void HandLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(HandLeft_Slider);
            RemoveRoutedEventListener(HandLeft_UpDown);
            CharacterDetails.HandLeft_Rotate = false;
        }
#endregion
#region HandRight
        private void HandRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.HandRight_X, CharacterDetails.HandRight_Y, CharacterDetails.HandRight_Z, CharacterDetails.HandRight_W, bone_hand_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HandRight_Slider);
        }

        private void HandRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.HandRight_X, CharacterDetails.HandRight_Y, CharacterDetails.HandRight_Z, CharacterDetails.HandRight_W, bone_hand_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HandRight_UpDown);
        }

        public void HandRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(HandRight);

            //Load Current Values for Slider
            CharacterDetails.HandRight_Toggle = true;
        }
        private void HandRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(HandRight_Slider);
            RemoveRoutedEventListener(HandRight_UpDown);
            CharacterDetails.HandRight_Rotate = false;
        }
#endregion
#region ShieldLeft
        private void ShieldLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ShieldLeft_X, CharacterDetails.ShieldLeft_Y, CharacterDetails.ShieldLeft_Z, CharacterDetails.ShieldLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ShieldLeft_Slider);
        }

        private void ShieldLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ShieldLeft_X, CharacterDetails.ShieldLeft_Y, CharacterDetails.ShieldLeft_Z, CharacterDetails.ShieldLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ShieldLeft_UpDown);
        }

        public void ShieldLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ShieldLeft);

            //Load Current Values for Slider
            CharacterDetails.ShieldLeft_Toggle = true;
        }
        private void ShieldLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ShieldLeft_Slider);
            RemoveRoutedEventListener(ShieldLeft_UpDown);
            CharacterDetails.ShieldLeft_Rotate = false;
        }
#endregion
#region ShieldRight
        private void ShieldRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ShieldRight_X, CharacterDetails.ShieldRight_Y, CharacterDetails.ShieldRight_Z, CharacterDetails.ShieldRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ShieldRight_Slider);
        }

        private void ShieldRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ShieldRight_X, CharacterDetails.ShieldRight_Y, CharacterDetails.ShieldRight_Z, CharacterDetails.ShieldRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ShieldRight_UpDown);
        }

        public void ShieldRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ShieldRight);

            //Load Current Values for Slider
            CharacterDetails.ShieldRight_Toggle = true;
        }
        private void ShieldRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ShieldRight_Slider);
            RemoveRoutedEventListener(ShieldRight_UpDown);
            CharacterDetails.ShieldRight_Rotate = false;
        }
#endregion
#region EarringALeft
        private void EarringALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.EarringALeft_X, CharacterDetails.EarringALeft_Y, CharacterDetails.EarringALeft_Z, CharacterDetails.EarringALeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EarringALeft_Slider);
        }

        private void EarringALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.EarringALeft_X, CharacterDetails.EarringALeft_Y, CharacterDetails.EarringALeft_Z, CharacterDetails.EarringALeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EarringALeft_UpDown);
        }

        public void EarringALeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EarringALeft);

            //Load Current Values for Slider
            CharacterDetails.EarringALeft_Toggle = true;
        }
        private void EarringALeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(EarringALeft_Slider);
            RemoveRoutedEventListener(EarringALeft_UpDown);
            CharacterDetails.EarringALeft_Rotate = false;
        }
#endregion
#region EarringARight
        private void EarringARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.EarringARight_X, CharacterDetails.EarringARight_Y, CharacterDetails.EarringARight_Z, CharacterDetails.EarringARight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EarringARight_Slider);
        }

        private void EarringARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.EarringARight_X, CharacterDetails.EarringARight_Y, CharacterDetails.EarringARight_Z, CharacterDetails.EarringARight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EarringARight_UpDown);
        }

        public void EarringARight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EarringARight);

            //Load Current Values for Slider
            CharacterDetails.EarringARight_Toggle = true;
        }
        private void EarringARight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(EarringARight_Slider);
            RemoveRoutedEventListener(EarringARight_UpDown);
            CharacterDetails.EarringARight_Rotate = false;
        }
#endregion
#region ElbowLeft
        private void ElbowLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ElbowLeft_X, CharacterDetails.ElbowLeft_Y, CharacterDetails.ElbowLeft_Z, CharacterDetails.ElbowLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ElbowLeft_Slider);
        }

        private void ElbowLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ElbowLeft_X, CharacterDetails.ElbowLeft_Y, CharacterDetails.ElbowLeft_Z, CharacterDetails.ElbowLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ElbowLeft_UpDown);
        }

        public void ElbowLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ElbowLeft);

            //Load Current Values for Slider
            CharacterDetails.ElbowLeft_Toggle = true;
        }
        private void ElbowLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ElbowLeft_Slider);
            RemoveRoutedEventListener(ElbowLeft_UpDown);
            CharacterDetails.ElbowLeft_Rotate = false;
        }
#endregion
#region ElbowRight
        private void ElbowRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ElbowRight_X, CharacterDetails.ElbowRight_Y, CharacterDetails.ElbowRight_Z, CharacterDetails.ElbowRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ElbowRight_Slider);
        }

        private void ElbowRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ElbowRight_X, CharacterDetails.ElbowRight_Y, CharacterDetails.ElbowRight_Z, CharacterDetails.ElbowRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ElbowRight_UpDown);
        }

        public void ElbowRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ElbowRight);

            //Load Current Values for Slider
            CharacterDetails.ElbowRight_Toggle = true;
        }
        private void ElbowRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ElbowRight_Slider);
            RemoveRoutedEventListener(ElbowRight_UpDown);
            CharacterDetails.ElbowRight_Rotate = false;
        }
#endregion
#region CouterLeft
        private void CouterLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.CouterLeft_X, CharacterDetails.CouterLeft_Y, CharacterDetails.CouterLeft_Z, CharacterDetails.CouterLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(CouterLeft_Slider);
        }

        private void CouterLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.CouterLeft_X, CharacterDetails.CouterLeft_Y, CharacterDetails.CouterLeft_Z, CharacterDetails.CouterLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(CouterLeft_UpDown);
        }

        public void CouterLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(CouterLeft);

            //Load Current Values for Slider
            CharacterDetails.CouterLeft_Toggle = true;
        }
        private void CouterLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(CouterLeft_Slider);
            RemoveRoutedEventListener(CouterLeft_UpDown);
            CharacterDetails.CouterLeft_Rotate = false;
        }
#endregion
#region CouterRight
        private void CouterRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.CouterRight_X, CharacterDetails.CouterRight_Y, CharacterDetails.CouterRight_Z, CharacterDetails.CouterRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(CouterRight_Slider);
        }

        private void CouterRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.CouterRight_X, CharacterDetails.CouterRight_Y, CharacterDetails.CouterRight_Z, CharacterDetails.CouterRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(CouterRight_UpDown);
        }

        public void CouterRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(CouterRight);

            //Load Current Values for Slider
            CharacterDetails.CouterRight_Toggle = true;
        }
        private void CouterRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(CouterRight_Slider);
            RemoveRoutedEventListener(CouterRight_UpDown);
            CharacterDetails.CouterRight_Rotate = false;
        }
#endregion
#region WristLeft
        private void WristLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.WristLeft_X, CharacterDetails.WristLeft_Y, CharacterDetails.WristLeft_Z, CharacterDetails.WristLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(WristLeft_Slider);
        }

        private void WristLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.WristLeft_X, CharacterDetails.WristLeft_Y, CharacterDetails.WristLeft_Z, CharacterDetails.WristLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(WristLeft_UpDown);
        }

        public void WristLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(WristLeft);

            //Load Current Values for Slider
            CharacterDetails.WristLeft_Toggle = true;
        }
        private void WristLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(WristLeft_Slider);
            RemoveRoutedEventListener(WristLeft_UpDown);
            CharacterDetails.WristLeft_Rotate = false;
        }
#endregion
#region WristRight
        private void WristRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.WristRight_X, CharacterDetails.WristRight_Y, CharacterDetails.WristRight_Z, CharacterDetails.WristRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(WristRight_Slider);
        }

        private void WristRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.WristRight_X, CharacterDetails.WristRight_Y, CharacterDetails.WristRight_Z, CharacterDetails.WristRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(WristRight_UpDown);
        }

        public void WristRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(WristRight);

            //Load Current Values for Slider
            CharacterDetails.WristRight_Toggle = true;
        }
        private void WristRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(WristRight_Slider);
            RemoveRoutedEventListener(WristRight_UpDown);
            CharacterDetails.WristRight_Rotate = false;
        }
#endregion
#region IndexALeft
        private void IndexALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.IndexALeft_X, CharacterDetails.IndexALeft_Y, CharacterDetails.IndexALeft_Z, CharacterDetails.IndexALeft_W, bone_index_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(IndexALeft_Slider);
        }

        private void IndexALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.IndexALeft_X, CharacterDetails.IndexALeft_Y, CharacterDetails.IndexALeft_Z, CharacterDetails.IndexALeft_W, bone_index_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(IndexALeft_UpDown);
        }

        public void IndexALeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(IndexALeft);

            //Load Current Values for Slider
            CharacterDetails.IndexALeft_Toggle = true;
        }
        private void IndexALeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(IndexALeft_Slider);
            RemoveRoutedEventListener(IndexALeft_UpDown);
            CharacterDetails.IndexALeft_Rotate = false;
        }
#endregion
#region IndexARight
        private void IndexARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.IndexARight_X, CharacterDetails.IndexARight_Y, CharacterDetails.IndexARight_Z, CharacterDetails.IndexARight_W, bone_index_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(IndexARight_Slider);
        }

        private void IndexARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.IndexARight_X, CharacterDetails.IndexARight_Y, CharacterDetails.IndexARight_Z, CharacterDetails.IndexARight_W, bone_index_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(IndexARight_UpDown);
        }

        public void IndexARight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(IndexARight);

            //Load Current Values for Slider
            CharacterDetails.IndexARight_Toggle = true;
        }
        private void IndexARight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(IndexARight_Slider);
            RemoveRoutedEventListener(IndexARight_UpDown);
            CharacterDetails.IndexARight_Rotate = false;
        }
#endregion
#region PinkyALeft
        private void PinkyALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.PinkyALeft_X, CharacterDetails.PinkyALeft_Y, CharacterDetails.PinkyALeft_Z, CharacterDetails.PinkyALeft_W, bone_pinky_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(PinkyALeft_Slider);
        }

        private void PinkyALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.PinkyALeft_X, CharacterDetails.PinkyALeft_Y, CharacterDetails.PinkyALeft_Z, CharacterDetails.PinkyALeft_W, bone_pinky_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(PinkyALeft_UpDown);
        }

        public void PinkyALeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(PinkyALeft);

            //Load Current Values for Slider
            CharacterDetails.PinkyALeft_Toggle = true;
        }
        private void PinkyALeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(PinkyALeft_Slider);
            RemoveRoutedEventListener(PinkyALeft_UpDown);
            CharacterDetails.PinkyALeft_Rotate = false;
        }
#endregion
#region PinkyARight
        private void PinkyARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.PinkyARight_X, CharacterDetails.PinkyARight_Y, CharacterDetails.PinkyARight_Z, CharacterDetails.PinkyARight_W, bone_pinky_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(PinkyARight_Slider);
        }

        private void PinkyARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.PinkyARight_X, CharacterDetails.PinkyARight_Y, CharacterDetails.PinkyARight_Z, CharacterDetails.PinkyARight_W, bone_pinky_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(PinkyARight_UpDown);
        }

        public void PinkyARight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(PinkyARight);

            //Load Current Values for Slider
            CharacterDetails.PinkyARight_Toggle = true;
        }
        private void PinkyARight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(PinkyARight_Slider);
            RemoveRoutedEventListener(PinkyARight_UpDown);
            CharacterDetails.PinkyARight_Rotate = false;
        }
#endregion
#region RingALeft
        private void RingALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.RingALeft_X, CharacterDetails.RingALeft_Y, CharacterDetails.RingALeft_Z, CharacterDetails.RingALeft_W, bone_ring_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(RingALeft_Slider);
        }

        private void RingALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.RingALeft_X, CharacterDetails.RingALeft_Y, CharacterDetails.RingALeft_Z, CharacterDetails.RingALeft_W, bone_ring_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(RingALeft_UpDown);
        }

        public void RingALeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(RingALeft);

            //Load Current Values for Slider
            CharacterDetails.RingALeft_Toggle = true;
        }
        private void RingALeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(RingALeft_Slider);
            RemoveRoutedEventListener(RingALeft_UpDown);
            CharacterDetails.RingALeft_Rotate = false;
        }
#endregion
#region RingARight
        private void RingARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.RingARight_X, CharacterDetails.RingARight_Y, CharacterDetails.RingARight_Z, CharacterDetails.RingARight_W, bone_ring_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(RingARight_Slider);
        }

        private void RingARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.RingARight_X, CharacterDetails.RingARight_Y, CharacterDetails.RingARight_Z, CharacterDetails.RingARight_W, bone_ring_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(RingARight_UpDown);
        }

        public void RingARight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(RingARight);

            //Load Current Values for Slider
            CharacterDetails.RingARight_Toggle = true;
        }
        private void RingARight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(RingARight_Slider);
            RemoveRoutedEventListener(RingARight_UpDown);
            CharacterDetails.RingARight_Rotate = false;
        }
#endregion
#region MiddleALeft
        private void MiddleALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.MiddleALeft_X, CharacterDetails.MiddleALeft_Y, CharacterDetails.MiddleALeft_Z, CharacterDetails.MiddleALeft_W, bone_middle_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(MiddleALeft_Slider);
        }

        private void MiddleALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.MiddleALeft_X, CharacterDetails.MiddleALeft_Y, CharacterDetails.MiddleALeft_Z, CharacterDetails.MiddleALeft_W, bone_middle_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(MiddleALeft_UpDown);
        }

        public void MiddleALeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(MiddleALeft);

            //Load Current Values for Slider
            CharacterDetails.MiddleALeft_Toggle = true;
        }
        private void MiddleALeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(MiddleALeft_Slider);
            RemoveRoutedEventListener(MiddleALeft_UpDown);
            CharacterDetails.MiddleALeft_Rotate = false;
        }
#endregion
#region MiddleARight
        private void MiddleARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.MiddleARight_X, CharacterDetails.MiddleARight_Y, CharacterDetails.MiddleARight_Z, CharacterDetails.MiddleARight_W, bone_middle_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(MiddleARight_Slider);
        }

        private void MiddleARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.MiddleARight_X, CharacterDetails.MiddleARight_Y, CharacterDetails.MiddleARight_Z, CharacterDetails.MiddleARight_W, bone_middle_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(MiddleARight_UpDown);
        }

        public void MiddleARight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(MiddleARight);

            //Load Current Values for Slider
            CharacterDetails.MiddleARight_Toggle = true;
        }
        private void MiddleARight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(MiddleARight_Slider);
            RemoveRoutedEventListener(MiddleARight_UpDown);
            CharacterDetails.MiddleARight_Rotate = false;
        }
#endregion
#region ThumbALeft
        private void ThumbALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ThumbALeft_X, CharacterDetails.ThumbALeft_Y, CharacterDetails.ThumbALeft_Z, CharacterDetails.ThumbALeft_W, bone_thumb_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ThumbALeft_Slider);
        }

        private void ThumbALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ThumbALeft_X, CharacterDetails.ThumbALeft_Y, CharacterDetails.ThumbALeft_Z, CharacterDetails.ThumbALeft_W, bone_thumb_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ThumbALeft_UpDown);
        }

        public void ThumbALeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ThumbALeft);

            //Load Current Values for Slider
            CharacterDetails.ThumbALeft_Toggle = true;
        }
        private void ThumbALeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ThumbALeft_Slider);
            RemoveRoutedEventListener(ThumbALeft_UpDown);
            CharacterDetails.ThumbALeft_Rotate = false;
        }
#endregion
#region ThumbARight
        private void ThumbARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ThumbARight_X, CharacterDetails.ThumbARight_Y, CharacterDetails.ThumbARight_Z, CharacterDetails.ThumbARight_W, bone_thumb_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ThumbARight_Slider);
        }

        private void ThumbARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ThumbARight_X, CharacterDetails.ThumbARight_Y, CharacterDetails.ThumbARight_Z, CharacterDetails.ThumbARight_W, bone_thumb_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ThumbARight_UpDown);
        }

        public void ThumbARight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ThumbARight);

            //Load Current Values for Slider
            CharacterDetails.ThumbARight_Toggle = true;
        }
        private void ThumbARight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ThumbARight_Slider);
            RemoveRoutedEventListener(ThumbARight_UpDown);
            CharacterDetails.ThumbARight_Rotate = false;
        }
#endregion
#region WeaponLeft
        private void WeaponLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.WeaponLeft_X, CharacterDetails.WeaponLeft_Y, CharacterDetails.WeaponLeft_Z, CharacterDetails.WeaponLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(WeaponLeft_Slider);
        }

        private void WeaponLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.WeaponLeft_X, CharacterDetails.WeaponLeft_Y, CharacterDetails.WeaponLeft_Z, CharacterDetails.WeaponLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(WeaponLeft_UpDown);
        }

        public void WeaponLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(WeaponLeft);

            //Load Current Values for Slider
            CharacterDetails.WeaponLeft_Toggle = true;
        }
        private void WeaponLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(WeaponLeft_Slider);
            RemoveRoutedEventListener(WeaponLeft_UpDown);
            CharacterDetails.WeaponLeft_Rotate = false;
        }
#endregion
#region WeaponRight
        private void WeaponRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.WeaponRight_X, CharacterDetails.WeaponRight_Y, CharacterDetails.WeaponRight_Z, CharacterDetails.WeaponRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(WeaponRight_Slider);
        }

        private void WeaponRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.WeaponRight_X, CharacterDetails.WeaponRight_Y, CharacterDetails.WeaponRight_Z, CharacterDetails.WeaponRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(WeaponRight_UpDown);
        }

        public void WeaponRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(WeaponRight);

            //Load Current Values for Slider
            CharacterDetails.WeaponRight_Toggle = true;
        }
        private void WeaponRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(WeaponRight_Slider);
            RemoveRoutedEventListener(WeaponRight_UpDown);
            CharacterDetails.WeaponRight_Rotate = false;
        }
#endregion
#region EarringBLeft
        private void EarringBLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.EarringBLeft_X, CharacterDetails.EarringBLeft_Y, CharacterDetails.EarringBLeft_Z, CharacterDetails.EarringBLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EarringBLeft_Slider);
        }

        private void EarringBLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.EarringBLeft_X, CharacterDetails.EarringBLeft_Y, CharacterDetails.EarringBLeft_Z, CharacterDetails.EarringBLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EarringBLeft_UpDown);
        }

        public void EarringBLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EarringBLeft);

            //Load Current Values for Slider
            CharacterDetails.EarringBLeft_Toggle = true;
        }
        private void EarringBLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(EarringBLeft_Slider);
            RemoveRoutedEventListener(EarringBLeft_UpDown);
            CharacterDetails.EarringBLeft_Rotate = false;
        }
#endregion
#region EarringBRight
        private void EarringBRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.EarringBRight_X, CharacterDetails.EarringBRight_Y, CharacterDetails.EarringBRight_Z, CharacterDetails.EarringBRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EarringBRight_Slider);
        }

        private void EarringBRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.EarringBRight_X, CharacterDetails.EarringBRight_Y, CharacterDetails.EarringBRight_Z, CharacterDetails.EarringBRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EarringBRight_UpDown);
        }

        public void EarringBRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EarringBRight);

            //Load Current Values for Slider
            CharacterDetails.EarringBRight_Toggle = true;
        }
        private void EarringBRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(EarringBRight_Slider);
            RemoveRoutedEventListener(EarringBRight_UpDown);
            CharacterDetails.EarringBRight_Rotate = false;
        }
#endregion
#region IndexBLeft
        private void IndexBLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.IndexBLeft_X, CharacterDetails.IndexBLeft_Y, CharacterDetails.IndexBLeft_Z, CharacterDetails.IndexBLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(IndexBLeft_Slider);
        }

        private void IndexBLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.IndexBLeft_X, CharacterDetails.IndexBLeft_Y, CharacterDetails.IndexBLeft_Z, CharacterDetails.IndexBLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(IndexBLeft_UpDown);
        }

        public void IndexBLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(IndexBLeft);

            //Load Current Values for Slider
            CharacterDetails.IndexBLeft_Toggle = true;
        }
        private void IndexBLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(IndexBLeft_Slider);
            RemoveRoutedEventListener(IndexBLeft_UpDown);
            CharacterDetails.IndexBLeft_Rotate = false;
        }
#endregion
#region IndexBRight
        private void IndexBRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.IndexBRight_X, CharacterDetails.IndexBRight_Y, CharacterDetails.IndexBRight_Z, CharacterDetails.IndexBRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(IndexBRight_Slider);
        }

        private void IndexBRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.IndexBRight_X, CharacterDetails.IndexBRight_Y, CharacterDetails.IndexBRight_Z, CharacterDetails.IndexBRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(IndexBRight_UpDown);
        }

        public void IndexBRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(IndexBRight);

            //Load Current Values for Slider
            CharacterDetails.IndexBRight_Toggle = true;
        }
        private void IndexBRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(IndexBRight_Slider);
            RemoveRoutedEventListener(IndexBRight_UpDown);
            CharacterDetails.IndexBRight_Rotate = false;
        }
#endregion
#region PinkyBLeft
        private void PinkyBLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.PinkyBLeft_X, CharacterDetails.PinkyBLeft_Y, CharacterDetails.PinkyBLeft_Z, CharacterDetails.PinkyBLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(PinkyBLeft_Slider);
        }

        private void PinkyBLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.PinkyBLeft_X, CharacterDetails.PinkyBLeft_Y, CharacterDetails.PinkyBLeft_Z, CharacterDetails.PinkyBLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(PinkyBLeft_UpDown);
        }

        public void PinkyBLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(PinkyBLeft);

            //Load Current Values for Slider
            CharacterDetails.PinkyBLeft_Toggle = true;
        }
        private void PinkyBLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(PinkyBLeft_Slider);
            RemoveRoutedEventListener(PinkyBLeft_UpDown);
            CharacterDetails.PinkyBLeft_Rotate = false;
        }
#endregion
#region PinkyBRight
        private void PinkyBRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.PinkyBRight_X, CharacterDetails.PinkyBRight_Y, CharacterDetails.PinkyBRight_Z, CharacterDetails.PinkyBRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(PinkyBRight_Slider);
        }

        private void PinkyBRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.PinkyBRight_X, CharacterDetails.PinkyBRight_Y, CharacterDetails.PinkyBRight_Z, CharacterDetails.PinkyBRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(PinkyBRight_UpDown);
        }

        public void PinkyBRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(PinkyBRight);

            //Load Current Values for Slider
            CharacterDetails.PinkyBRight_Toggle = true;
        }
        private void PinkyBRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(PinkyBRight_Slider);
            RemoveRoutedEventListener(PinkyBRight_UpDown);
            CharacterDetails.PinkyBRight_Rotate = false;
        }
#endregion
#region RingBLeft
        private void RingBLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.RingBLeft_X, CharacterDetails.RingBLeft_Y, CharacterDetails.RingBLeft_Z, CharacterDetails.RingBLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(RingBLeft_Slider);
        }

        private void RingBLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.RingBLeft_X, CharacterDetails.RingBLeft_Y, CharacterDetails.RingBLeft_Z, CharacterDetails.RingBLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(RingBLeft_UpDown);
        }

        public void RingBLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(RingBLeft);

            //Load Current Values for Slider
            CharacterDetails.RingBLeft_Toggle = true;
        }
        private void RingBLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(RingBLeft_Slider);
            RemoveRoutedEventListener(RingBLeft_UpDown);
            CharacterDetails.RingBLeft_Rotate = false;
        }
#endregion
#region RingBRight
        private void RingBRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.RingBRight_X, CharacterDetails.RingBRight_Y, CharacterDetails.RingBRight_Z, CharacterDetails.RingBRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(RingBRight_Slider);
        }

        private void RingBRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.RingBRight_X, CharacterDetails.RingBRight_Y, CharacterDetails.RingBRight_Z, CharacterDetails.RingBRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(RingBRight_UpDown);
        }

        public void RingBRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(RingBRight);

            //Load Current Values for Slider
            CharacterDetails.RingBRight_Toggle = true;
        }
        private void RingBRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(RingBRight_Slider);
            RemoveRoutedEventListener(RingBRight_UpDown);
            CharacterDetails.RingBRight_Rotate = false;
        }
#endregion
#region MiddleBLeft
        private void MiddleBLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.MiddleBLeft_X, CharacterDetails.MiddleBLeft_Y, CharacterDetails.MiddleBLeft_Z, CharacterDetails.MiddleBLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(MiddleBLeft_Slider);
        }

        private void MiddleBLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.MiddleBLeft_X, CharacterDetails.MiddleBLeft_Y, CharacterDetails.MiddleBLeft_Z, CharacterDetails.MiddleBLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(MiddleBLeft_UpDown);
        }

        public void MiddleBLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(MiddleBLeft);

            //Load Current Values for Slider
            CharacterDetails.MiddleBLeft_Toggle = true;
        }
        private void MiddleBLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(MiddleBLeft_Slider);
            RemoveRoutedEventListener(MiddleBLeft_UpDown);
            CharacterDetails.MiddleBLeft_Rotate = false;
        }
#endregion
#region MiddleBRight
        private void MiddleBRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.MiddleBRight_X, CharacterDetails.MiddleBRight_Y, CharacterDetails.MiddleBRight_Z, CharacterDetails.MiddleBRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(MiddleBRight_Slider);
        }

        private void MiddleBRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.MiddleBRight_X, CharacterDetails.MiddleBRight_Y, CharacterDetails.MiddleBRight_Z, CharacterDetails.MiddleBRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(MiddleBRight_UpDown);
        }

        public void MiddleBRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(MiddleBRight);

            //Load Current Values for Slider
            CharacterDetails.MiddleBRight_Toggle = true;
        }
        private void MiddleBRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(MiddleBRight_Slider);
            RemoveRoutedEventListener(MiddleBRight_UpDown);
            CharacterDetails.MiddleBRight_Rotate = false;
        }
#endregion
#region ThumbBLeft
        private void ThumbBLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ThumbBLeft_X, CharacterDetails.ThumbBLeft_Y, CharacterDetails.ThumbBLeft_Z, CharacterDetails.ThumbBLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ThumbBLeft_Slider);
        }

        private void ThumbBLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ThumbBLeft_X, CharacterDetails.ThumbBLeft_Y, CharacterDetails.ThumbBLeft_Z, CharacterDetails.ThumbBLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ThumbBLeft_UpDown);
        }

        public void ThumbBLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ThumbBLeft);

            //Load Current Values for Slider
            CharacterDetails.ThumbBLeft_Toggle = true;
        }
        private void ThumbBLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ThumbBLeft_Slider);
            RemoveRoutedEventListener(ThumbBLeft_UpDown);
            CharacterDetails.ThumbBLeft_Rotate = false;
        }
#endregion
#region ThumbBRight
        private void ThumbBRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ThumbBRight_X, CharacterDetails.ThumbBRight_Y, CharacterDetails.ThumbBRight_Z, CharacterDetails.ThumbBRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ThumbBRight_Slider);
        }

        private void ThumbBRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ThumbBRight_X, CharacterDetails.ThumbBRight_Y, CharacterDetails.ThumbBRight_Z, CharacterDetails.ThumbBRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(ThumbBRight_UpDown);
        }

        public void ThumbBRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ThumbBRight);

            //Load Current Values for Slider
            CharacterDetails.ThumbBRight_Toggle = true;
        }
        private void ThumbBRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ThumbBRight_Slider);
            RemoveRoutedEventListener(ThumbBRight_UpDown);
            CharacterDetails.ThumbBRight_Rotate = false;
        }
#endregion
#region TailA
        private void TailA_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.TailA_X, CharacterDetails.TailA_Y, CharacterDetails.TailA_Z, CharacterDetails.TailA_W, bone_tail_a);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(TailA_Slider);
        }

        private void TailA_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.TailA_X, CharacterDetails.TailA_Y, CharacterDetails.TailA_Z, CharacterDetails.TailA_W, bone_tail_a);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(TailA_UpDown);
        }

        public void TailA_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(TailA);

            //Load Current Values for Slider
            CharacterDetails.TailA_Toggle = true;
        }
        private void TailA_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(TailA_Slider);
            RemoveRoutedEventListener(TailA_UpDown);
            CharacterDetails.TailA_Rotate = false;
        }
#endregion
#region TailB
        private void TailB_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.TailB_X, CharacterDetails.TailB_Y, CharacterDetails.TailB_Z, CharacterDetails.TailB_W, bone_tail_b);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(TailB_Slider);
        }

        private void TailB_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.TailB_X, CharacterDetails.TailB_Y, CharacterDetails.TailB_Z, CharacterDetails.TailB_W, bone_tail_b);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(TailB_UpDown);
        }

        public void TailB_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(TailB);

            //Load Current Values for Slider
            CharacterDetails.TailB_Toggle = true;
        }
        private void TailB_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(TailB_Slider);
            RemoveRoutedEventListener(TailB_UpDown);
            CharacterDetails.TailB_Rotate = false;
        }
#endregion
#region TailC
        private void TailC_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.TailC_X, CharacterDetails.TailC_Y, CharacterDetails.TailC_Z, CharacterDetails.TailC_W, bone_tail_c);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(TailC_Slider);
        }

        private void TailC_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.TailC_X, CharacterDetails.TailC_Y, CharacterDetails.TailC_Z, CharacterDetails.TailC_W, bone_tail_c);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(TailC_UpDown);
        }

        public void TailC_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(TailC);

            //Load Current Values for Slider
            CharacterDetails.TailC_Toggle = true;
        }
        private void TailC_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(TailC_Slider);
            RemoveRoutedEventListener(TailC_UpDown);
            CharacterDetails.TailC_Rotate = false;
        }
#endregion
#region TailD
        private void TailD_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.TailD_X, CharacterDetails.TailD_Y, CharacterDetails.TailD_Z, CharacterDetails.TailD_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(TailD_Slider);
        }

        private void TailD_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.TailD_X, CharacterDetails.TailD_Y, CharacterDetails.TailD_Z, CharacterDetails.TailD_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(TailD_UpDown);
        }

        public void TailD_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(TailD);

            //Load Current Values for Slider
            CharacterDetails.TailD_Toggle = true;
        }
        private void TailD_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(TailD_Slider);
            RemoveRoutedEventListener(TailD_UpDown);
            CharacterDetails.TailD_Rotate = false;
        }
#endregion
#region TailE
        private void TailE_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.TailE_X, CharacterDetails.TailE_Y, CharacterDetails.TailE_Z, CharacterDetails.TailE_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(TailE_Slider);
        }

        private void TailE_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.TailE_X, CharacterDetails.TailE_Y, CharacterDetails.TailE_Z, CharacterDetails.TailE_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(TailE_UpDown);
        }

        public void TailE_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(TailE);

            //Load Current Values for Slider
            CharacterDetails.TailE_Toggle = true;
        }
        private void TailE_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(TailE_Slider);
            RemoveRoutedEventListener(TailE_UpDown);
            CharacterDetails.TailE_Rotate = false;
        }
#endregion

#region RootHead
        private void RootHead_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.RootHead_X, CharacterDetails.RootHead_Y, CharacterDetails.RootHead_Z, CharacterDetails.RootHead_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(RootHead_Slider); 
        }

        private void RootHead_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.RootHead_X, CharacterDetails.RootHead_Y, CharacterDetails.RootHead_Z, CharacterDetails.RootHead_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(RootHead_UpDown);
        }

        public void RootHead_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(RootHead);

            //Load Current Values for Slider
            CharacterDetails.RootHead_Toggle = true;
        }
        private void RootHead_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(RootHead_Slider);
            RemoveRoutedEventListener(RootHead_UpDown);
            CharacterDetails.RootHead_Rotate = false;
        }
#endregion
#region Jaw
        private void Jaw_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.Jaw_X, CharacterDetails.Jaw_Y, CharacterDetails.Jaw_Z, CharacterDetails.Jaw_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(Jaw_Slider);
        }

        private void Jaw_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.Jaw_X, CharacterDetails.Jaw_Y, CharacterDetails.Jaw_Z, CharacterDetails.Jaw_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(Jaw_UpDown);
        }

        public void Jaw_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(Jaw);

            //Load Current Values for Slider
            CharacterDetails.Jaw_Toggle = true;
        }
        private void Jaw_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(Jaw_Slider);
            RemoveRoutedEventListener(Jaw_UpDown);
            CharacterDetails.Jaw_Rotate = false;
        }
#endregion
#region EyelidLowerLeft
        private void EyelidLowerLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.EyelidLowerLeft_X, CharacterDetails.EyelidLowerLeft_Y, CharacterDetails.EyelidLowerLeft_Z, CharacterDetails.EyelidLowerLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EyelidLowerLeft_Slider);
        }

        private void EyelidLowerLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.EyelidLowerLeft_X, CharacterDetails.EyelidLowerLeft_Y, CharacterDetails.EyelidLowerLeft_Z, CharacterDetails.EyelidLowerLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EyelidLowerLeft_UpDown);
        }

        public void EyelidLowerLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EyelidLowerLeft);

            //Load Current Values for Slider
            CharacterDetails.EyelidLowerLeft_Toggle = true;
        }
        private void EyelidLowerLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(EyelidLowerLeft_Slider);
            RemoveRoutedEventListener(EyelidLowerLeft_UpDown);
            CharacterDetails.EyelidLowerLeft_Rotate = false;
        }
#endregion
#region EyelidLowerRight
        private void EyelidLowerRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.EyelidLowerRight_X, CharacterDetails.EyelidLowerRight_Y, CharacterDetails.EyelidLowerRight_Z, CharacterDetails.EyelidLowerRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EyelidLowerRight_Slider);
        }

        private void EyelidLowerRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.EyelidLowerRight_X, CharacterDetails.EyelidLowerRight_Y, CharacterDetails.EyelidLowerRight_Z, CharacterDetails.EyelidLowerRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EyelidLowerRight_UpDown);
        }

        public void EyelidLowerRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EyelidLowerRight);

            //Load Current Values for Slider
            CharacterDetails.EyelidLowerRight_Toggle = true;
        }
        private void EyelidLowerRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(EyelidLowerRight_Slider);
            RemoveRoutedEventListener(EyelidLowerRight_UpDown);
            CharacterDetails.EyelidLowerRight_Rotate = false;
        }
#endregion
#region EyeLeft
        private void EyeLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.EyeLeft_X, CharacterDetails.EyeLeft_Y, CharacterDetails.EyeLeft_Z, CharacterDetails.EyeLeft_W, bone_eye_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EyeLeft_Slider);
        }

        private void EyeLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.EyeLeft_X, CharacterDetails.EyeLeft_Y, CharacterDetails.EyeLeft_Z, CharacterDetails.EyeLeft_W, bone_eye_l);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EyeLeft_UpDown);
        }

        public void EyeLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EyeLeft);

            //Load Current Values for Slider
            CharacterDetails.EyeLeft_Toggle = true;
        }
        private void EyeLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(EyeLeft_Slider);
            RemoveRoutedEventListener(EyeLeft_UpDown);
            CharacterDetails.EyeLeft_Rotate = false;
        }
#endregion
#region EyeRight
        private void EyeRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.EyeRight_X, CharacterDetails.EyeRight_Y, CharacterDetails.EyeRight_Z, CharacterDetails.EyeRight_W, bone_eye_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EyeRight_Slider);
        }

        private void EyeRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.EyeRight_X, CharacterDetails.EyeRight_Y, CharacterDetails.EyeRight_Z, CharacterDetails.EyeRight_W, bone_eye_r);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EyeRight_UpDown);
        }

        public void EyeRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EyeRight);

            //Load Current Values for Slider
            CharacterDetails.EyeRight_Toggle = true;
        }
        private void EyeRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(EyeRight_Slider);
            RemoveRoutedEventListener(EyeRight_UpDown);
            CharacterDetails.EyeRight_Rotate = false;
        }
#endregion
#region Nose
        private void Nose_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.Nose_X, CharacterDetails.Nose_Y, CharacterDetails.Nose_Z, CharacterDetails.Nose_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(Nose_Slider);
        }

        private void Nose_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.Nose_X, CharacterDetails.Nose_Y, CharacterDetails.Nose_Z, CharacterDetails.Nose_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(Nose_UpDown);
        }

        public void Nose_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(Nose);

            //Load Current Values for Slider
            CharacterDetails.Nose_Toggle = true;
        }
        private void Nose_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(Nose_Slider);
            RemoveRoutedEventListener(Nose_UpDown);
            CharacterDetails.Nose_Rotate = false;
        }
#endregion
#region CheekLeft / HrothLipUpperLeft
        private void CheekLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.CheekLeft_X, CharacterDetails.CheekLeft_Y, CharacterDetails.CheekLeft_Z, CharacterDetails.CheekLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(CheekLeft_Slider);
        }

        private void CheekLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.CheekLeft_X, CharacterDetails.CheekLeft_Y, CharacterDetails.CheekLeft_Z, CharacterDetails.CheekLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(CheekLeft_UpDown);
        }

        private void HrothLipUpperLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.HrothLipUpperLeft_X, CharacterDetails.HrothLipUpperLeft_Y, CharacterDetails.HrothLipUpperLeft_Z, CharacterDetails.HrothLipUpperLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothLipUpperLeft_Slider);
        }

        private void HrothLipUpperLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.HrothLipUpperLeft_X, CharacterDetails.HrothLipUpperLeft_Y, CharacterDetails.HrothLipUpperLeft_Z, CharacterDetails.HrothLipUpperLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothLipUpperLeft_UpDown);
        }

        public void CheekLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(CheekLeft);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.CheekLeft_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothLipUpperLeft_Toggle = true;
        }
        private void CheekLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(CheekLeft_Slider);
            RemoveRoutedEventListener(CheekLeft_UpDown);
            RemoveRoutedEventListener(HrothLipUpperLeft_Slider);
            RemoveRoutedEventListener(HrothLipUpperLeft_UpDown);
            CharacterDetails.CheekLeft_Rotate = false;
            CharacterDetails.HrothLipUpperLeft_Rotate = false;
        }
#endregion
#region CheekRight / HrothLipUpperRight
        private void CheekRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.CheekRight_X, CharacterDetails.CheekRight_Y, CharacterDetails.CheekRight_Z, CharacterDetails.CheekRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(CheekRight_Slider);
        }

        private void CheekRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.CheekRight_X, CharacterDetails.CheekRight_Y, CharacterDetails.CheekRight_Z, CharacterDetails.CheekRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(CheekRight_UpDown);
        }

        private void HrothLipUpperRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.HrothLipUpperRight_X, CharacterDetails.HrothLipUpperRight_Y, CharacterDetails.HrothLipUpperRight_Z, CharacterDetails.HrothLipUpperRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothLipUpperRight_Slider);
        }

        private void HrothLipUpperRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.HrothLipUpperRight_X, CharacterDetails.HrothLipUpperRight_Y, CharacterDetails.HrothLipUpperRight_Z, CharacterDetails.HrothLipUpperRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothLipUpperRight_UpDown);
        }

        public void CheekRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(CheekRight);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.CheekRight_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothLipUpperRight_Toggle = true;
        }
        private void CheekRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(CheekRight_Slider);
            RemoveRoutedEventListener(CheekRight_UpDown);
            RemoveRoutedEventListener(HrothLipUpperRight_Slider);
            RemoveRoutedEventListener(HrothLipUpperRight_UpDown);
            CharacterDetails.CheekRight_Rotate = false;
            CharacterDetails.HrothLipUpperRight_Rotate = false;
        }
#endregion
#region LipsLeft / HrothLipsLeft
        private void LipsLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.LipsLeft_X, CharacterDetails.LipsLeft_Y, CharacterDetails.LipsLeft_Z, CharacterDetails.LipsLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(LipsLeft_Slider);
        }

        private void LipsLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.LipsLeft_X, CharacterDetails.LipsLeft_Y, CharacterDetails.LipsLeft_Z, CharacterDetails.LipsLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(LipsLeft_UpDown);
        }

        private void HrothLipsLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.HrothLipsLeft_X, CharacterDetails.HrothLipsLeft_Y, CharacterDetails.HrothLipsLeft_Z, CharacterDetails.HrothLipsLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothLipsLeft_Slider);
        }

        private void HrothLipsLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.HrothLipsLeft_X, CharacterDetails.HrothLipsLeft_Y, CharacterDetails.HrothLipsLeft_Z, CharacterDetails.HrothLipsLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothLipsLeft_UpDown);
        }

        public void LipsLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(LipsLeft);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.LipsLeft_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothLipsLeft_Toggle = true;
        }
        private void LipsLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(LipsLeft_Slider);
            RemoveRoutedEventListener(LipsLeft_UpDown);
            RemoveRoutedEventListener(HrothLipsLeft_Slider);
            RemoveRoutedEventListener(HrothLipsLeft_UpDown);
            CharacterDetails.LipsLeft_Rotate = false;
            CharacterDetails.HrothLipsLeft_Rotate = false;
        }
#endregion
#region LipsRight / HrothLipsRight
        private void LipsRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.LipsRight_X, CharacterDetails.LipsRight_Y, CharacterDetails.LipsRight_Z, CharacterDetails.LipsRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(LipsRight_Slider);
        }

        private void LipsRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.LipsRight_X, CharacterDetails.LipsRight_Y, CharacterDetails.LipsRight_Z, CharacterDetails.LipsRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(LipsRight_UpDown);
        }

        private void HrothLipsRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.HrothLipsRight_X, CharacterDetails.HrothLipsRight_Y, CharacterDetails.HrothLipsRight_Z, CharacterDetails.HrothLipsRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothLipsRight_Slider);
        }

        private void HrothLipsRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.HrothLipsRight_X, CharacterDetails.HrothLipsRight_Y, CharacterDetails.HrothLipsRight_Z, CharacterDetails.HrothLipsRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothLipsRight_UpDown);
        }

        public void LipsRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(LipsRight);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.LipsRight_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothLipsRight_Toggle = true;
        }
        private void LipsRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(LipsRight_Slider);
            RemoveRoutedEventListener(LipsRight_UpDown);
            RemoveRoutedEventListener(HrothLipsRight_Slider);
            RemoveRoutedEventListener(HrothLipsRight_UpDown);
            CharacterDetails.LipsRight_Rotate = false;
            CharacterDetails.HrothLipsRight_Rotate = false;
        }
#endregion
#region EyebrowLeft / HrothEyebrowLeft
        private void EyebrowLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.EyebrowLeft_X, CharacterDetails.EyebrowLeft_Y, CharacterDetails.EyebrowLeft_Z, CharacterDetails.EyebrowLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EyebrowLeft_Slider);
        }

        private void EyebrowLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.EyebrowLeft_X, CharacterDetails.EyebrowLeft_Y, CharacterDetails.EyebrowLeft_Z, CharacterDetails.EyebrowLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EyebrowLeft_UpDown);
        }

        private void HrothEyebrowLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.HrothEyebrowLeft_X, CharacterDetails.HrothEyebrowLeft_Y, CharacterDetails.HrothEyebrowLeft_Z, CharacterDetails.HrothEyebrowLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothEyebrowLeft_Slider);
        }

        private void HrothEyebrowLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.HrothEyebrowLeft_X, CharacterDetails.HrothEyebrowLeft_Y, CharacterDetails.HrothEyebrowLeft_Z, CharacterDetails.HrothEyebrowLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothEyebrowLeft_UpDown);
        }

        public void EyebrowLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EyebrowLeft);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.EyebrowLeft_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothEyebrowLeft_Toggle = true;
        }
        private void EyebrowLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(EyebrowLeft_Slider);
            RemoveRoutedEventListener(EyebrowLeft_UpDown);
            CharacterDetails.EyebrowLeft_Rotate = false;
            CharacterDetails.HrothEyebrowLeft_Rotate = false;
        }
#endregion
#region EyebrowRight / HrothEyebrowRight
        private void EyebrowRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.EyebrowRight_X, CharacterDetails.EyebrowRight_Y, CharacterDetails.EyebrowRight_Z, CharacterDetails.EyebrowRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EyebrowRight_Slider);
        }

        private void EyebrowRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.EyebrowRight_X, CharacterDetails.EyebrowRight_Y, CharacterDetails.EyebrowRight_Z, CharacterDetails.EyebrowRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EyebrowRight_UpDown);
        }

        private void HrothEyebrowRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.HrothEyebrowRight_X, CharacterDetails.HrothEyebrowRight_Y, CharacterDetails.HrothEyebrowRight_Z, CharacterDetails.HrothEyebrowRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothEyebrowRight_Slider);
        }

        private void HrothEyebrowRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.HrothEyebrowRight_X, CharacterDetails.HrothEyebrowRight_Y, CharacterDetails.HrothEyebrowRight_Z, CharacterDetails.HrothEyebrowRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothEyebrowRight_UpDown);
        }

        public void EyebrowRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EyebrowRight);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.EyebrowRight_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothEyebrowRight_Toggle = true;
        }
        private void EyebrowRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(EyebrowRight_Slider);
            RemoveRoutedEventListener(EyebrowRight_UpDown);
            RemoveRoutedEventListener(HrothEyebrowRight_Slider);
            RemoveRoutedEventListener(HrothEyebrowRight_UpDown);
            CharacterDetails.EyebrowRight_Rotate = false;
            CharacterDetails.HrothEyebrowRight_Rotate = false;
        }
#endregion
#region Bridge / HrothBridge
        private void Bridge_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.Bridge_X, CharacterDetails.Bridge_Y, CharacterDetails.Bridge_Z, CharacterDetails.Bridge_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(Bridge_Slider);
        }

        private void Bridge_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.Bridge_X, CharacterDetails.Bridge_Y, CharacterDetails.Bridge_Z, CharacterDetails.Bridge_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(Bridge_UpDown);
        }

        private void HrothBridge_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.HrothBridge_X, CharacterDetails.HrothBridge_Y, CharacterDetails.HrothBridge_Z, CharacterDetails.HrothBridge_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothBridge_Slider);
        }

        private void HrothBridge_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.HrothBridge_X, CharacterDetails.HrothBridge_Y, CharacterDetails.HrothBridge_Z, CharacterDetails.HrothBridge_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothBridge_UpDown);
        }

        public void Bridge_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(Bridge);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.Bridge_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothBridge_Toggle = true;
        }
        private void Bridge_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(Bridge_Slider);
            RemoveRoutedEventListener(Bridge_UpDown);
            RemoveRoutedEventListener(HrothBridge_Slider);
            RemoveRoutedEventListener(HrothBridge_UpDown);
            CharacterDetails.Bridge_Rotate = false;
            CharacterDetails.HrothBridge_Rotate = false;
        }
#endregion
#region BrowLeft / HrothBrowLeft
        private void BrowLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.BrowLeft_X, CharacterDetails.BrowLeft_Y, CharacterDetails.BrowLeft_Z, CharacterDetails.BrowLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(BrowLeft_Slider);
        }

        private void BrowLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.BrowLeft_X, CharacterDetails.BrowLeft_Y, CharacterDetails.BrowLeft_Z, CharacterDetails.BrowLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(BrowLeft_UpDown);
        }

        private void HrothBrowLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.HrothBrowLeft_X, CharacterDetails.HrothBrowLeft_Y, CharacterDetails.HrothBrowLeft_Z, CharacterDetails.HrothBrowLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothBrowLeft_Slider);
        }

        private void HrothBrowLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.HrothBrowLeft_X, CharacterDetails.HrothBrowLeft_Y, CharacterDetails.HrothBrowLeft_Z, CharacterDetails.HrothBrowLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothBrowLeft_UpDown);
        }

        public void BrowLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(BrowLeft);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.BrowLeft_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothBrowLeft_Toggle = true;
        }
        private void BrowLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(BrowLeft_Slider);
            RemoveRoutedEventListener(BrowLeft_UpDown);
            RemoveRoutedEventListener(HrothBrowLeft_Slider);
            RemoveRoutedEventListener(HrothBrowLeft_UpDown);
            CharacterDetails.BrowLeft_Rotate = false;
            CharacterDetails.HrothBrowLeft_Rotate = false;
        }
#endregion
#region BrowRight / HrothBrowRight
        private void BrowRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.BrowRight_X, CharacterDetails.BrowRight_Y, CharacterDetails.BrowRight_Z, CharacterDetails.BrowRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(BrowRight_Slider);
        }

        private void BrowRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.BrowRight_X, CharacterDetails.BrowRight_Y, CharacterDetails.BrowRight_Z, CharacterDetails.BrowRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(BrowRight_UpDown);
        }

        private void HrothBrowRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.HrothBrowRight_X, CharacterDetails.HrothBrowRight_Y, CharacterDetails.HrothBrowRight_Z, CharacterDetails.HrothBrowRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothBrowRight_Slider);
        }

        private void HrothBrowRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.HrothBrowRight_X, CharacterDetails.HrothBrowRight_Y, CharacterDetails.HrothBrowRight_Z, CharacterDetails.HrothBrowRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothBrowRight_UpDown);
        }

        public void BrowRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(BrowRight);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.BrowRight_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothBrowRight_Toggle = true;
        }
        private void BrowRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(HrothBrowRight_Slider);
            RemoveRoutedEventListener(HrothBrowRight_UpDown);
            RemoveRoutedEventListener(BrowRight_Slider);
            RemoveRoutedEventListener(BrowRight_UpDown);
            CharacterDetails.BrowRight_Rotate = false;
            CharacterDetails.HrothBrowRight_Rotate = false;
        }
#endregion
#region LipUpperA / HrothLipUpper
        private void LipUpperA_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.LipUpperA_X, CharacterDetails.LipUpperA_Y, CharacterDetails.LipUpperA_Z, CharacterDetails.LipUpperA_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(LipUpperA_Slider);
        }

        private void LipUpperA_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.LipUpperA_X, CharacterDetails.LipUpperA_Y, CharacterDetails.LipUpperA_Z, CharacterDetails.LipUpperA_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(LipUpperA_UpDown);
        }

        private void HrothLipUpper_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.HrothLipUpper_X, CharacterDetails.HrothLipUpper_Y, CharacterDetails.HrothLipUpper_Z, CharacterDetails.HrothLipUpper_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothLipUpper_Slider);
        }

        private void HrothLipUpper_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.HrothLipUpper_X, CharacterDetails.HrothLipUpper_Y, CharacterDetails.HrothLipUpper_Z, CharacterDetails.HrothLipUpper_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothLipUpper_UpDown);
        }

        public void LipUpperA_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(LipUpperA);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.LipUpperA_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothLipUpper_Toggle = true;
        }
        private void LipUpperA_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(HrothLipUpper_Slider);
            RemoveRoutedEventListener(HrothLipUpper_UpDown);
            RemoveRoutedEventListener(LipUpperA_Slider);
            RemoveRoutedEventListener(LipUpperA_UpDown);
            CharacterDetails.LipUpperA_Rotate = false;
            CharacterDetails.HrothLipUpper_Rotate = false;
        }
#endregion
#region EyelidUpperLeft / HrothEyelidUpperLeft
        private void EyelidUpperLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.EyelidUpperLeft_X, CharacterDetails.EyelidUpperLeft_Y, CharacterDetails.EyelidUpperLeft_Z, CharacterDetails.EyelidUpperLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EyelidUpperLeft_Slider);
        }

        private void EyelidUpperLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.EyelidUpperLeft_X, CharacterDetails.EyelidUpperLeft_Y, CharacterDetails.EyelidUpperLeft_Z, CharacterDetails.EyelidUpperLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EyelidUpperLeft_UpDown);
        }

        private void HrothEyelidUpperLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.HrothEyelidUpperLeft_X, CharacterDetails.HrothEyelidUpperLeft_Y, CharacterDetails.HrothEyelidUpperLeft_Z, CharacterDetails.HrothEyelidUpperLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothEyelidUpperLeft_Slider);
        }

        private void HrothEyelidUpperLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.HrothEyelidUpperLeft_X, CharacterDetails.HrothEyelidUpperLeft_Y, CharacterDetails.HrothEyelidUpperLeft_Z, CharacterDetails.HrothEyelidUpperLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothEyelidUpperLeft_UpDown);
        }

        public void EyelidUpperLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EyelidUpperLeft);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.EyelidUpperLeft_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothEyelidUpperLeft_Toggle = true;
        }
        private void EyelidUpperLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(EyelidUpperLeft_Slider);
            RemoveRoutedEventListener(EyelidUpperLeft_UpDown);
            RemoveRoutedEventListener(HrothEyelidUpperLeft_Slider);
            RemoveRoutedEventListener(HrothEyelidUpperLeft_UpDown);
            CharacterDetails.EyelidUpperLeft_Rotate = false;
            CharacterDetails.HrothEyelidUpperLeft_Rotate = false;
        }
#endregion
#region EyelidUpperRight / HrothEyelidUpperRight
        private void EyelidUpperRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.EyelidUpperRight_X, CharacterDetails.EyelidUpperRight_Y, CharacterDetails.EyelidUpperRight_Z, CharacterDetails.EyelidUpperRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EyelidUpperRight_Slider);
        }

        private void EyelidUpperRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.EyelidUpperRight_X, CharacterDetails.EyelidUpperRight_Y, CharacterDetails.EyelidUpperRight_Z, CharacterDetails.EyelidUpperRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(EyelidUpperRight_UpDown);
        }

        private void HrothEyelidUpperRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.HrothEyelidUpperRight_X, CharacterDetails.HrothEyelidUpperRight_Y, CharacterDetails.HrothEyelidUpperRight_Z, CharacterDetails.HrothEyelidUpperRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothEyelidUpperRight_Slider);
        }

        private void HrothEyelidUpperRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.HrothEyelidUpperRight_X, CharacterDetails.HrothEyelidUpperRight_Y, CharacterDetails.HrothEyelidUpperRight_Z, CharacterDetails.HrothEyelidUpperRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothEyelidUpperRight_UpDown);
        }

        public void EyelidUpperRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(EyelidUpperRight);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 7) CharacterDetails.EyelidUpperRight_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothEyelidUpperRight_Toggle = true;
        }
        private void EyelidUpperRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(HrothEyelidUpperRight_Slider);
            RemoveRoutedEventListener(HrothEyelidUpperRight_UpDown);
            RemoveRoutedEventListener(EyelidUpperRight_Slider);
            RemoveRoutedEventListener(EyelidUpperRight_UpDown);
            CharacterDetails.EyelidUpperRight_Rotate = false;
            CharacterDetails.HrothEyelidUpperRight_Rotate = false;
        }
#endregion
#region LipLowerA / HrothLipLower / VieraLipLowerA
        private void LipLowerA_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.LipLowerA_X, CharacterDetails.LipLowerA_Y, CharacterDetails.LipLowerA_Z, CharacterDetails.LipLowerA_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(LipLowerA_Slider);
        }

        private void LipLowerA_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.LipLowerA_X, CharacterDetails.LipLowerA_Y, CharacterDetails.LipLowerA_Z, CharacterDetails.LipLowerA_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(LipLowerA_UpDown);
        }

        private void HrothLipLower_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.HrothLipLower_X, CharacterDetails.HrothLipLower_Y, CharacterDetails.HrothLipLower_Z, CharacterDetails.HrothLipLower_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothLipLower_Slider);
        }

        private void HrothLipLower_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.HrothLipLower_X, CharacterDetails.HrothLipLower_Y, CharacterDetails.HrothLipLower_Z, CharacterDetails.HrothLipLower_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothLipLower_UpDown);
        }

        private void VieraLipLowerA_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.VieraLipLowerA_X, CharacterDetails.VieraLipLowerA_Y, CharacterDetails.VieraLipLowerA_Z, CharacterDetails.VieraLipLowerA_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraLipLowerA_Slider);
        }

        private void VieraLipLowerA_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.VieraLipLowerA_X, CharacterDetails.VieraLipLowerA_Y, CharacterDetails.VieraLipLowerA_Z, CharacterDetails.VieraLipLowerA_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraLipLowerA_UpDown);
        }

        public void LipLowerA_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(LipLowerA);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value < 7) CharacterDetails.LipLowerA_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothLipLower_Toggle = true;
            if (CharacterDetails.Race.value == 8) CharacterDetails.VieraLipLowerA_Toggle = true;
        }
        private void LipLowerA_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(VieraLipLowerA_Slider);
            RemoveRoutedEventListener(VieraLipLowerA_UpDown);
            RemoveRoutedEventListener(HrothLipLower_Slider);
            RemoveRoutedEventListener(HrothLipLower_UpDown);
            RemoveRoutedEventListener(LipLowerA_Slider);
            RemoveRoutedEventListener(LipLowerA_UpDown);
            CharacterDetails.LipLowerA_Rotate = false;
            CharacterDetails.HrothLipLower_Rotate = false;
            CharacterDetails.VieraLipLowerA_Rotate = false;
        }
#endregion
#region LipUpperB / HrothJawUpper / VieraLipUpperB
        private void LipUpperB_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.LipUpperB_X, CharacterDetails.LipUpperB_Y, CharacterDetails.LipUpperB_Z, CharacterDetails.LipUpperB_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(LipUpperB_Slider);
        }

        private void LipUpperB_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.LipUpperB_X, CharacterDetails.LipUpperB_Y, CharacterDetails.LipUpperB_Z, CharacterDetails.LipUpperB_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(LipUpperB_UpDown);
        }

        private void HrothJawUpper_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.HrothJawUpper_X, CharacterDetails.HrothJawUpper_Y, CharacterDetails.HrothJawUpper_Z, CharacterDetails.HrothJawUpper_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothJawUpper_Slider);
        }

        private void HrothJawUpper_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.HrothJawUpper_X, CharacterDetails.HrothJawUpper_Y, CharacterDetails.HrothJawUpper_Z, CharacterDetails.HrothJawUpper_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothJawUpper_UpDown);
        }

        private void VieraLipUpperB_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.VieraLipUpperB_X, CharacterDetails.VieraLipUpperB_Y, CharacterDetails.VieraLipUpperB_Z, CharacterDetails.VieraLipUpperB_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraLipUpperB_Slider);
        }

        private void VieraLipUpperB_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.VieraLipUpperB_X, CharacterDetails.VieraLipUpperB_Y, CharacterDetails.VieraLipUpperB_Z, CharacterDetails.VieraLipUpperB_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraLipUpperB_UpDown);
        }

        public void LipUpperB_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(LipUpperB);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value < 7) CharacterDetails.LipUpperB_Toggle = true;
            if (CharacterDetails.Race.value == 7) CharacterDetails.HrothJawUpper_Toggle = true;
            if (CharacterDetails.Race.value == 8) CharacterDetails.VieraLipUpperB_Toggle = true;
        }
        private void LipUpperB_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(VieraLipUpperB_Slider);
            RemoveRoutedEventListener(VieraLipUpperB_UpDown);
            RemoveRoutedEventListener(HrothJawUpper_Slider);
            RemoveRoutedEventListener(HrothJawUpper_UpDown);
            RemoveRoutedEventListener(LipUpperB_Slider);
            RemoveRoutedEventListener(LipUpperB_UpDown);
            CharacterDetails.LipUpperB_Rotate = false;
            CharacterDetails.HrothJawUpper_Rotate = false;
            CharacterDetails.VieraLipUpperB_Rotate = false;
        }
#endregion
#region LipLowerB / VieraLipLowerB
        private void LipLowerB_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.LipLowerB_X, CharacterDetails.LipLowerB_Y, CharacterDetails.LipLowerB_Z, CharacterDetails.LipLowerB_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(LipLowerB_Slider);
        }

        private void LipLowerB_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.LipLowerB_X, CharacterDetails.LipLowerB_Y, CharacterDetails.LipLowerB_Z, CharacterDetails.LipLowerB_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(LipLowerB_UpDown);
        }

        private void VieraLipLowerB_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.VieraLipLowerB_X, CharacterDetails.VieraLipLowerB_Y, CharacterDetails.VieraLipLowerB_Z, CharacterDetails.VieraLipLowerB_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraLipLowerB_Slider);
        }

        private void VieraLipLowerB_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.VieraLipLowerB_X, CharacterDetails.VieraLipLowerB_Y, CharacterDetails.VieraLipLowerB_Z, CharacterDetails.VieraLipLowerB_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraLipLowerB_UpDown);
        }

        public void LipLowerB_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(LipLowerB);

            //Load Current Values for Slider
            if (CharacterDetails.Race.value != 8) CharacterDetails.LipLowerB_Toggle = true;
            if (CharacterDetails.Race.value == 8) CharacterDetails.VieraLipLowerB_Toggle = true;
        }
        private void LipLowerB_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(VieraLipLowerB_Slider);
            RemoveRoutedEventListener(VieraLipLowerB_UpDown);
            RemoveRoutedEventListener(LipLowerB_Slider);
            RemoveRoutedEventListener(LipLowerB_UpDown);
            CharacterDetails.LipLowerB_Rotate = false;
            CharacterDetails.VieraLipLowerB_Rotate = false;
        }
#endregion
#region HrothWhiskersLeft
        private void HrothWhiskersLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.HrothWhiskersLeft_X, CharacterDetails.HrothWhiskersLeft_Y, CharacterDetails.HrothWhiskersLeft_Z, CharacterDetails.HrothWhiskersLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothWhiskersLeft_Slider);
        }

        private void HrothWhiskersLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.HrothWhiskersLeft_X, CharacterDetails.HrothWhiskersLeft_Y, CharacterDetails.HrothWhiskersLeft_Z, CharacterDetails.HrothWhiskersLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothWhiskersLeft_UpDown);
        }

        public void HrothWhiskersLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(HrothWhiskersLeft);

            //Load Current Values for Slider
            CharacterDetails.HrothWhiskersLeft_Toggle = true;
        }
        private void HrothWhiskersLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(HrothWhiskersLeft_Slider);
            RemoveRoutedEventListener(HrothWhiskersLeft_UpDown);
            CharacterDetails.HrothWhiskersLeft_Rotate = false;
        }
#endregion
#region HrothWhiskersRight
        private void HrothWhiskersRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.HrothWhiskersRight_X, CharacterDetails.HrothWhiskersRight_Y, CharacterDetails.HrothWhiskersRight_Z, CharacterDetails.HrothWhiskersRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothWhiskersRight_Slider);
        }

        private void HrothWhiskersRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.HrothWhiskersRight_X, CharacterDetails.HrothWhiskersRight_Y, CharacterDetails.HrothWhiskersRight_Z, CharacterDetails.HrothWhiskersRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(HrothWhiskersRight_UpDown);
        }

        public void HrothWhiskersRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(HrothWhiskersRight);

            //Load Current Values for Slider
            CharacterDetails.HrothWhiskersRight_Toggle = true;
        }
        private void HrothWhiskersRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(HrothWhiskersRight_Slider);
            RemoveRoutedEventListener(HrothWhiskersRight_UpDown);
            CharacterDetails.HrothWhiskersRight_Rotate = false;
        }
#endregion
#region VieraEarALeft
        private void VieraEar01ALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.VieraEar01ALeft_X, CharacterDetails.VieraEar01ALeft_Y, CharacterDetails.VieraEar01ALeft_Z, CharacterDetails.VieraEar01ALeft_W, bone_viera_ear_l[0]);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar01ALeft_Slider);
        }

        private void VieraEar01ALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.VieraEar01ALeft_X, CharacterDetails.VieraEar01ALeft_Y, CharacterDetails.VieraEar01ALeft_Z, CharacterDetails.VieraEar01ALeft_W, bone_viera_ear_l[0]);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar01ALeft_UpDown);
        }

        private void VieraEar02ALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.VieraEar02ALeft_X, CharacterDetails.VieraEar02ALeft_Y, CharacterDetails.VieraEar02ALeft_Z, CharacterDetails.VieraEar02ALeft_W, bone_viera_ear_l[2]);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar02ALeft_Slider);
        }

        private void VieraEar02ALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.VieraEar02ALeft_X, CharacterDetails.VieraEar02ALeft_Y, CharacterDetails.VieraEar02ALeft_Z, CharacterDetails.VieraEar02ALeft_W, bone_viera_ear_l[2]);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar02ALeft_UpDown);
        }

        private void VieraEar03ALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.VieraEar03ALeft_X, CharacterDetails.VieraEar03ALeft_Y, CharacterDetails.VieraEar03ALeft_Z, CharacterDetails.VieraEar03ALeft_W, bone_viera_ear_l[3]);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar03ALeft_Slider);
        }

        private void VieraEar03ALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.VieraEar03ALeft_X, CharacterDetails.VieraEar03ALeft_Y, CharacterDetails.VieraEar03ALeft_Z, CharacterDetails.VieraEar03ALeft_W, bone_viera_ear_l[3]);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar03ALeft_UpDown);
        }

        private void VieraEar04ALeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.VieraEar04ALeft_X, CharacterDetails.VieraEar04ALeft_Y, CharacterDetails.VieraEar04ALeft_Z, CharacterDetails.VieraEar04ALeft_W, bone_viera_ear_l[4]);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar04ALeft_Slider);
        }

        private void VieraEar04ALeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.VieraEar04ALeft_X, CharacterDetails.VieraEar04ALeft_Y, CharacterDetails.VieraEar04ALeft_Z, CharacterDetails.VieraEar04ALeft_W, bone_viera_ear_l[4]);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar04ALeft_UpDown);
        }

        public void VieraEarALeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(VieraEarALeft);

            //Load Current Values for Slider
            if (CharacterDetails.TailType.value == 0) CharacterDetails.VieraEar01ALeft_Toggle = true;
            if (CharacterDetails.TailType.value == 1) CharacterDetails.VieraEar01ALeft_Toggle = true;
            if (CharacterDetails.TailType.value == 2) CharacterDetails.VieraEar02ALeft_Toggle = true;
            if (CharacterDetails.TailType.value == 3) CharacterDetails.VieraEar03ALeft_Toggle = true;
            if (CharacterDetails.TailType.value == 4) CharacterDetails.VieraEar04ALeft_Toggle = true;
        }
        private void VieraEarALeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(VieraEar04ALeft_Slider);
            RemoveRoutedEventListener(VieraEar04ALeft_UpDown);
            RemoveRoutedEventListener(VieraEar03ALeft_Slider);
            RemoveRoutedEventListener(VieraEar03ALeft_UpDown);
            RemoveRoutedEventListener(VieraEar02ALeft_Slider);
            RemoveRoutedEventListener(VieraEar02ALeft_UpDown);
            RemoveRoutedEventListener(VieraEar01ALeft_Slider);
            RemoveRoutedEventListener(VieraEar01ALeft_UpDown);
            CharacterDetails.VieraEar01ALeft_Rotate = false;
            CharacterDetails.VieraEar02ALeft_Rotate = false;
            CharacterDetails.VieraEar03ALeft_Rotate = false;
            CharacterDetails.VieraEar04ALeft_Rotate = false;
        }
#endregion
#region VieraEarARight
        private void VieraEar01ARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.VieraEar01ARight_X, CharacterDetails.VieraEar01ARight_Y, CharacterDetails.VieraEar01ARight_Z, CharacterDetails.VieraEar01ARight_W, bone_viera_ear_r[0]);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar01ARight_Slider);
        }

        private void VieraEar01ARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.VieraEar01ARight_X, CharacterDetails.VieraEar01ARight_Y, CharacterDetails.VieraEar01ARight_Z, CharacterDetails.VieraEar01ARight_W, bone_viera_ear_r[0]);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar01ARight_UpDown);
        }

        private void VieraEar02ARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.VieraEar02ARight_X, CharacterDetails.VieraEar02ARight_Y, CharacterDetails.VieraEar02ARight_Z, CharacterDetails.VieraEar02ARight_W, bone_viera_ear_r[2]);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar02ARight_Slider);
        }

        private void VieraEar02ARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.VieraEar02ARight_X, CharacterDetails.VieraEar02ARight_Y, CharacterDetails.VieraEar02ARight_Z, CharacterDetails.VieraEar02ARight_W, bone_viera_ear_r[2]);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar02ARight_UpDown);
        }

        private void VieraEar03ARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.VieraEar03ARight_X, CharacterDetails.VieraEar03ARight_Y, CharacterDetails.VieraEar03ARight_Z, CharacterDetails.VieraEar03ARight_W, bone_viera_ear_r[3]);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar03ARight_Slider);
        }

        private void VieraEar03ARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.VieraEar03ARight_X, CharacterDetails.VieraEar03ARight_Y, CharacterDetails.VieraEar03ARight_Z, CharacterDetails.VieraEar03ARight_W, bone_viera_ear_r[3]);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar03ARight_UpDown);
        }

        private void VieraEar04ARight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.VieraEar04ARight_X, CharacterDetails.VieraEar04ARight_Y, CharacterDetails.VieraEar04ARight_Z, CharacterDetails.VieraEar04ARight_W, bone_viera_ear_r[4]);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar04ARight_Slider);
        }

        private void VieraEar04ARight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.VieraEar04ARight_X, CharacterDetails.VieraEar04ARight_Y, CharacterDetails.VieraEar04ARight_Z, CharacterDetails.VieraEar04ARight_W, bone_viera_ear_r[4]);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar04ARight_UpDown);
        }

        public void VieraEarARight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(VieraEarARight);

            //Load Current Values for Slider
            if (CharacterDetails.TailType.value == 0) CharacterDetails.VieraEar01ARight_Toggle = true;
            if (CharacterDetails.TailType.value == 1) CharacterDetails.VieraEar01ARight_Toggle = true;
            if (CharacterDetails.TailType.value == 2) CharacterDetails.VieraEar02ARight_Toggle = true;
            if (CharacterDetails.TailType.value == 3) CharacterDetails.VieraEar03ARight_Toggle = true;
            if (CharacterDetails.TailType.value == 4) CharacterDetails.VieraEar04ARight_Toggle = true;
        }
        private void VieraEarARight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(VieraEar04ARight_Slider);
            RemoveRoutedEventListener(VieraEar04ARight_UpDown);
            RemoveRoutedEventListener(VieraEar03ARight_Slider);
            RemoveRoutedEventListener(VieraEar03ARight_UpDown);
            RemoveRoutedEventListener(VieraEar02ARight_Slider);
            RemoveRoutedEventListener(VieraEar02ARight_UpDown);
            RemoveRoutedEventListener(VieraEar01ARight_Slider);
            RemoveRoutedEventListener(VieraEar01ARight_UpDown);
            CharacterDetails.VieraEar01ARight_Rotate = false;
            CharacterDetails.VieraEar02ARight_Rotate = false;
            CharacterDetails.VieraEar03ARight_Rotate = false;
            CharacterDetails.VieraEar04ARight_Rotate = false;
        }
#endregion
#region VieraEarBLeft
        private void VieraEar01BLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.VieraEar01BLeft_X, CharacterDetails.VieraEar01BLeft_Y, CharacterDetails.VieraEar01BLeft_Z, CharacterDetails.VieraEar01BLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar01BLeft_Slider);
        }

        private void VieraEar01BLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.VieraEar01BLeft_X, CharacterDetails.VieraEar01BLeft_Y, CharacterDetails.VieraEar01BLeft_Z, CharacterDetails.VieraEar01BLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar01BLeft_UpDown);
        }

        private void VieraEar02BLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.VieraEar02BLeft_X, CharacterDetails.VieraEar02BLeft_Y, CharacterDetails.VieraEar02BLeft_Z, CharacterDetails.VieraEar02BLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar02BLeft_Slider);
        }

        private void VieraEar02BLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.VieraEar02BLeft_X, CharacterDetails.VieraEar02BLeft_Y, CharacterDetails.VieraEar02BLeft_Z, CharacterDetails.VieraEar02BLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar02BLeft_UpDown);
        }

        private void VieraEar03BLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.VieraEar03BLeft_X, CharacterDetails.VieraEar03BLeft_Y, CharacterDetails.VieraEar03BLeft_Z, CharacterDetails.VieraEar03BLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar03BLeft_Slider);
        }

        private void VieraEar03BLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.VieraEar03BLeft_X, CharacterDetails.VieraEar03BLeft_Y, CharacterDetails.VieraEar03BLeft_Z, CharacterDetails.VieraEar03BLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar03BLeft_UpDown);
        }

        private void VieraEar04BLeft_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.VieraEar04BLeft_X, CharacterDetails.VieraEar04BLeft_Y, CharacterDetails.VieraEar04BLeft_Z, CharacterDetails.VieraEar04BLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar04BLeft_Slider);
        }

        private void VieraEar04BLeft_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.VieraEar04BLeft_X, CharacterDetails.VieraEar04BLeft_Y, CharacterDetails.VieraEar04BLeft_Z, CharacterDetails.VieraEar04BLeft_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar04BLeft_UpDown);
        }

        public void VieraEarBLeft_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(VieraEarBLeft);

            //Load Current Values for Slider
            if (CharacterDetails.TailType.value == 0) CharacterDetails.VieraEar01BLeft_Toggle = true;
            if (CharacterDetails.TailType.value == 1) CharacterDetails.VieraEar01BLeft_Toggle = true;
            if (CharacterDetails.TailType.value == 2) CharacterDetails.VieraEar02BLeft_Toggle = true;
            if (CharacterDetails.TailType.value == 3) CharacterDetails.VieraEar03BLeft_Toggle = true;
            if (CharacterDetails.TailType.value == 4) CharacterDetails.VieraEar04BLeft_Toggle = true;
        }
        private void VieraEarBLeft_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(VieraEar04BLeft_Slider);
            RemoveRoutedEventListener(VieraEar04BLeft_UpDown);
            RemoveRoutedEventListener(VieraEar03BLeft_Slider);
            RemoveRoutedEventListener(VieraEar03BLeft_UpDown);
            RemoveRoutedEventListener(VieraEar02BLeft_Slider);
            RemoveRoutedEventListener(VieraEar02BLeft_UpDown);
            RemoveRoutedEventListener(VieraEar01BLeft_Slider);
            RemoveRoutedEventListener(VieraEar01BLeft_UpDown);
            CharacterDetails.VieraEar01BLeft_Rotate = false;
            CharacterDetails.VieraEar02BLeft_Rotate = false;
            CharacterDetails.VieraEar03BLeft_Rotate = false;
            CharacterDetails.VieraEar04BLeft_Rotate = false;
        }
#endregion
#region VieraEarBRight
        private void VieraEar01BRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.VieraEar01BRight_X, CharacterDetails.VieraEar01BRight_Y, CharacterDetails.VieraEar01BRight_Z, CharacterDetails.VieraEar01BRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar01BRight_Slider);
        }

        private void VieraEar01BRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.VieraEar01BRight_X, CharacterDetails.VieraEar01BRight_Y, CharacterDetails.VieraEar01BRight_Z, CharacterDetails.VieraEar01BRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar01BRight_UpDown);
        }

        private void VieraEar02BRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.VieraEar02BRight_X, CharacterDetails.VieraEar02BRight_Y, CharacterDetails.VieraEar02BRight_Z, CharacterDetails.VieraEar02BRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar02BRight_Slider);
        }

        private void VieraEar02BRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.VieraEar02BRight_X, CharacterDetails.VieraEar02BRight_Y, CharacterDetails.VieraEar02BRight_Z, CharacterDetails.VieraEar02BRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar02BRight_UpDown);
        }

        private void VieraEar03BRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.VieraEar03BRight_X, CharacterDetails.VieraEar03BRight_Y, CharacterDetails.VieraEar03BRight_Z, CharacterDetails.VieraEar03BRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar03BRight_Slider);
        }

        private void VieraEar03BRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.VieraEar03BRight_X, CharacterDetails.VieraEar03BRight_Y, CharacterDetails.VieraEar03BRight_Z, CharacterDetails.VieraEar03BRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar03BRight_UpDown);
        }

        private void VieraEar04BRight_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.VieraEar04BRight_X, CharacterDetails.VieraEar04BRight_Y, CharacterDetails.VieraEar04BRight_Z, CharacterDetails.VieraEar04BRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar04BRight_Slider);
        }

        private void VieraEar04BRight_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.VieraEar04BRight_X, CharacterDetails.VieraEar04BRight_Y, CharacterDetails.VieraEar04BRight_Z, CharacterDetails.VieraEar04BRight_W);
            // Remove listeners for value changed.
            RemoveRoutedEventListener(VieraEar04BRight_UpDown);
        }

        public void VieraEarBRight_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(VieraEarBRight);

            //Load Current Values for Slider
            if (CharacterDetails.TailType.value == 0) CharacterDetails.VieraEar01BRight_Toggle = true;
            if (CharacterDetails.TailType.value == 1) CharacterDetails.VieraEar01BRight_Toggle = true;
            if (CharacterDetails.TailType.value == 2) CharacterDetails.VieraEar02BRight_Toggle = true;
            if (CharacterDetails.TailType.value == 3) CharacterDetails.VieraEar03BRight_Toggle = true;
            if (CharacterDetails.TailType.value == 4) CharacterDetails.VieraEar04BRight_Toggle = true;
        }
        private void VieraEarBRight_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(VieraEar04BRight_Slider);
            RemoveRoutedEventListener(VieraEar04BRight_UpDown);
            RemoveRoutedEventListener(VieraEar03BRight_Slider);
            RemoveRoutedEventListener(VieraEar03BRight_UpDown);
            RemoveRoutedEventListener(VieraEar02BRight_Slider);
            RemoveRoutedEventListener(VieraEar02BRight_UpDown);
            RemoveRoutedEventListener(VieraEar01BRight_Slider);
            RemoveRoutedEventListener(VieraEar01BRight_UpDown);
            CharacterDetails.VieraEar01BRight_Rotate = false;
            CharacterDetails.VieraEar02BRight_Rotate = false;
            CharacterDetails.VieraEar03BRight_Rotate = false;
            CharacterDetails.VieraEar04BRight_Rotate = false;
        }
#endregion

#region ExHairA
        private void ExHairA_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExHairA_X, CharacterDetails.ExHairA_Y, CharacterDetails.ExHairA_Z, CharacterDetails.ExHairA_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairA_Slider);
        }

        private void ExHairA_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExHairA_X, CharacterDetails.ExHairA_Y, CharacterDetails.ExHairA_Z, CharacterDetails.ExHairA_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairA_UpDown);
        }

        public void ExHairA_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairA);

            //Load Current Values for Slider
            CharacterDetails.ExHairA_Toggle = true;
        }
        private void ExHairA_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExHairA_Slider);
            RemoveRoutedEventListener(ExHairA_UpDown);
            CharacterDetails.ExHairA_Rotate = false;
        }
#endregion
#region ExHairB
        private void ExHairB_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExHairB_X, CharacterDetails.ExHairB_Y, CharacterDetails.ExHairB_Z, CharacterDetails.ExHairB_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairB_Slider);
        }

        private void ExHairB_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExHairB_X, CharacterDetails.ExHairB_Y, CharacterDetails.ExHairB_Z, CharacterDetails.ExHairB_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairB_UpDown);
        }

        public void ExHairB_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairB);

            //Load Current Values for Slider
            CharacterDetails.ExHairB_Toggle = true;
        }
        private void ExHairB_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExHairB_Slider);
            RemoveRoutedEventListener(ExHairB_UpDown);
            CharacterDetails.ExHairB_Rotate = false;
        }
#endregion
#region ExHairC
        private void ExHairC_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExHairC_X, CharacterDetails.ExHairC_Y, CharacterDetails.ExHairC_Z, CharacterDetails.ExHairC_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairC_Slider);
            RemoveRoutedEventListener(ExHairC_UpDown);
        }

        private void ExHairC_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExHairC_X, CharacterDetails.ExHairC_Y, CharacterDetails.ExHairC_Z, CharacterDetails.ExHairC_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairC_Slider);
            RemoveRoutedEventListener(ExHairC_UpDown);
        }

        public void ExHairC_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairC);

            //Load Current Values for Slider
            CharacterDetails.ExHairC_Toggle = true;
        }
        private void ExHairC_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExHairC_Slider);
            RemoveRoutedEventListener(ExHairC_UpDown);
            CharacterDetails.ExHairC_Rotate = false;
        }
#endregion
#region ExHairD
        private void ExHairD_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExHairD_X, CharacterDetails.ExHairD_Y, CharacterDetails.ExHairD_Z, CharacterDetails.ExHairD_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairD_Slider);
        }

        private void ExHairD_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExHairD_X, CharacterDetails.ExHairD_Y, CharacterDetails.ExHairD_Z, CharacterDetails.ExHairD_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairD_UpDown);
        }

        public void ExHairD_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairD);

            //Load Current Values for Slider
            CharacterDetails.ExHairD_Toggle = true;
        }
        private void ExHairD_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExHairD_Slider);
            RemoveRoutedEventListener(ExHairD_UpDown);
            CharacterDetails.ExHairD_Rotate = false;
        }
#endregion
#region ExHairE
        private void ExHairE_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExHairE_X, CharacterDetails.ExHairE_Y, CharacterDetails.ExHairE_Z, CharacterDetails.ExHairE_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairE_Slider);
        }

        private void ExHairE_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExHairE_X, CharacterDetails.ExHairE_Y, CharacterDetails.ExHairE_Z, CharacterDetails.ExHairE_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairE_UpDown);
        }

        public void ExHairE_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairE);

            //Load Current Values for Slider
            CharacterDetails.ExHairE_Toggle = true;
        }
        private void ExHairE_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExHairE_Slider);
            RemoveRoutedEventListener(ExHairE_UpDown);
            CharacterDetails.ExHairE_Rotate = false;
        }
#endregion
#region ExHairF
        private void ExHairF_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExHairF_X, CharacterDetails.ExHairF_Y, CharacterDetails.ExHairF_Z, CharacterDetails.ExHairF_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairF_Slider);
        }

        private void ExHairF_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExHairF_X, CharacterDetails.ExHairF_Y, CharacterDetails.ExHairF_Z, CharacterDetails.ExHairF_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairF_UpDown);
        }

        public void ExHairF_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairF);

            //Load Current Values for Slider
            CharacterDetails.ExHairF_Toggle = true;
        }
        private void ExHairF_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExHairF_Slider);
            RemoveRoutedEventListener(ExHairF_UpDown);
            CharacterDetails.ExHairF_Rotate = false;
        }
#endregion
#region ExHairG
        private void ExHairG_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExHairG_X, CharacterDetails.ExHairG_Y, CharacterDetails.ExHairG_Z, CharacterDetails.ExHairG_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairG_Slider);
        }

        private void ExHairG_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExHairG_X, CharacterDetails.ExHairG_Y, CharacterDetails.ExHairG_Z, CharacterDetails.ExHairG_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairG_UpDown);
        }

        public void ExHairG_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairG);

            //Load Current Values for Slider
            CharacterDetails.ExHairG_Toggle = true;
        }
        private void ExHairG_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExHairG_Slider);
            RemoveRoutedEventListener(ExHairG_UpDown);
            CharacterDetails.ExHairG_Rotate = false;
        }
#endregion
#region ExHairH
        private void ExHairH_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExHairH_X, CharacterDetails.ExHairH_Y, CharacterDetails.ExHairH_Z, CharacterDetails.ExHairH_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairH_Slider);
        }

        private void ExHairH_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExHairH_X, CharacterDetails.ExHairH_Y, CharacterDetails.ExHairH_Z, CharacterDetails.ExHairH_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairH_UpDown);
        }

        public void ExHairH_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairH);

            //Load Current Values for Slider
            CharacterDetails.ExHairH_Toggle = true;
        }
        private void ExHairH_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExHairH_Slider);
            RemoveRoutedEventListener(ExHairH_UpDown);
            CharacterDetails.ExHairH_Rotate = false;
        }
#endregion
#region ExHairI
        private void ExHairI_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExHairI_X, CharacterDetails.ExHairI_Y, CharacterDetails.ExHairI_Z, CharacterDetails.ExHairI_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairI_Slider);
        }

        private void ExHairI_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExHairI_X, CharacterDetails.ExHairI_Y, CharacterDetails.ExHairI_Z, CharacterDetails.ExHairI_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairI_UpDown);
        }

        public void ExHairI_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairI);

            //Load Current Values for Slider
            CharacterDetails.ExHairI_Toggle = true;
        }
        private void ExHairI_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExHairI_Slider);
            RemoveRoutedEventListener(ExHairI_UpDown);
            CharacterDetails.ExHairI_Rotate = false;
        }
#endregion
#region ExHairJ
        private void ExHairJ_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExHairJ_X, CharacterDetails.ExHairJ_Y, CharacterDetails.ExHairJ_Z, CharacterDetails.ExHairJ_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairJ_Slider);
        }

        private void ExHairJ_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExHairJ_X, CharacterDetails.ExHairJ_Y, CharacterDetails.ExHairJ_Z, CharacterDetails.ExHairJ_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairJ_UpDown);
        }

        public void ExHairJ_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairJ);

            //Load Current Values for Slider
            CharacterDetails.ExHairJ_Toggle = true;
        }
        private void ExHairJ_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExHairJ_Slider);
            RemoveRoutedEventListener(ExHairJ_UpDown);
            CharacterDetails.ExHairJ_Rotate = false;
        }
#endregion
#region ExHairK
        private void ExHairK_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExHairK_X, CharacterDetails.ExHairK_Y, CharacterDetails.ExHairK_Z, CharacterDetails.ExHairK_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairK_Slider);
        }

        private void ExHairK_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExHairK_X, CharacterDetails.ExHairK_Y, CharacterDetails.ExHairK_Z, CharacterDetails.ExHairK_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairK_UpDown);
        }

        public void ExHairK_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairK);

            //Load Current Values for Slider
            CharacterDetails.ExHairK_Toggle = true;
        }
        private void ExHairK_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExHairK_Slider);
            RemoveRoutedEventListener(ExHairK_UpDown);
            CharacterDetails.ExHairK_Rotate = false;
        }
#endregion
#region ExHairL
        private void ExHairL_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExHairL_X, CharacterDetails.ExHairL_Y, CharacterDetails.ExHairL_Z, CharacterDetails.ExHairL_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairL_Slider);
        }

        private void ExHairL_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExHairL_X, CharacterDetails.ExHairL_Y, CharacterDetails.ExHairL_Z, CharacterDetails.ExHairL_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExHairL_UpDown);
        }

        public void ExHairL_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExHairL);

            //Load Current Values for Slider
            CharacterDetails.ExHairL_Toggle = true;
        }
        private void ExHairL_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExHairL_Slider);
            RemoveRoutedEventListener(ExHairL_UpDown);
            CharacterDetails.ExHairL_Rotate = false;
        }
#endregion

#region ExMetA
        private void ExMetA_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExMetA_X, CharacterDetails.ExMetA_Y, CharacterDetails.ExMetA_Z, CharacterDetails.ExMetA_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetA_Slider);
        }

        private void ExMetA_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExMetA_X, CharacterDetails.ExMetA_Y, CharacterDetails.ExMetA_Z, CharacterDetails.ExMetA_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetA_UpDown);
        }

        public void ExMetA_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetA);

            //Load Current Values for Slider
            CharacterDetails.ExMetA_Toggle = true;
        }
        private void ExMetA_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExMetA_Slider);
            RemoveRoutedEventListener(ExMetA_UpDown);
            CharacterDetails.ExMetA_Rotate = false;
        }
#endregion
#region ExMetB
        private void ExMetB_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExMetB_X, CharacterDetails.ExMetB_Y, CharacterDetails.ExMetB_Z, CharacterDetails.ExMetB_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetB_Slider);
        }

        private void ExMetB_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExMetB_X, CharacterDetails.ExMetB_Y, CharacterDetails.ExMetB_Z, CharacterDetails.ExMetB_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetB_UpDown);
        }

        public void ExMetB_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetB);

            //Load Current Values for Slider
            CharacterDetails.ExMetB_Toggle = true;
        }
        private void ExMetB_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExMetB_Slider);
            RemoveRoutedEventListener(ExMetB_UpDown);
            CharacterDetails.ExMetB_Rotate = false;
        }
#endregion
#region ExMetC
        private void ExMetC_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExMetC_X, CharacterDetails.ExMetC_Y, CharacterDetails.ExMetC_Z, CharacterDetails.ExMetC_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetC_Slider);
        }

        private void ExMetC_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExMetC_X, CharacterDetails.ExMetC_Y, CharacterDetails.ExMetC_Z, CharacterDetails.ExMetC_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetC_UpDown);
        }

        public void ExMetC_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetC);

            //Load Current Values for Slider
            CharacterDetails.ExMetC_Toggle = true;
        }
        private void ExMetC_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExMetC_Slider);
            RemoveRoutedEventListener(ExMetC_UpDown);
            CharacterDetails.ExMetC_Rotate = false;
        }
#endregion
#region ExMetD
        private void ExMetD_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExMetD_X, CharacterDetails.ExMetD_Y, CharacterDetails.ExMetD_Z, CharacterDetails.ExMetD_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetD_Slider);
        }

        private void ExMetD_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExMetD_X, CharacterDetails.ExMetD_Y, CharacterDetails.ExMetD_Z, CharacterDetails.ExMetD_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetD_UpDown);
        }

        public void ExMetD_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetD);

            //Load Current Values for Slider
            CharacterDetails.ExMetD_Toggle = true;
        }
        private void ExMetD_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExMetD_Slider);
            RemoveRoutedEventListener(ExMetD_UpDown);
            CharacterDetails.ExMetD_Rotate = false;
        }
#endregion
#region ExMetE
        private void ExMetE_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExMetE_X, CharacterDetails.ExMetE_Y, CharacterDetails.ExMetE_Z, CharacterDetails.ExMetE_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetE_Slider);
        }

        private void ExMetE_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExMetE_X, CharacterDetails.ExMetE_Y, CharacterDetails.ExMetE_Z, CharacterDetails.ExMetE_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetE_UpDown);
        }

        public void ExMetE_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetE);

            //Load Current Values for Slider
            CharacterDetails.ExMetE_Toggle = true;
        }
        private void ExMetE_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExMetE_Slider);
            RemoveRoutedEventListener(ExMetE_UpDown);
            CharacterDetails.ExMetE_Rotate = false;
        }
#endregion
#region ExMetF
        private void ExMetF_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExMetF_X, CharacterDetails.ExMetF_Y, CharacterDetails.ExMetF_Z, CharacterDetails.ExMetF_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetF_Slider);
        }

        private void ExMetF_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExMetF_X, CharacterDetails.ExMetF_Y, CharacterDetails.ExMetF_Z, CharacterDetails.ExMetF_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetF_UpDown);
        }

        public void ExMetF_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetF);

            //Load Current Values for Slider
            CharacterDetails.ExMetF_Toggle = true;
        }
        private void ExMetF_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExMetF_Slider);
            RemoveRoutedEventListener(ExMetF_UpDown);
            CharacterDetails.ExMetF_Rotate = false;
        }
#endregion
#region ExMetG
        private void ExMetG_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExMetG_X, CharacterDetails.ExMetG_Y, CharacterDetails.ExMetG_Z, CharacterDetails.ExMetG_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetG_Slider);
        }

        private void ExMetG_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExMetG_X, CharacterDetails.ExMetG_Y, CharacterDetails.ExMetG_Z, CharacterDetails.ExMetG_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetG_UpDown);
        }

        public void ExMetG_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetG);

            //Load Current Values for Slider
            CharacterDetails.ExMetG_Toggle = true;
        }
        private void ExMetG_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExMetG_Slider);
            RemoveRoutedEventListener(ExMetG_UpDown);
            CharacterDetails.ExMetG_Rotate = false;
        }
#endregion
#region ExMetH
        private void ExMetH_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExMetH_X, CharacterDetails.ExMetH_Y, CharacterDetails.ExMetH_Z, CharacterDetails.ExMetH_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetH_Slider);
        }

        private void ExMetH_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExMetH_X, CharacterDetails.ExMetH_Y, CharacterDetails.ExMetH_Z, CharacterDetails.ExMetH_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetH_UpDown);
        }

        public void ExMetH_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetH);

            //Load Current Values for Slider
            CharacterDetails.ExMetH_Toggle = true;
        }
        private void ExMetH_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExMetH_Slider);
            RemoveRoutedEventListener(ExMetH_UpDown);
            CharacterDetails.ExMetH_Rotate = false;
        }
#endregion
#region ExMetI
        private void ExMetI_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExMetI_X, CharacterDetails.ExMetI_Y, CharacterDetails.ExMetI_Z, CharacterDetails.ExMetI_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetI_Slider);
        }

        private void ExMetI_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExMetI_X, CharacterDetails.ExMetI_Y, CharacterDetails.ExMetI_Z, CharacterDetails.ExMetI_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetI_UpDown);
        }

        public void ExMetI_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetI);

            //Load Current Values for Slider
            CharacterDetails.ExMetI_Toggle = true;
        }
        private void ExMetI_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExMetI_Slider);
            RemoveRoutedEventListener(ExMetI_UpDown);
            CharacterDetails.ExMetI_Rotate = false;
        }
#endregion
#region ExMetJ
        private void ExMetJ_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExMetJ_X, CharacterDetails.ExMetJ_Y, CharacterDetails.ExMetJ_Z, CharacterDetails.ExMetJ_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetJ_Slider);
        }

        private void ExMetJ_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExMetJ_X, CharacterDetails.ExMetJ_Y, CharacterDetails.ExMetJ_Z, CharacterDetails.ExMetJ_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetJ_UpDown);
        }

        public void ExMetJ_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetJ);

            //Load Current Values for Slider
            CharacterDetails.ExMetJ_Toggle = true;
        }
        private void ExMetJ_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExMetJ_Slider);
            RemoveRoutedEventListener(ExMetJ_UpDown);
            CharacterDetails.ExMetJ_Rotate = false;
        }
#endregion
#region ExMetK
        private void ExMetK_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExMetK_X, CharacterDetails.ExMetK_Y, CharacterDetails.ExMetK_Z, CharacterDetails.ExMetK_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetK_Slider);
        }

        private void ExMetK_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExMetK_X, CharacterDetails.ExMetK_Y, CharacterDetails.ExMetK_Z, CharacterDetails.ExMetK_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetK_UpDown);
        }

        public void ExMetK_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetK);

            //Load Current Values for Slider
            CharacterDetails.ExMetK_Toggle = true;
        }
        private void ExMetK_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExMetK_Slider);
            RemoveRoutedEventListener(ExMetK_UpDown);
            CharacterDetails.ExMetK_Rotate = false;
        }
#endregion
#region ExMetL
        private void ExMetL_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExMetL_X, CharacterDetails.ExMetL_Y, CharacterDetails.ExMetL_Z, CharacterDetails.ExMetL_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetL_Slider);
        }

        private void ExMetL_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExMetL_X, CharacterDetails.ExMetL_Y, CharacterDetails.ExMetL_Z, CharacterDetails.ExMetL_W);
            RemoveRoutedEventListener(ExMetL_UpDown);
        }

        public void ExMetL_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetL);

            //Load Current Values for Slider
            CharacterDetails.ExMetL_Toggle = true;
        }
        private void ExMetL_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExMetL_Slider);
            RemoveRoutedEventListener(ExMetL_UpDown);
            CharacterDetails.ExMetL_Rotate = false;
        }
#endregion
#region ExMetM
        private void ExMetM_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExMetM_X, CharacterDetails.ExMetM_Y, CharacterDetails.ExMetM_Z, CharacterDetails.ExMetM_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetM_Slider);
        }

        private void ExMetM_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExMetM_X, CharacterDetails.ExMetM_Y, CharacterDetails.ExMetM_Z, CharacterDetails.ExMetM_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetM_UpDown);
        }

        public void ExMetM_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetM);

            //Load Current Values for Slider
            CharacterDetails.ExMetM_Toggle = true;
        }
        private void ExMetM_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExMetM_Slider);
            RemoveRoutedEventListener(ExMetM_UpDown);
            CharacterDetails.ExMetM_Rotate = false;
        }
#endregion
#region ExMetN
        private void ExMetN_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExMetN_X, CharacterDetails.ExMetN_Y, CharacterDetails.ExMetN_Z, CharacterDetails.ExMetN_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetN_Slider);
            RemoveRoutedEventListener(ExMetN_UpDown);
        }

        private void ExMetN_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExMetN_X, CharacterDetails.ExMetN_Y, CharacterDetails.ExMetN_Z, CharacterDetails.ExMetN_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetN_Slider);
            RemoveRoutedEventListener(ExMetN_UpDown);
        }

        public void ExMetN_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetN);

            //Load Current Values for Slider
            CharacterDetails.ExMetN_Toggle = true;
        }
        private void ExMetN_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExMetN_Slider);
            RemoveRoutedEventListener(ExMetN_UpDown);
            CharacterDetails.ExMetN_Rotate = false;
        }
#endregion
#region ExMetO
        private void ExMetO_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExMetO_X, CharacterDetails.ExMetO_Y, CharacterDetails.ExMetO_Z, CharacterDetails.ExMetO_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetO_Slider);
        }

        private void ExMetO_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExMetO_X, CharacterDetails.ExMetO_Y, CharacterDetails.ExMetO_Z, CharacterDetails.ExMetO_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetO_UpDown);
        }

        public void ExMetO_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetO);

            //Load Current Values for Slider
            CharacterDetails.ExMetO_Toggle = true;
        }
        private void ExMetO_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExMetO_Slider);
            RemoveRoutedEventListener(ExMetO_UpDown);
            CharacterDetails.ExMetO_Rotate = false;
        }
#endregion
#region ExMetP
        private void ExMetP_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExMetP_X, CharacterDetails.ExMetP_Y, CharacterDetails.ExMetP_Z, CharacterDetails.ExMetP_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetP_Slider);
        }

        private void ExMetP_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExMetP_X, CharacterDetails.ExMetP_Y, CharacterDetails.ExMetP_Z, CharacterDetails.ExMetP_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetP_UpDown);
        }

        public void ExMetP_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetP);

            //Load Current Values for Slider
            CharacterDetails.ExMetP_Toggle = true;
        }
        private void ExMetP_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExMetP_Slider);
            RemoveRoutedEventListener(ExMetP_UpDown);
            CharacterDetails.ExMetP_Rotate = false;
        }
#endregion
#region ExMetQ
        private void ExMetQ_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExMetQ_X, CharacterDetails.ExMetQ_Y, CharacterDetails.ExMetQ_Z, CharacterDetails.ExMetQ_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetQ_Slider);
        }

        private void ExMetQ_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExMetQ_X, CharacterDetails.ExMetQ_Y, CharacterDetails.ExMetQ_Z, CharacterDetails.ExMetQ_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetQ_UpDown);
        }

        public void ExMetQ_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetQ);

            //Load Current Values for Slider
            CharacterDetails.ExMetQ_Toggle = true;
        }
        private void ExMetQ_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExMetQ_Slider);
            RemoveRoutedEventListener(ExMetQ_UpDown);
            CharacterDetails.ExMetQ_Rotate = false;
        }
#endregion
#region ExMetR
        private void ExMetR_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExMetR_X, CharacterDetails.ExMetR_Y, CharacterDetails.ExMetR_Z, CharacterDetails.ExMetR_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetR_Slider);
        }

        private void ExMetR_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExMetR_X, CharacterDetails.ExMetR_Y, CharacterDetails.ExMetR_Z, CharacterDetails.ExMetR_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExMetR_UpDown);
        }

        public void ExMetR_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExMetR);

            //Load Current Values for Slider
            CharacterDetails.ExMetR_Toggle = true;
        }
        private void ExMetR_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExMetR_Slider);
            RemoveRoutedEventListener(ExMetR_UpDown);
            CharacterDetails.ExMetR_Rotate = false;
        }
#endregion

#region ExTopA
        private void ExTopA_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExTopA_X, CharacterDetails.ExTopA_Y, CharacterDetails.ExTopA_Z, CharacterDetails.ExTopA_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExTopA_Slider);
        }

        private void ExTopA_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExTopA_X, CharacterDetails.ExTopA_Y, CharacterDetails.ExTopA_Z, CharacterDetails.ExTopA_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExTopA_UpDown);
        }

        public void ExTopA_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExTopA);

            //Load Current Values for Slider
            CharacterDetails.ExTopA_Toggle = true;
        }
        private void ExTopA_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExTopA_Slider);
            RemoveRoutedEventListener(ExTopA_UpDown);
            CharacterDetails.ExTopA_Rotate = false;
        }
#endregion
#region ExTopB
        private void ExTopB_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExTopB_X, CharacterDetails.ExTopB_Y, CharacterDetails.ExTopB_Z, CharacterDetails.ExTopB_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExTopB_Slider);
        }

        private void ExTopB_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExTopB_X, CharacterDetails.ExTopB_Y, CharacterDetails.ExTopB_Z, CharacterDetails.ExTopB_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExTopB_UpDown);
        }

        public void ExTopB_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExTopB);

            //Load Current Values for Slider
            CharacterDetails.ExTopB_Toggle = true;
        }
        private void ExTopB_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExTopB_Slider);
            RemoveRoutedEventListener(ExTopB_UpDown);
            CharacterDetails.ExTopB_Rotate = false;
        }
#endregion
#region ExTopC
        private void ExTopC_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExTopC_X, CharacterDetails.ExTopC_Y, CharacterDetails.ExTopC_Z, CharacterDetails.ExTopC_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExTopC_Slider);
        }

        private void ExTopC_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExTopC_X, CharacterDetails.ExTopC_Y, CharacterDetails.ExTopC_Z, CharacterDetails.ExTopC_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExTopC_UpDown);
        }

        public void ExTopC_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExTopC);

            //Load Current Values for Slider
            CharacterDetails.ExTopC_Toggle = true;
        }
        private void ExTopC_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExTopC_Slider);
            RemoveRoutedEventListener(ExTopC_UpDown);
            CharacterDetails.ExTopC_Rotate = false;
        }
#endregion
#region ExTopD
        private void ExTopD_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExTopD_X, CharacterDetails.ExTopD_Y, CharacterDetails.ExTopD_Z, CharacterDetails.ExTopD_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExTopD_Slider);
        }

        private void ExTopD_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExTopD_X, CharacterDetails.ExTopD_Y, CharacterDetails.ExTopD_Z, CharacterDetails.ExTopD_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExTopD_UpDown);
        }

        public void ExTopD_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExTopD);

            //Load Current Values for Slider
            CharacterDetails.ExTopD_Toggle = true;
        }
        private void ExTopD_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExTopD_Slider);
            RemoveRoutedEventListener(ExTopD_UpDown);
            CharacterDetails.ExTopD_Rotate = false;
        }
#endregion
#region ExTopE
        private void ExTopE_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExTopE_X, CharacterDetails.ExTopE_Y, CharacterDetails.ExTopE_Z, CharacterDetails.ExTopE_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExTopE_Slider);
        }

        private void ExTopE_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExTopE_X, CharacterDetails.ExTopE_Y, CharacterDetails.ExTopE_Z, CharacterDetails.ExTopE_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExTopE_UpDown);
        }

        public void ExTopE_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExTopE);

            //Load Current Values for Slider
            CharacterDetails.ExTopE_Toggle = true;
        }
        private void ExTopE_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExTopE_Slider);
            RemoveRoutedEventListener(ExTopE_UpDown);
            CharacterDetails.ExTopE_Rotate = false;
        }
#endregion
#region ExTopF
        private void ExTopF_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExTopF_X, CharacterDetails.ExTopF_Y, CharacterDetails.ExTopF_Z, CharacterDetails.ExTopF_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExTopF_Slider);
        }

        private void ExTopF_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExTopF_X, CharacterDetails.ExTopF_Y, CharacterDetails.ExTopF_Z, CharacterDetails.ExTopF_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExTopF_UpDown);
        }

        public void ExTopF_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExTopF);

            //Load Current Values for Slider
            CharacterDetails.ExTopF_Toggle = true;
        }
        private void ExTopF_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExTopF_Slider);
            RemoveRoutedEventListener(ExTopF_UpDown);
            CharacterDetails.ExTopF_Rotate = false;
        }
#endregion
#region ExTopG
        private void ExTopG_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExTopG_X, CharacterDetails.ExTopG_Y, CharacterDetails.ExTopG_Z, CharacterDetails.ExTopG_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExTopG_Slider);
        }

        private void ExTopG_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExTopG_X, CharacterDetails.ExTopG_Y, CharacterDetails.ExTopG_Z, CharacterDetails.ExTopG_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExTopG_UpDown);
        }

        public void ExTopG_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExTopG);

            //Load Current Values for Slider
            CharacterDetails.ExTopG_Toggle = true;
        }
        private void ExTopG_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExTopG_Slider);
            RemoveRoutedEventListener(ExTopG_UpDown);
            CharacterDetails.ExTopG_Rotate = false;
        }
#endregion
#region ExTopH
        private void ExTopH_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExTopH_X, CharacterDetails.ExTopH_Y, CharacterDetails.ExTopH_Z, CharacterDetails.ExTopH_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExTopH_Slider);
        }

        private void ExTopH_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExTopH_X, CharacterDetails.ExTopH_Y, CharacterDetails.ExTopH_Z, CharacterDetails.ExTopH_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExTopH_UpDown);
        }

        public void ExTopH_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExTopH);

            //Load Current Values for Slider
            CharacterDetails.ExTopH_Toggle = true;
        }
        private void ExTopH_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExTopH_Slider);
            RemoveRoutedEventListener(ExTopH_UpDown);
            CharacterDetails.ExTopH_Rotate = false;
        }
#endregion
#region ExTopI
        private void ExTopI_Slider(object sender, RoutedPropertyChangedEventArgs<double> e)
        {

            RotateHelper(CharacterDetails.ExTopI_X, CharacterDetails.ExTopI_Y, CharacterDetails.ExTopI_Z, CharacterDetails.ExTopI_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExTopI_Slider);
        }

        private void ExTopI_UpDown(object sender, RoutedPropertyChangedEventArgs<double?> e)
        {

            RotateHelper(CharacterDetails.ExTopI_X, CharacterDetails.ExTopI_Y, CharacterDetails.ExTopI_Z, CharacterDetails.ExTopI_W);
            // Remove listeners for value changed.	
            RemoveRoutedEventListener(ExTopI_UpDown);
        }

        public void ExTopI_Checked(object sender, RoutedEventArgs e)
        {
            //Disable Other Selections
            SwapToggles(ExTopI);

            //Load Current Values for Slider
            CharacterDetails.ExTopI_Toggle = true;
        }
        private void ExTopI_Unchecked(object sender, RoutedEventArgs e)
        {
            RemoveRoutedEventListener(ExTopI_Slider);
            RemoveRoutedEventListener(ExTopI_UpDown);
            CharacterDetails.ExTopI_Rotate = false;
        }
#endregion

        private void EditModeButton_Checked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.BoneEditMode = true;
            ReadTetriaryFromRunTime = false;
            EnableAll();
            Bone_Flag_Manager();

            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.SkeletonAddress, "bytes", "0x90 0x90 0x90 0x90 0x90 0x90");
            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.SkeletonAddress2, "bytes", "0x90 0x90 0x90 0x90 0x90 0x90");
            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.SkeletonAddress3, "bytes", "0x90 0x90 0x90 0x90");
            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.PhysicsAddress, "bytes", "0x90 0x90 0x90 0x90");
            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.PhysicsAddress2, "bytes", "0x90 0x90 0x90");

            //Enable State Loading if a Save exists.
            if (HeadSaved01 == true) LoadstateHead01.IsEnabled = true;
            if (HeadSaved02 == true) LoadstateHead02.IsEnabled = true;
            if (HairSaved01 == true) LoadstateHair01.IsEnabled = true;
            if (HairSaved02 == true) LoadstateHair02.IsEnabled = true;
            if (EarringsSaved01 == true) LoadstateEarrings01.IsEnabled = true;
            if (EarringsSaved02 == true) LoadstateEarrings02.IsEnabled = true;
            if (BodySaved01 == true) LoadstateBody01.IsEnabled = true;
            if (BodySaved02 == true) LoadstateBody02.IsEnabled = true;
            if (LeftArmSaved01 == true) LoadstateLeftArm01.IsEnabled = true;
            if (LeftArmSaved02 == true) LoadstateLeftArm02.IsEnabled = true;
            if (RightArmSaved01 == true) LoadstateRightArm01.IsEnabled = true;
            if (RightArmSaved02 == true) LoadstateRightArm02.IsEnabled = true;
            if (ClothesSaved01 == true) LoadstateClothes01.IsEnabled = true;
            if (ClothesSaved02 == true) LoadstateClothes02.IsEnabled = true;
            if (WeaponsSaved01 == true) LoadstateWeapons01.IsEnabled = true;
            if (WeaponsSaved02 == true) LoadstateWeapons02.IsEnabled = true;
            if (LeftHandSaved01 == true) LoadstateLeftHand01.IsEnabled = true;
            if (LeftHandSaved02 == true) LoadstateLeftHand02.IsEnabled = true;
            if (RightHandSaved01 == true) LoadstateRightHand01.IsEnabled = true;
            if (RightHandSaved02 == true) LoadstateRightHand02.IsEnabled = true;
            if (WaistSaved01 == true) LoadstateWaist01.IsEnabled = true;
            if (WaistSaved02 == true) LoadstateWaist02.IsEnabled = true;
            if (LeftLegSaved01 == true) LoadstateLeftLeg01.IsEnabled = true;
            if (LeftLegSaved02 == true) LoadstateLeftLeg02.IsEnabled = true;
            if (RightLegSaved01 == true) LoadstateRightLeg01.IsEnabled = true;
            if (RightLegSaved02 == true) LoadstateRightLeg02.IsEnabled = true;
            if (HelmSaved01 == true) LoadstateHelm01.IsEnabled = true;
            if (HelmSaved02 == true) LoadstateHelm02.IsEnabled = true;
            if (TopSaved01 == true) LoadstateTop01.IsEnabled = true;
            if (TopSaved02 == true) LoadstateTop02.IsEnabled = true;
        }
        private void EditModeButton_Unchecked(object sender, RoutedEventArgs e)
        {
            CharacterDetails.BoneEditMode = false;
            PhysicsButton.IsChecked = false;
            ReadTetriaryFromRunTime = false;
            UncheckAll();
            DisableAll();

            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.SkeletonAddress, "bytes", "0x41 0x0F 0x29 0x5C 0x12 0x10");
            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.SkeletonAddress2, "bytes", "0x43 0x0F 0x29 0x5C 0x18 0x10");
            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.SkeletonAddress3, "bytes", "0x0F 0x29 0x5E 0x10");
            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.PhysicsAddress, "bytes", "0x0F 0x29 0x48 0x10");
            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.PhysicsAddress2, "bytes", "0x0F 0x29 0x00");

            //Clear Slider Values
            CharacterDetails.BoneX = 0;
            CharacterDetails.BoneY = 0;
            CharacterDetails.BoneZ = 0;

            //Disable State Loading
            LoadstateHead01.IsEnabled = false;
            LoadstateHead02.IsEnabled = false;
            LoadstateHair01.IsEnabled = false;
            LoadstateHair02.IsEnabled = false;
            LoadstateEarrings01.IsEnabled = false;
            LoadstateEarrings02.IsEnabled = false;
            LoadstateBody01.IsEnabled = false;
            LoadstateBody02.IsEnabled = false;
            LoadstateLeftArm01.IsEnabled = false;
            LoadstateLeftArm02.IsEnabled = false;
            LoadstateRightArm01.IsEnabled = false;
            LoadstateRightArm02.IsEnabled = false;
            LoadstateClothes01.IsEnabled = false;
            LoadstateClothes02.IsEnabled = false;
            LoadstateWeapons01.IsEnabled = false;
            LoadstateWeapons02.IsEnabled = false;
            LoadstateLeftHand01.IsEnabled = false;
            LoadstateLeftHand02.IsEnabled = false;
            LoadstateRightHand01.IsEnabled = false;
            LoadstateRightHand02.IsEnabled = false;
            LoadstateWaist01.IsEnabled = false;
            LoadstateWaist02.IsEnabled = false;
            LoadstateLeftLeg01.IsEnabled = false;
            LoadstateLeftLeg02.IsEnabled = false;
            LoadstateRightLeg01.IsEnabled = false;
            LoadstateRightLeg02.IsEnabled = false;
            LoadstateHelm01.IsEnabled = false;
            LoadstateHelm02.IsEnabled = false;
            LoadstateTop01.IsEnabled = false;
            LoadstateTop02.IsEnabled = false;
        }

        private void PhysicsButton_Checked(object sender, RoutedEventArgs e)
        {
            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.PhysicsAddress, "bytes", "0x0F 0x29 0x48 0x10");
            MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.PhysicsAddress2, "bytes", "0x0F 0x29 0x00");
        }
        private void PhysicsButton_Unchecked(object sender, RoutedEventArgs e)
        {
            if (CharacterDetails.BoneEditMode)
            {
                MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.PhysicsAddress, "bytes", "0x90 0x90 0x90 0x90");
                MemoryManager.Instance.MemLib.writeMemory(MemoryManager.Instance.PhysicsAddress2, "bytes", "0x90 0x90 0x90");
            }
        }

#region Savestate\Loadstate Head
        private void SavestateHead01_Click(object sender, RoutedEventArgs e)
        {
            HeadSaved01 = true;
            if (CharacterDetails.BoneEditMode) LoadstateHead01.IsEnabled = true;
            Race_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Race), 1));

            Head_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Head_X), 16));
            EarLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarLeft_X), 16));
            EarRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarRight_X), 16));
            RootHead_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RootHead_X), 16));
            Jaw_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Jaw_X), 16));
            EyelidLowerLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidLowerLeft_X), 16));
            EyelidLowerRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidLowerRight_X), 16));
            EyeLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyeLeft_X), 16));
            EyeRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyeRight_X), 16));
            Nose_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Nose_X), 16));
            CheekLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), 16));
            HrothWhiskersLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothWhiskersLeft_X), 16));
            CheekRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), 16));
            HrothWhiskersRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothWhiskersRight_X), 16));
            LipsLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), 16));
            HrothEyebrowLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowLeft_X), 16));
            LipsRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), 16));
            HrothEyebrowRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowRight_X), 16));
            EyebrowLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), 16));
            HrothBridge_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBridge_X), 16));
            EyebrowRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), 16));
            HrothBrowLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowLeft_X), 16));
            Bridge_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), 16));
            HrothBrowRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowRight_X), 16));
            BrowLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), 16));
            HrothJawUpper_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothJawUpper_X), 16));
            BrowRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), 16));
            HrothLipUpper_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpper_X), 16));
            LipUpperA_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), 16));
            HrothEyelidUpperLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperLeft_X), 16));
            EyelidUpperLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), 16));
            HrothEyelidUpperRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperRight_X), 16));
            EyelidUpperRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), 16));
            HrothLipsLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsLeft_X), 16));
            LipLowerA_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerA_X), 16));
            HrothLipsRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsRight_X), 16));
            VieraEar01ALeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01ALeft_X), 16));
            LipUpperB_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperB_X), 16));
            HrothLipUpperLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperLeft_X), 16));
            VieraEar01ARight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01ARight_X), 16));
            LipLowerB_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerB_X), 16));
            HrothLipUpperRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperRight_X), 16));
            VieraEar02ALeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02ALeft_X), 16));
            if (CharacterDetails.Race.value == 7 || CharacterDetails.Race.value == 8)
            {
                HrothLipLower_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipLower_X), 16));
                VieraEar02ARight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02ARight_X), 16));
            }
            else
            {
                HrothLipLower_Sav01 = "null";
                VieraEar02ARight_Sav01 = "null";
            }
            if (CharacterDetails.Race.value == 8)
            {
                VieraEar03ALeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03ALeft_X), 16));
                VieraEar03ARight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03ARight_X), 16));
                VieraEar04ALeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04ALeft_X), 16));
                VieraEar04ARight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04ARight_X), 16));
                VieraLipLowerA_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerA_X), 16));
                VieraLipUpperB_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipUpperB_X), 16));
                VieraEar01BLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01BLeft_X), 16));
                VieraEar01BRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01BRight_X), 16));
                VieraEar02BLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02BLeft_X), 16));
                VieraEar02BRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02BRight_X), 16));
                VieraEar03BLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03BLeft_X), 16));
                VieraEar03BRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03BRight_X), 16));
                VieraEar04BLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04BLeft_X), 16));
                VieraEar04BRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04BRight_X), 16));
                VieraLipLowerB_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerB_X), 16));
            }
            else
            {
                VieraEar03ALeft_Sav01 = "null";
                VieraEar03ARight_Sav01 = "null";
                VieraEar04ALeft_Sav01 = "null";
                VieraEar04ARight_Sav01 = "null";
                VieraLipLowerA_Sav01 = "null";
                VieraLipUpperB_Sav01 = "null";
                VieraEar01BLeft_Sav01 = "null";
                VieraEar01BRight_Sav01 = "null";
                VieraEar02BLeft_Sav01 = "null";
                VieraEar02BRight_Sav01 = "null";
                VieraEar03BLeft_Sav01 = "null";
                VieraEar03BRight_Sav01 = "null";
                VieraEar04BLeft_Sav01 = "null";
                VieraEar04BRight_Sav01 = "null";
                VieraLipLowerB_Sav01 = "null";
            }
        }
        private void SavestateHead02_Click(object sender, RoutedEventArgs e)
        {
            HeadSaved02 = true;
            if (CharacterDetails.BoneEditMode) LoadstateHead02.IsEnabled = true;
            Race_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Race), 1));

            Head_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Head_X), 16));
            EarLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarLeft_X), 16));
            EarRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarRight_X), 16));
            RootHead_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RootHead_X), 16));
            Jaw_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Jaw_X), 16));
            EyelidLowerLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidLowerLeft_X), 16));
            EyelidLowerRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidLowerRight_X), 16));
            EyeLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyeLeft_X), 16));
            EyeRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyeRight_X), 16));
            Nose_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Nose_X), 16));
            CheekLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), 16));
            HrothWhiskersLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothWhiskersLeft_X), 16));
            CheekRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), 16));
            HrothWhiskersRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothWhiskersRight_X), 16));
            LipsLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), 16));
            HrothEyebrowLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowLeft_X), 16));
            LipsRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), 16));
            HrothEyebrowRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowRight_X), 16));
            EyebrowLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), 16));
            HrothBridge_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBridge_X), 16));
            EyebrowRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), 16));
            HrothBrowLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowLeft_X), 16));
            Bridge_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), 16));
            HrothBrowRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowRight_X), 16));
            BrowLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), 16));
            HrothJawUpper_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothJawUpper_X), 16));
            BrowRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), 16));
            HrothLipUpper_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpper_X), 16));
            LipUpperA_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), 16));
            HrothEyelidUpperLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperLeft_X), 16));
            EyelidUpperLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), 16));
            HrothEyelidUpperRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperRight_X), 16));
            EyelidUpperRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), 16));
            HrothLipsLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsLeft_X), 16));
            LipLowerA_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerA_X), 16));
            HrothLipsRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsRight_X), 16));
            VieraEar01ALeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01ALeft_X), 16));
            LipUpperB_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperB_X), 16));
            HrothLipUpperLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperLeft_X), 16));
            VieraEar01ARight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01ARight_X), 16));
            LipLowerB_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerB_X), 16));
            HrothLipUpperRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperRight_X), 16));
            VieraEar02ALeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02ALeft_X), 16));
            if (CharacterDetails.Race.value == 7 || CharacterDetails.Race.value == 8)
            {
                HrothLipLower_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipLower_X), 16));
                VieraEar02ARight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02ARight_X), 16));
            }
            else
            {
                HrothLipLower_Sav02 = "null";
                VieraEar02ARight_Sav02 = "null";
            }
            if (CharacterDetails.Race.value == 8)
            {
                VieraEar03ALeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03ALeft_X), 16));
                VieraEar03ARight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03ARight_X), 16));
                VieraEar04ALeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04ALeft_X), 16));
                VieraEar04ARight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04ARight_X), 16));
                VieraLipLowerA_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerA_X), 16));
                VieraLipUpperB_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipUpperB_X), 16));
                VieraEar01BLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01BLeft_X), 16));
                VieraEar01BRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01BRight_X), 16));
                VieraEar02BLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02BLeft_X), 16));
                VieraEar02BRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02BRight_X), 16));
                VieraEar03BLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03BLeft_X), 16));
                VieraEar03BRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03BRight_X), 16));
                VieraEar04BLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04BLeft_X), 16));
                VieraEar04BRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04BRight_X), 16));
                VieraLipLowerB_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerB_X), 16));
            }
            else
            {
                VieraEar03ALeft_Sav02 = "null";
                VieraEar03ARight_Sav02 = "null";
                VieraEar04ALeft_Sav02 = "null";
                VieraEar04ARight_Sav02 = "null";
                VieraLipLowerA_Sav02 = "null";
                VieraLipUpperB_Sav02 = "null";
                VieraEar01BLeft_Sav02 = "null";
                VieraEar01BRight_Sav02 = "null";
                VieraEar02BLeft_Sav02 = "null";
                VieraEar02BRight_Sav02 = "null";
                VieraEar03BLeft_Sav02 = "null";
                VieraEar03BRight_Sav02 = "null";
                VieraEar04BLeft_Sav02 = "null";
                VieraEar04BRight_Sav02 = "null";
                VieraLipLowerB_Sav02 = "null";
            }
        }
        private void LoadstateHead01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Head_X), MemoryManager.StringToByteArray(Head_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarLeft_X), MemoryManager.StringToByteArray(EarLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarRight_X), MemoryManager.StringToByteArray(EarRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Jaw_X), MemoryManager.StringToByteArray(Jaw_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidLowerLeft_X), MemoryManager.StringToByteArray(EyelidLowerLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidLowerRight_X), MemoryManager.StringToByteArray(EyelidLowerRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyeLeft_X), MemoryManager.StringToByteArray(EyeLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyeRight_X), MemoryManager.StringToByteArray(EyeRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Nose_X), MemoryManager.StringToByteArray(Nose_Sav01.Replace(" ", string.Empty)));
            if (CharacterDetails.Race.value < 7)
            {
                if (Race_Sav01 == "01" || Race_Sav01 == "02" || Race_Sav01 == "03" || Race_Sav01 == "04" || Race_Sav01 == "05" || Race_Sav01 == "06")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(CheekLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(CheekRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(LipsLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(LipsRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(EyebrowLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(EyebrowRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(Bridge_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(BrowLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(BrowRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(LipUpperA_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(EyelidUpperLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(EyelidUpperRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerA_X), MemoryManager.StringToByteArray(LipLowerA_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperB_X), MemoryManager.StringToByteArray(LipUpperB_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerB_X), MemoryManager.StringToByteArray(LipLowerB_Sav01.Replace(" ", string.Empty)));
                }
                if (Race_Sav01 == "07")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(HrothLipUpperLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(HrothLipUpperRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(HrothLipsLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(HrothLipsRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(HrothEyebrowLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(HrothEyebrowRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(HrothBridge_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(HrothBrowLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(HrothBrowRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(HrothLipUpper_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(HrothEyelidUpperLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(HrothEyelidUpperRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperB_X), MemoryManager.StringToByteArray(HrothJawUpper_Sav01.Replace(" ", string.Empty)));
                }
                if (Race_Sav01 == "08")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(CheekLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(CheekRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(LipsLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(LipsRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(EyebrowLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(EyebrowRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(Bridge_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(BrowLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(BrowRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(LipUpperA_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(EyelidUpperLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(EyelidUpperRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerA_X), MemoryManager.StringToByteArray(VieraLipLowerA_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperB_X), MemoryManager.StringToByteArray(VieraLipUpperB_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerB_X), MemoryManager.StringToByteArray(VieraLipLowerB_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (CharacterDetails.Race.value == 7)
            {
                if (Race_Sav01 == "01" || Race_Sav01 == "02" || Race_Sav01 == "03" || Race_Sav01 == "04" || Race_Sav01 == "05" || Race_Sav01 == "06")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowLeft_X), MemoryManager.StringToByteArray(EyebrowLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowRight_X), MemoryManager.StringToByteArray(EyebrowRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBridge_X), MemoryManager.StringToByteArray(Bridge_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowLeft_X), MemoryManager.StringToByteArray(BrowLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowRight_X), MemoryManager.StringToByteArray(BrowRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothJawUpper_X), MemoryManager.StringToByteArray(LipUpperB_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpper_X), MemoryManager.StringToByteArray(LipUpperA_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperLeft_X), MemoryManager.StringToByteArray(EyelidUpperLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperRight_X), MemoryManager.StringToByteArray(EyelidUpperRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsLeft_X), MemoryManager.StringToByteArray(LipsLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsRight_X), MemoryManager.StringToByteArray(LipsRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperLeft_X), MemoryManager.StringToByteArray(CheekLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperRight_X), MemoryManager.StringToByteArray(CheekRight_Sav01.Replace(" ", string.Empty)));
                }
                if (Race_Sav01 == "07")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothWhiskersLeft_X), MemoryManager.StringToByteArray(HrothWhiskersLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothWhiskersRight_X), MemoryManager.StringToByteArray(HrothWhiskersRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowLeft_X), MemoryManager.StringToByteArray(HrothEyebrowLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowRight_X), MemoryManager.StringToByteArray(HrothEyebrowRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBridge_X), MemoryManager.StringToByteArray(HrothBridge_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowLeft_X), MemoryManager.StringToByteArray(HrothBrowLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowRight_X), MemoryManager.StringToByteArray(HrothBrowRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothJawUpper_X), MemoryManager.StringToByteArray(HrothJawUpper_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpper_X), MemoryManager.StringToByteArray(HrothLipUpper_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperLeft_X), MemoryManager.StringToByteArray(HrothEyelidUpperLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperRight_X), MemoryManager.StringToByteArray(HrothEyelidUpperRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsLeft_X), MemoryManager.StringToByteArray(HrothLipsLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsRight_X), MemoryManager.StringToByteArray(HrothLipsRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperLeft_X), MemoryManager.StringToByteArray(HrothLipUpperLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperRight_X), MemoryManager.StringToByteArray(HrothLipUpperRight_Sav01.Replace(" ", string.Empty)));
                }
                if (Race_Sav01 == "08")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowLeft_X), MemoryManager.StringToByteArray(EyebrowLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowRight_X), MemoryManager.StringToByteArray(EyebrowRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBridge_X), MemoryManager.StringToByteArray(Bridge_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowLeft_X), MemoryManager.StringToByteArray(BrowLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowRight_X), MemoryManager.StringToByteArray(BrowRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothJawUpper_X), MemoryManager.StringToByteArray(VieraLipUpperB_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpper_X), MemoryManager.StringToByteArray(LipUpperA_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperLeft_X), MemoryManager.StringToByteArray(EyelidUpperLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperRight_X), MemoryManager.StringToByteArray(EyelidUpperRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsLeft_X), MemoryManager.StringToByteArray(LipsLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsRight_X), MemoryManager.StringToByteArray(LipsRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperLeft_X), MemoryManager.StringToByteArray(CheekLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperRight_X), MemoryManager.StringToByteArray(CheekRight_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (CharacterDetails.Race.value == 8)
            {
                if (Race_Sav01 == "01" || Race_Sav01 == "02" || Race_Sav01 == "03" || Race_Sav01 == "04" || Race_Sav01 == "05" || Race_Sav01 == "06")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(CheekLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(CheekRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(LipsLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(LipsRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(EyebrowLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(EyebrowRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(Bridge_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(BrowLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(BrowRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(LipUpperA_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(EyelidUpperLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(EyelidUpperRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerA_X), MemoryManager.StringToByteArray(VieraEar01ALeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipUpperB_X), MemoryManager.StringToByteArray(VieraEar01ARight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerB_X), MemoryManager.StringToByteArray(VieraEar02ALeft_Sav01.Replace(" ", string.Empty)));
                }
                if (Race_Sav01 == "07")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(HrothLipUpperLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(HrothLipUpperRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(HrothLipsLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(HrothLipsRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(HrothEyebrowLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(HrothEyebrowRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(HrothBridge_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(HrothBrowLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(HrothBrowRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(HrothLipUpper_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(HrothEyelidUpperLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(HrothEyelidUpperRight_Sav01.Replace(" ", string.Empty)));
                }
                if (Race_Sav01 == "08")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(CheekLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(CheekRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(LipsLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(LipsRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(EyebrowLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(EyebrowRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(Bridge_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(BrowLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(BrowRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(LipUpperA_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(EyelidUpperLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(EyelidUpperRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01ALeft_X), MemoryManager.StringToByteArray(VieraEar01ALeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01ARight_X), MemoryManager.StringToByteArray(VieraEar01ARight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02ALeft_X), MemoryManager.StringToByteArray(VieraEar02ALeft_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (HrothLipLower_Sav01 != "null" || VieraEar02ARight_Sav01 != "null")
            {
                if (CharacterDetails.Race.value == 7)
                {
                    if (Race_Sav01 == "07")
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipLower_X), MemoryManager.StringToByteArray(HrothLipLower_Sav01.Replace(" ", string.Empty)));
                    }
                }
                if (CharacterDetails.Race.value == 8)
                {
                    if (Race_Sav01 == "08")
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02ARight_X), MemoryManager.StringToByteArray(VieraEar02ARight_Sav01.Replace(" ", string.Empty)));
                    }
                }
            }
            if (VieraEar03ALeft_Sav01 != "null")
            {
                if (CharacterDetails.Race.value < 7)
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerA_X), MemoryManager.StringToByteArray(VieraLipLowerA_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperB_X), MemoryManager.StringToByteArray(VieraLipUpperB_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerB_X), MemoryManager.StringToByteArray(VieraLipLowerB_Sav01.Replace(" ", string.Empty)));
                }
                if (CharacterDetails.Race.value == 8)
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03ALeft_X), MemoryManager.StringToByteArray(VieraEar03ALeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03ARight_X), MemoryManager.StringToByteArray(VieraEar03ARight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04ALeft_X), MemoryManager.StringToByteArray(VieraEar04ALeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04ARight_X), MemoryManager.StringToByteArray(VieraEar04ARight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerA_X), MemoryManager.StringToByteArray(VieraLipLowerA_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipUpperB_X), MemoryManager.StringToByteArray(VieraLipUpperB_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01BLeft_X), MemoryManager.StringToByteArray(VieraEar01BLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01BRight_X), MemoryManager.StringToByteArray(VieraEar01BRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02BLeft_X), MemoryManager.StringToByteArray(VieraEar02BLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02BRight_X), MemoryManager.StringToByteArray(VieraEar02BRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03BLeft_X), MemoryManager.StringToByteArray(VieraEar03BLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03BRight_X), MemoryManager.StringToByteArray(VieraEar03BRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04BLeft_X), MemoryManager.StringToByteArray(VieraEar04BLeft_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04BRight_X), MemoryManager.StringToByteArray(VieraEar04BRight_Sav01.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerB_X), MemoryManager.StringToByteArray(VieraLipLowerB_Sav01.Replace(" ", string.Empty)));
                }
            }
        }
        private void LoadstateHead02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Head_X), MemoryManager.StringToByteArray(Head_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarLeft_X), MemoryManager.StringToByteArray(EarLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarRight_X), MemoryManager.StringToByteArray(EarRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Jaw_X), MemoryManager.StringToByteArray(Jaw_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidLowerLeft_X), MemoryManager.StringToByteArray(EyelidLowerLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidLowerRight_X), MemoryManager.StringToByteArray(EyelidLowerRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyeLeft_X), MemoryManager.StringToByteArray(EyeLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyeRight_X), MemoryManager.StringToByteArray(EyeRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Nose_X), MemoryManager.StringToByteArray(Nose_Sav02.Replace(" ", string.Empty)));
            if (CharacterDetails.Race.value < 7)
            {
                if (Race_Sav02 == "01" || Race_Sav02 == "02" || Race_Sav02 == "03" || Race_Sav02 == "04" || Race_Sav02 == "05" || Race_Sav02 == "06")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(CheekLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(CheekRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(LipsLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(LipsRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(EyebrowLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(EyebrowRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(Bridge_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(BrowLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(BrowRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(LipUpperA_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(EyelidUpperLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(EyelidUpperRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerA_X), MemoryManager.StringToByteArray(LipLowerA_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperB_X), MemoryManager.StringToByteArray(LipUpperB_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerB_X), MemoryManager.StringToByteArray(LipLowerB_Sav02.Replace(" ", string.Empty)));
                }
                if (Race_Sav02 == "07")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(HrothLipUpperLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(HrothLipUpperRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(HrothLipsLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(HrothLipsRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(HrothEyebrowLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(HrothEyebrowRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(HrothBridge_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(HrothBrowLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(HrothBrowRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(HrothLipUpper_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(HrothEyelidUpperLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(HrothEyelidUpperRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperB_X), MemoryManager.StringToByteArray(HrothJawUpper_Sav02.Replace(" ", string.Empty)));
                }
                if (Race_Sav02 == "08")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(CheekLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(CheekRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(LipsLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(LipsRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(EyebrowLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(EyebrowRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(Bridge_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(BrowLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(BrowRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(LipUpperA_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(EyelidUpperLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(EyelidUpperRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerA_X), MemoryManager.StringToByteArray(VieraLipLowerA_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperB_X), MemoryManager.StringToByteArray(VieraLipUpperB_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerB_X), MemoryManager.StringToByteArray(VieraLipLowerB_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (CharacterDetails.Race.value == 7)
            {
                if (Race_Sav02 == "01" || Race_Sav02 == "02" || Race_Sav02 == "03" || Race_Sav02 == "04" || Race_Sav02 == "05" || Race_Sav02 == "06")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowLeft_X), MemoryManager.StringToByteArray(EyebrowLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowRight_X), MemoryManager.StringToByteArray(EyebrowRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBridge_X), MemoryManager.StringToByteArray(Bridge_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowLeft_X), MemoryManager.StringToByteArray(BrowLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowRight_X), MemoryManager.StringToByteArray(BrowRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothJawUpper_X), MemoryManager.StringToByteArray(LipUpperB_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpper_X), MemoryManager.StringToByteArray(LipUpperA_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperLeft_X), MemoryManager.StringToByteArray(EyelidUpperLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperRight_X), MemoryManager.StringToByteArray(EyelidUpperRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsLeft_X), MemoryManager.StringToByteArray(LipsLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsRight_X), MemoryManager.StringToByteArray(LipsRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperLeft_X), MemoryManager.StringToByteArray(CheekLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperRight_X), MemoryManager.StringToByteArray(CheekRight_Sav02.Replace(" ", string.Empty)));
                }
                if (Race_Sav02 == "07")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothWhiskersLeft_X), MemoryManager.StringToByteArray(HrothWhiskersLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothWhiskersRight_X), MemoryManager.StringToByteArray(HrothWhiskersRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowLeft_X), MemoryManager.StringToByteArray(HrothEyebrowLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowRight_X), MemoryManager.StringToByteArray(HrothEyebrowRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBridge_X), MemoryManager.StringToByteArray(HrothBridge_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowLeft_X), MemoryManager.StringToByteArray(HrothBrowLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowRight_X), MemoryManager.StringToByteArray(HrothBrowRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothJawUpper_X), MemoryManager.StringToByteArray(HrothJawUpper_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpper_X), MemoryManager.StringToByteArray(HrothLipUpper_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperLeft_X), MemoryManager.StringToByteArray(HrothEyelidUpperLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperRight_X), MemoryManager.StringToByteArray(HrothEyelidUpperRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsLeft_X), MemoryManager.StringToByteArray(HrothLipsLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsRight_X), MemoryManager.StringToByteArray(HrothLipsRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperLeft_X), MemoryManager.StringToByteArray(HrothLipUpperLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperRight_X), MemoryManager.StringToByteArray(HrothLipUpperRight_Sav02.Replace(" ", string.Empty)));
                }
                if (Race_Sav02 == "08")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowLeft_X), MemoryManager.StringToByteArray(EyebrowLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowRight_X), MemoryManager.StringToByteArray(EyebrowRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBridge_X), MemoryManager.StringToByteArray(Bridge_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowLeft_X), MemoryManager.StringToByteArray(BrowLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowRight_X), MemoryManager.StringToByteArray(BrowRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothJawUpper_X), MemoryManager.StringToByteArray(VieraLipUpperB_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpper_X), MemoryManager.StringToByteArray(LipUpperA_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperLeft_X), MemoryManager.StringToByteArray(EyelidUpperLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperRight_X), MemoryManager.StringToByteArray(EyelidUpperRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsLeft_X), MemoryManager.StringToByteArray(LipsLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsRight_X), MemoryManager.StringToByteArray(LipsRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperLeft_X), MemoryManager.StringToByteArray(CheekLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperRight_X), MemoryManager.StringToByteArray(CheekRight_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (CharacterDetails.Race.value == 8)
            {
                if (Race_Sav02 == "01" || Race_Sav02 == "02" || Race_Sav02 == "03" || Race_Sav02 == "04" || Race_Sav02 == "05" || Race_Sav02 == "06")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(CheekLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(CheekRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(LipsLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(LipsRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(EyebrowLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(EyebrowRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(Bridge_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(BrowLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(BrowRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(LipUpperA_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(EyelidUpperLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(EyelidUpperRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerA_X), MemoryManager.StringToByteArray(VieraEar01ALeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipUpperB_X), MemoryManager.StringToByteArray(VieraEar01ARight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerB_X), MemoryManager.StringToByteArray(VieraEar02ALeft_Sav02.Replace(" ", string.Empty)));
                }
                if (Race_Sav02 == "07")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(HrothLipUpperLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(HrothLipUpperRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(HrothLipsLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(HrothLipsRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(HrothEyebrowLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(HrothEyebrowRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(HrothBridge_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(HrothBrowLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(HrothBrowRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(HrothLipUpper_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(HrothEyelidUpperLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(HrothEyelidUpperRight_Sav02.Replace(" ", string.Empty)));
                }
                if (Race_Sav02 == "08")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(CheekLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(CheekRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(LipsLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(LipsRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(EyebrowLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(EyebrowRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(Bridge_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(BrowLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(BrowRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(LipUpperA_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(EyelidUpperLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(EyelidUpperRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01ALeft_X), MemoryManager.StringToByteArray(VieraEar01ALeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01ARight_X), MemoryManager.StringToByteArray(VieraEar01ARight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02ALeft_X), MemoryManager.StringToByteArray(VieraEar02ALeft_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (HrothLipLower_Sav02 != "null" || VieraEar02ARight_Sav02 != "null")
            {
                if (CharacterDetails.Race.value == 7)
                {
                    if (Race_Sav02 == "07")
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipLower_X), MemoryManager.StringToByteArray(HrothLipLower_Sav02.Replace(" ", string.Empty)));
                    }
                }
                if (CharacterDetails.Race.value == 8)
                {
                    if (Race_Sav02 == "08")
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02ARight_X), MemoryManager.StringToByteArray(VieraEar02ARight_Sav02.Replace(" ", string.Empty)));
                    }
                }
            }
            if (VieraEar03ALeft_Sav02 != "null")
            {
                if (CharacterDetails.Race.value < 7)
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerA_X), MemoryManager.StringToByteArray(VieraLipLowerA_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperB_X), MemoryManager.StringToByteArray(VieraLipUpperB_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerB_X), MemoryManager.StringToByteArray(VieraLipLowerB_Sav02.Replace(" ", string.Empty)));
                }
                if (CharacterDetails.Race.value == 8)
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03ALeft_X), MemoryManager.StringToByteArray(VieraEar03ALeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03ARight_X), MemoryManager.StringToByteArray(VieraEar03ARight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04ALeft_X), MemoryManager.StringToByteArray(VieraEar04ALeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04ARight_X), MemoryManager.StringToByteArray(VieraEar04ARight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerA_X), MemoryManager.StringToByteArray(VieraLipLowerA_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipUpperB_X), MemoryManager.StringToByteArray(VieraLipUpperB_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01BLeft_X), MemoryManager.StringToByteArray(VieraEar01BLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01BRight_X), MemoryManager.StringToByteArray(VieraEar01BRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02BLeft_X), MemoryManager.StringToByteArray(VieraEar02BLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02BRight_X), MemoryManager.StringToByteArray(VieraEar02BRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03BLeft_X), MemoryManager.StringToByteArray(VieraEar03BLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03BRight_X), MemoryManager.StringToByteArray(VieraEar03BRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04BLeft_X), MemoryManager.StringToByteArray(VieraEar04BLeft_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04BRight_X), MemoryManager.StringToByteArray(VieraEar04BRight_Sav02.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerB_X), MemoryManager.StringToByteArray(VieraLipLowerB_Sav02.Replace(" ", string.Empty)));
                }
            }
        }
#endregion
#region Savestate\Loadstate Hair
        private void SavestateHair01_Click(object sender, RoutedEventArgs e)
        {
            HairSaved01 = true;
            if (CharacterDetails.BoneEditMode) LoadstateHair01.IsEnabled = true;

            HairA_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairA_X), 16));
            HairFrontLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairFrontLeft_X), 16));
            HairFrontRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairFrontRight_X), 16));
            HairB_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairB_X), 16));
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 1)
            {
                ExRootHair_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExRootHair_X), 16));
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 2)
            {
                ExHairA_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairA_X), 16));
            }
            else
            {
                ExHairA_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 3)
            {
                ExHairB_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairB_X), 16));
            }
            else
            {
                ExHairB_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 4)
            {
                ExHairC_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairC_X), 16));
            }
            else
            {
                ExHairC_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 5)
            {
                ExHairD_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairD_X), 16));
            }
            else
            {
                ExHairD_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 6)
            {
                ExHairE_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairE_X), 16));
            }
            else
            {
                ExHairE_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 7)
            {
                ExHairF_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairF_X), 16));
            }
            else
            {
                ExHairF_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 8)
            {
                ExHairG_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairG_X), 16));
            }
            else
            {
                ExHairG_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 9)
            {
                ExHairH_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairH_X), 16));
            }
            else
            {
                ExHairH_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 10)
            {
                ExHairI_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairI_X), 16));
            }
            else
            {
                ExHairI_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 11)
            {
                ExHairJ_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairJ_X), 16));
            }
            else
            {
                ExHairJ_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 12)
            {
                ExHairK_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairK_X), 16));
            }
            else
            {
                ExHairK_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 13)
            {
                ExHairL_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairL_X), 16));
            }
            else
            {
                ExHairL_Sav01 = "null";
            }
            if (ExRootHair_Sav01 == null)
            {
                ExRootHair_Sav01 = "null";
                ExHairA_Sav01 = "null";
                ExHairB_Sav01 = "null";
                ExHairC_Sav01 = "null";
                ExHairD_Sav01 = "null";
                ExHairE_Sav01 = "null";
                ExHairF_Sav01 = "null";
                ExHairG_Sav01 = "null";
                ExHairH_Sav01 = "null";
                ExHairI_Sav01 = "null";
                ExHairJ_Sav01 = "null";
                ExHairK_Sav01 = "null";
                ExHairL_Sav01 = "null";
            }
        }
        private void SavestateHair02_Click(object sender, RoutedEventArgs e)
        {
            HairSaved02 = true;
            if (CharacterDetails.BoneEditMode) LoadstateHair02.IsEnabled = true;

            HairA_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairA_X), 16));
            HairFrontLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairFrontLeft_X), 16));
            HairFrontRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairFrontRight_X), 16));
            HairB_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairB_X), 16));
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 1)
            {
                ExRootHair_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExRootHair_X), 16));
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 2)
            {
                ExHairA_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairA_X), 16));
            }
            else
            {
                ExHairA_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 3)
            {
                ExHairB_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairB_X), 16));
            }
            else
            {
                ExHairB_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 4)
            {
                ExHairC_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairC_X), 16));
            }
            else
            {
                ExHairC_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 5)
            {
                ExHairD_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairD_X), 16));
            }
            else
            {
                ExHairD_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 6)
            {
                ExHairE_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairE_X), 16));
            }
            else
            {
                ExHairE_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 7)
            {
                ExHairF_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairF_X), 16));
            }
            else
            {
                ExHairF_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 8)
            {
                ExHairG_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairG_X), 16));
            }
            else
            {
                ExHairG_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 9)
            {
                ExHairH_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairH_X), 16));
            }
            else
            {
                ExHairH_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 10)
            {
                ExHairI_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairI_X), 16));
            }
            else
            {
                ExHairI_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 11)
            {
                ExHairJ_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairJ_X), 16));
            }
            else
            {
                ExHairJ_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 12)
            {
                ExHairK_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairK_X), 16));
            }
            else
            {
                ExHairK_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 13)
            {
                ExHairL_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairL_X), 16));
            }
            else
            {
                ExHairL_Sav02 = "null";
            }
            if (ExRootHair_Sav02 == null)
            {
                ExRootHair_Sav02 = "null";
                ExHairA_Sav02 = "null";
                ExHairB_Sav02 = "null";
                ExHairC_Sav02 = "null";
                ExHairD_Sav02 = "null";
                ExHairE_Sav02 = "null";
                ExHairF_Sav02 = "null";
                ExHairG_Sav02 = "null";
                ExHairH_Sav02 = "null";
                ExHairI_Sav02 = "null";
                ExHairJ_Sav02 = "null";
                ExHairK_Sav02 = "null";
                ExHairL_Sav02 = "null";
            }
        }
        private void LoadstateHair01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairA_X), MemoryManager.StringToByteArray(HairA_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairFrontLeft_X), MemoryManager.StringToByteArray(HairFrontLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairFrontRight_X), MemoryManager.StringToByteArray(HairFrontRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairB_X), MemoryManager.StringToByteArray(HairB_Sav01.Replace(" ", string.Empty)));
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 2)
            {
                if (ExHairA_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairA_X), MemoryManager.StringToByteArray(ExHairA_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 3)
            {
                if (ExHairB_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairB_X), MemoryManager.StringToByteArray(ExHairB_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 4)
            {
                if (ExHairC_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairC_X), MemoryManager.StringToByteArray(ExHairC_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 5)
            {
                if (ExHairD_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairD_X), MemoryManager.StringToByteArray(ExHairD_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 6)
            {
                if (ExHairE_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairE_X), MemoryManager.StringToByteArray(ExHairE_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 7)
            {
                if (ExHairF_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairF_X), MemoryManager.StringToByteArray(ExHairF_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 8)
            {
                if (ExHairG_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairG_X), MemoryManager.StringToByteArray(ExHairG_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 9)
            {
                if (ExHairH_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairH_X), MemoryManager.StringToByteArray(ExHairH_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 10)
            {
                if (ExHairI_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairI_X), MemoryManager.StringToByteArray(ExHairI_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 11)
            {
                if (ExHairJ_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairJ_X), MemoryManager.StringToByteArray(ExHairJ_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 12)
            {
                if (ExHairK_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairK_X), MemoryManager.StringToByteArray(ExHairK_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 13)
            {
                if (ExHairL_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairL_X), MemoryManager.StringToByteArray(ExHairL_Sav01.Replace(" ", string.Empty)));
                }
            }
        }
        private void LoadstateHair02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairA_X), MemoryManager.StringToByteArray(HairA_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairFrontLeft_X), MemoryManager.StringToByteArray(HairFrontLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairFrontRight_X), MemoryManager.StringToByteArray(HairFrontRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairB_X), MemoryManager.StringToByteArray(HairB_Sav02.Replace(" ", string.Empty)));
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 2)
            {
                if (ExHairA_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairA_X), MemoryManager.StringToByteArray(ExHairA_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 3)
            {
                if (ExHairB_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairB_X), MemoryManager.StringToByteArray(ExHairB_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 4)
            {
                if (ExHairC_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairC_X), MemoryManager.StringToByteArray(ExHairC_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 5)
            {
                if (ExHairD_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairD_X), MemoryManager.StringToByteArray(ExHairD_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 6)
            {
                if (ExHairE_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairE_X), MemoryManager.StringToByteArray(ExHairE_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 7)
            {
                if (ExHairF_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairF_X), MemoryManager.StringToByteArray(ExHairF_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 8)
            {
                if (ExHairG_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairG_X), MemoryManager.StringToByteArray(ExHairG_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 9)
            {
                if (ExHairH_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairH_X), MemoryManager.StringToByteArray(ExHairH_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 10)
            {
                if (ExHairI_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairI_X), MemoryManager.StringToByteArray(ExHairI_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 11)
            {
                if (ExHairJ_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairJ_X), MemoryManager.StringToByteArray(ExHairJ_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 12)
            {
                if (ExHairK_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairK_X), MemoryManager.StringToByteArray(ExHairK_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 13)
            {
                if (ExHairL_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairL_X), MemoryManager.StringToByteArray(ExHairL_Sav02.Replace(" ", string.Empty)));
                }
            }
        }
#endregion
#region Savestate\Loadstate Earrings
        private void SavestateEarrings01_Click(object sender, RoutedEventArgs e)
        {
            EarringsSaved01 = true;
            if (CharacterDetails.BoneEditMode) LoadstateEarrings01.IsEnabled = true;

            EarringALeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringALeft_X), 16));
            EarringARight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringARight_X), 16));
            EarringBLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringBLeft_X), 16));
            EarringBRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringBRight_X), 16));
        }
        private void SavestateEarrings02_Click(object sender, RoutedEventArgs e)
        {
            EarringsSaved02 = true;
            if (CharacterDetails.BoneEditMode) LoadstateEarrings02.IsEnabled = true;

            EarringALeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringALeft_X), 16));
            EarringARight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringARight_X), 16));
            EarringBLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringBLeft_X), 16));
            EarringBRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringBRight_X), 16));
        }
        private void LoadstateEarrings01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringALeft_X), MemoryManager.StringToByteArray(EarringALeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringARight_X), MemoryManager.StringToByteArray(EarringARight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringBLeft_X), MemoryManager.StringToByteArray(EarringBLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringBRight_X), MemoryManager.StringToByteArray(EarringBRight_Sav01.Replace(" ", string.Empty)));
        }
        private void LoadstateEarrings02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringALeft_X), MemoryManager.StringToByteArray(EarringALeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringARight_X), MemoryManager.StringToByteArray(EarringARight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringBLeft_X), MemoryManager.StringToByteArray(EarringBLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringBRight_X), MemoryManager.StringToByteArray(EarringBRight_Sav02.Replace(" ", string.Empty)));
        }
#endregion
#region Savestate\Loadstate Body
        private void SavestateBody01_Click(object sender, RoutedEventArgs e)
        {
            BodySaved01 = true;
            if (CharacterDetails.BoneEditMode) LoadstateBody01.IsEnabled = true;

            SpineA_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineA_X), 16));
            SpineB_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineB_X), 16));
            BreastLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BreastLeft_X), 16));
            BreastRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BreastRight_X), 16));
            SpineC_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineC_X), 16));
            ScabbardLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ScabbardLeft_X), 16));
            ScabbardRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ScabbardRight_X), 16));
            Neck_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Neck_X), 16));
        }
        private void SavestateBody02_Click(object sender, RoutedEventArgs e)
        {
            BodySaved02 = true;
            if (CharacterDetails.BoneEditMode) LoadstateBody02.IsEnabled = true;

            SpineA_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineA_X), 16));
            SpineB_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineB_X), 16));
            BreastLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BreastLeft_X), 16));
            BreastRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BreastRight_X), 16));
            SpineC_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineC_X), 16));
            ScabbardLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ScabbardLeft_X), 16));
            ScabbardRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ScabbardRight_X), 16));
            Neck_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Neck_X), 16));
        }
        private void LoadstateBody01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineA_X), MemoryManager.StringToByteArray(SpineA_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineB_X), MemoryManager.StringToByteArray(SpineB_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BreastLeft_X), MemoryManager.StringToByteArray(BreastLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BreastRight_X), MemoryManager.StringToByteArray(BreastRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineC_X), MemoryManager.StringToByteArray(SpineC_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ScabbardLeft_X), MemoryManager.StringToByteArray(ScabbardLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ScabbardRight_X), MemoryManager.StringToByteArray(ScabbardRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Neck_X), MemoryManager.StringToByteArray(Neck_Sav01.Replace(" ", string.Empty)));
        }
        private void LoadstateBody02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineA_X), MemoryManager.StringToByteArray(SpineA_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineB_X), MemoryManager.StringToByteArray(SpineB_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BreastLeft_X), MemoryManager.StringToByteArray(BreastLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BreastRight_X), MemoryManager.StringToByteArray(BreastRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineC_X), MemoryManager.StringToByteArray(SpineC_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ScabbardLeft_X), MemoryManager.StringToByteArray(ScabbardLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ScabbardRight_X), MemoryManager.StringToByteArray(ScabbardRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Neck_X), MemoryManager.StringToByteArray(Neck_Sav02.Replace(" ", string.Empty)));
        }
#endregion
#region Savestate\Loadstate LeftArm
        private void SavestateLeftArm01_Click(object sender, RoutedEventArgs e)
        {
            LeftArmSaved01 = true;
            if (CharacterDetails.BoneEditMode) LoadstateLeftArm01.IsEnabled = true;

            ClavicleLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClavicleLeft_X), 16));
            ArmLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmLeft_X), 16));
            ArmRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmRight_X), 16));
            PauldronLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PauldronLeft_X), 16));
            ForearmLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ForearmLeft_X), 16));
            ShoulderLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShoulderLeft_X), 16));
            ShieldLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShieldLeft_X), 16));
            ElbowLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ElbowLeft_X), 16));
            CouterLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CouterLeft_X), 16));
            WristLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WristLeft_X), 16));
        }
        private void SavestateLeftArm02_Click(object sender, RoutedEventArgs e)
        {
            LeftArmSaved02 = true;
            if (CharacterDetails.BoneEditMode) LoadstateLeftArm02.IsEnabled = true;

            ClavicleLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClavicleLeft_X), 16));
            ArmLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmLeft_X), 16));
            ArmRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmRight_X), 16));
            PauldronLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PauldronLeft_X), 16));
            ForearmLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ForearmLeft_X), 16));
            ShoulderLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShoulderLeft_X), 16));
            ShieldLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShieldLeft_X), 16));
            ElbowLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ElbowLeft_X), 16));
            CouterLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CouterLeft_X), 16));
            WristLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WristLeft_X), 16));
        }
        private void LoadstateLeftArm01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClavicleLeft_X), MemoryManager.StringToByteArray(ClavicleLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmLeft_X), MemoryManager.StringToByteArray(ArmLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PauldronLeft_X), MemoryManager.StringToByteArray(PauldronLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ForearmLeft_X), MemoryManager.StringToByteArray(ForearmLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShoulderLeft_X), MemoryManager.StringToByteArray(ShoulderLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShieldLeft_X), MemoryManager.StringToByteArray(ShieldLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ElbowLeft_X), MemoryManager.StringToByteArray(ElbowLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CouterLeft_X), MemoryManager.StringToByteArray(CouterLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WristLeft_X), MemoryManager.StringToByteArray(WristLeft_Sav01.Replace(" ", string.Empty)));
        }
        private void LoadstateLeftArm02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClavicleLeft_X), MemoryManager.StringToByteArray(ClavicleLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmLeft_X), MemoryManager.StringToByteArray(ArmLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PauldronLeft_X), MemoryManager.StringToByteArray(PauldronLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ForearmLeft_X), MemoryManager.StringToByteArray(ForearmLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShoulderLeft_X), MemoryManager.StringToByteArray(ShoulderLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShieldLeft_X), MemoryManager.StringToByteArray(ShieldLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ElbowLeft_X), MemoryManager.StringToByteArray(ElbowLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CouterLeft_X), MemoryManager.StringToByteArray(CouterLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WristLeft_X), MemoryManager.StringToByteArray(WristLeft_Sav02.Replace(" ", string.Empty)));
        }
#endregion
#region Savestate\Loadstate RightArm
        private void SavestateRightArm01_Click(object sender, RoutedEventArgs e)
        {
            RightArmSaved01 = true;
            if (CharacterDetails.BoneEditMode) LoadstateRightArm01.IsEnabled = true;

            ClavicleRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClavicleRight_X), 16));
            ArmRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmRight_X), 16));
            ArmRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmRight_X), 16));
            PauldronRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PauldronRight_X), 16));
            ForearmRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ForearmRight_X), 16));
            ShoulderRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShoulderRight_X), 16));
            ShieldRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShieldRight_X), 16));
            ElbowRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ElbowRight_X), 16));
            CouterRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CouterRight_X), 16));
            WristRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WristRight_X), 16));
        }
        private void SavestateRightArm02_Click(object sender, RoutedEventArgs e)
        {
            RightArmSaved02 = true;
            if (CharacterDetails.BoneEditMode) LoadstateRightArm02.IsEnabled = true;

            ClavicleRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClavicleRight_X), 16));
            ArmRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmRight_X), 16));
            ArmRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmRight_X), 16));
            PauldronRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PauldronRight_X), 16));
            ForearmRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ForearmRight_X), 16));
            ShoulderRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShoulderRight_X), 16));
            ShieldRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShieldRight_X), 16));
            ElbowRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ElbowRight_X), 16));
            CouterRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CouterRight_X), 16));
            WristRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WristRight_X), 16));
        }
        private void LoadstateRightArm01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClavicleRight_X), MemoryManager.StringToByteArray(ClavicleRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmRight_X), MemoryManager.StringToByteArray(ArmRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PauldronRight_X), MemoryManager.StringToByteArray(PauldronRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ForearmRight_X), MemoryManager.StringToByteArray(ForearmRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShoulderRight_X), MemoryManager.StringToByteArray(ShoulderRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShieldRight_X), MemoryManager.StringToByteArray(ShieldRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ElbowRight_X), MemoryManager.StringToByteArray(ElbowRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CouterRight_X), MemoryManager.StringToByteArray(CouterRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WristRight_X), MemoryManager.StringToByteArray(WristRight_Sav01.Replace(" ", string.Empty)));
        }
        private void LoadstateRightArm02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClavicleRight_X), MemoryManager.StringToByteArray(ClavicleRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmRight_X), MemoryManager.StringToByteArray(ArmRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PauldronRight_X), MemoryManager.StringToByteArray(PauldronRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ForearmRight_X), MemoryManager.StringToByteArray(ForearmRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShoulderRight_X), MemoryManager.StringToByteArray(ShoulderRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShieldRight_X), MemoryManager.StringToByteArray(ShieldRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ElbowRight_X), MemoryManager.StringToByteArray(ElbowRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CouterRight_X), MemoryManager.StringToByteArray(CouterRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WristRight_X), MemoryManager.StringToByteArray(WristRight_Sav02.Replace(" ", string.Empty)));
        }
#endregion
#region Savestate\Loadstate Clothes
        private void SavestateClothes01_Click(object sender, RoutedEventArgs e)
        {
            ClothesSaved01 = true;
            if (CharacterDetails.BoneEditMode) LoadstateClothes01.IsEnabled = true;

            ClothBackALeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackALeft_X), 16));
            ClothBackARight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackARight_X), 16));
            ClothFrontALeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontALeft_X), 16));
            ClothFrontARight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontARight_X), 16));
            ClothSideALeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideALeft_X), 16));
            ClothSideARight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideARight_X), 16));
            ClothBackBLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackBLeft_X), 16));
            ClothBackBRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackBRight_X), 16));
            ClothFrontBLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontBLeft_X), 16));
            ClothFrontBRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontBRight_X), 16));
            ClothSideBLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideBLeft_X), 16));
            ClothSideBRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideBRight_X), 16));
            ClothBackCLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackCLeft_X), 16));
            ClothBackCRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackCRight_X), 16));
            ClothFrontCLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontCLeft_X), 16));
            ClothFrontCRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontCRight_X), 16));
            ClothSideCLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideCLeft_X), 16));
            ClothSideCRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideCRight_X), 16));
        }
        private void SavestateClothes02_Click(object sender, RoutedEventArgs e)
        {
            ClothesSaved02 = true;
            if (CharacterDetails.BoneEditMode) LoadstateClothes02.IsEnabled = true;

            ClothBackALeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackALeft_X), 16));
            ClothBackARight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackARight_X), 16));
            ClothFrontALeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontALeft_X), 16));
            ClothFrontARight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontARight_X), 16));
            ClothSideALeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideALeft_X), 16));
            ClothSideARight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideARight_X), 16));
            ClothBackBLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackBLeft_X), 16));
            ClothBackBRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackBRight_X), 16));
            ClothFrontBLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontBLeft_X), 16));
            ClothFrontBRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontBRight_X), 16));
            ClothSideBLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideBLeft_X), 16));
            ClothSideBRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideBRight_X), 16));
            ClothBackCLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackCLeft_X), 16));
            ClothBackCRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackCRight_X), 16));
            ClothFrontCLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontCLeft_X), 16));
            ClothFrontCRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontCRight_X), 16));
            ClothSideCLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideCLeft_X), 16));
            ClothSideCRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideCRight_X), 16));
        }
        private void LoadstateClothes01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackALeft_X), MemoryManager.StringToByteArray(ClothBackALeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackARight_X), MemoryManager.StringToByteArray(ClothBackARight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontALeft_X), MemoryManager.StringToByteArray(ClothFrontALeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontARight_X), MemoryManager.StringToByteArray(ClothFrontARight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideALeft_X), MemoryManager.StringToByteArray(ClothSideALeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideARight_X), MemoryManager.StringToByteArray(ClothSideARight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackBLeft_X), MemoryManager.StringToByteArray(ClothBackBLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackBRight_X), MemoryManager.StringToByteArray(ClothBackBRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontBLeft_X), MemoryManager.StringToByteArray(ClothFrontBLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontBRight_X), MemoryManager.StringToByteArray(ClothFrontBRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideBLeft_X), MemoryManager.StringToByteArray(ClothSideBLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideBRight_X), MemoryManager.StringToByteArray(ClothSideBRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackCLeft_X), MemoryManager.StringToByteArray(ClothBackCLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackCRight_X), MemoryManager.StringToByteArray(ClothBackCRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontCLeft_X), MemoryManager.StringToByteArray(ClothFrontCLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontCRight_X), MemoryManager.StringToByteArray(ClothFrontCRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideCLeft_X), MemoryManager.StringToByteArray(ClothSideCLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideCRight_X), MemoryManager.StringToByteArray(ClothSideCRight_Sav01.Replace(" ", string.Empty)));
        }
        private void LoadstateClothes02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackALeft_X), MemoryManager.StringToByteArray(ClothBackALeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackARight_X), MemoryManager.StringToByteArray(ClothBackARight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontALeft_X), MemoryManager.StringToByteArray(ClothFrontALeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontARight_X), MemoryManager.StringToByteArray(ClothFrontARight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideALeft_X), MemoryManager.StringToByteArray(ClothSideALeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideARight_X), MemoryManager.StringToByteArray(ClothSideARight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackBLeft_X), MemoryManager.StringToByteArray(ClothBackBLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackBRight_X), MemoryManager.StringToByteArray(ClothBackBRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontBLeft_X), MemoryManager.StringToByteArray(ClothFrontBLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontBRight_X), MemoryManager.StringToByteArray(ClothFrontBRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideBLeft_X), MemoryManager.StringToByteArray(ClothSideBLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideBRight_X), MemoryManager.StringToByteArray(ClothSideBRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackCLeft_X), MemoryManager.StringToByteArray(ClothBackCLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackCRight_X), MemoryManager.StringToByteArray(ClothBackCRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontCLeft_X), MemoryManager.StringToByteArray(ClothFrontCLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontCRight_X), MemoryManager.StringToByteArray(ClothFrontCRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideCLeft_X), MemoryManager.StringToByteArray(ClothSideCLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideCRight_X), MemoryManager.StringToByteArray(ClothSideCRight_Sav02.Replace(" ", string.Empty)));
        }
#endregion
#region Savestate\Loadstate Weapons
        private void SavestateWeapons01_Click(object sender, RoutedEventArgs e)
        {
            WeaponsSaved01 = true;
            if (CharacterDetails.BoneEditMode) LoadstateWeapons01.IsEnabled = true;

            WeaponLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WeaponLeft_X), 16));
            WeaponRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WeaponRight_X), 16));
        }
        private void SavestateWeapons02_Click(object sender, RoutedEventArgs e)
        {
            WeaponsSaved02 = true;
            if (CharacterDetails.BoneEditMode) LoadstateWeapons02.IsEnabled = true;

            WeaponLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WeaponLeft_X), 16));
            WeaponRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WeaponRight_X), 16));
        }
        private void LoadstateWeapons01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WeaponLeft_X), MemoryManager.StringToByteArray(WeaponLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WeaponRight_X), MemoryManager.StringToByteArray(WeaponRight_Sav01.Replace(" ", string.Empty)));
        }
        private void LoadstateWeapons02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WeaponLeft_X), MemoryManager.StringToByteArray(WeaponLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WeaponRight_X), MemoryManager.StringToByteArray(WeaponRight_Sav02.Replace(" ", string.Empty)));
        }
#endregion
#region Savestate\Loadstate LeftHand
        private void SavestateLeftHand01_Click(object sender, RoutedEventArgs e)
        {
            LeftHandSaved01 = true;
            if (CharacterDetails.BoneEditMode) LoadstateLeftHand01.IsEnabled = true;

            HandLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HandLeft_X), 16));
            IndexALeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexALeft_X), 16));
            PinkyALeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyALeft_X), 16));
            RingALeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingALeft_X), 16));
            MiddleALeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleALeft_X), 16));
            ThumbALeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbALeft_X), 16));
            IndexBLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexBLeft_X), 16));
            PinkyBLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyBLeft_X), 16));
            RingBLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingBLeft_X), 16));
            MiddleBLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleBLeft_X), 16));
            ThumbBLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbBLeft_X), 16));
        }
        private void SavestateLeftHand02_Click(object sender, RoutedEventArgs e)
        {
            LeftHandSaved02 = true;
            if (CharacterDetails.BoneEditMode) LoadstateLeftHand02.IsEnabled = true;

            HandLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HandLeft_X), 16));
            IndexALeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexALeft_X), 16));
            PinkyALeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyALeft_X), 16));
            RingALeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingALeft_X), 16));
            MiddleALeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleALeft_X), 16));
            ThumbALeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbALeft_X), 16));
            IndexBLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexBLeft_X), 16));
            PinkyBLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyBLeft_X), 16));
            RingBLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingBLeft_X), 16));
            MiddleBLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleBLeft_X), 16));
            ThumbBLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbBLeft_X), 16));
        }
        private void LoadstateLeftHand01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HandLeft_X), MemoryManager.StringToByteArray(HandLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexALeft_X), MemoryManager.StringToByteArray(IndexALeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyALeft_X), MemoryManager.StringToByteArray(PinkyALeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingALeft_X), MemoryManager.StringToByteArray(RingALeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleALeft_X), MemoryManager.StringToByteArray(MiddleALeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbALeft_X), MemoryManager.StringToByteArray(ThumbALeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexBLeft_X), MemoryManager.StringToByteArray(IndexBLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyBLeft_X), MemoryManager.StringToByteArray(PinkyBLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingBLeft_X), MemoryManager.StringToByteArray(RingBLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleBLeft_X), MemoryManager.StringToByteArray(MiddleBLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbBLeft_X), MemoryManager.StringToByteArray(ThumbBLeft_Sav01.Replace(" ", string.Empty)));
        }
        private void LoadstateLeftHand02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HandLeft_X), MemoryManager.StringToByteArray(HandLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexALeft_X), MemoryManager.StringToByteArray(IndexALeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyALeft_X), MemoryManager.StringToByteArray(PinkyALeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingALeft_X), MemoryManager.StringToByteArray(RingALeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleALeft_X), MemoryManager.StringToByteArray(MiddleALeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbALeft_X), MemoryManager.StringToByteArray(ThumbALeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexBLeft_X), MemoryManager.StringToByteArray(IndexBLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyBLeft_X), MemoryManager.StringToByteArray(PinkyBLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingBLeft_X), MemoryManager.StringToByteArray(RingBLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleBLeft_X), MemoryManager.StringToByteArray(MiddleBLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbBLeft_X), MemoryManager.StringToByteArray(ThumbBLeft_Sav02.Replace(" ", string.Empty)));
        }
#endregion
#region Savestate\Loadstate RightHand
        private void SavestateRightHand01_Click(object sender, RoutedEventArgs e)
        {
            RightHandSaved01 = true;
            if (CharacterDetails.BoneEditMode) LoadstateRightHand01.IsEnabled = true;

            HandRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HandRight_X), 16));
            IndexARight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexARight_X), 16));
            PinkyARight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyARight_X), 16));
            RingARight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingARight_X), 16));
            MiddleARight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleARight_X), 16));
            ThumbARight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbARight_X), 16));
            IndexBRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexBRight_X), 16));
            PinkyBRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyBRight_X), 16));
            RingBRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingBRight_X), 16));
            MiddleBRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleBRight_X), 16));
            ThumbBRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbBRight_X), 16));
        }
        private void SavestateRightHand02_Click(object sender, RoutedEventArgs e)
        {
            RightHandSaved02 = true;
            if (CharacterDetails.BoneEditMode) LoadstateRightHand02.IsEnabled = true;

            HandRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HandRight_X), 16));
            IndexARight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexARight_X), 16));
            PinkyARight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyARight_X), 16));
            RingARight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingARight_X), 16));
            MiddleARight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleARight_X), 16));
            ThumbARight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbARight_X), 16));
            IndexBRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexBRight_X), 16));
            PinkyBRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyBRight_X), 16));
            RingBRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingBRight_X), 16));
            MiddleBRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleBRight_X), 16));
            ThumbBRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbBRight_X), 16));
        }
        private void LoadstateRightHand01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HandRight_X), MemoryManager.StringToByteArray(HandRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexARight_X), MemoryManager.StringToByteArray(IndexARight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyARight_X), MemoryManager.StringToByteArray(PinkyARight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingARight_X), MemoryManager.StringToByteArray(RingARight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleARight_X), MemoryManager.StringToByteArray(MiddleARight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbARight_X), MemoryManager.StringToByteArray(ThumbARight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexBRight_X), MemoryManager.StringToByteArray(IndexBRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyBRight_X), MemoryManager.StringToByteArray(PinkyBRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingBRight_X), MemoryManager.StringToByteArray(RingBRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleBRight_X), MemoryManager.StringToByteArray(MiddleBRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbBRight_X), MemoryManager.StringToByteArray(ThumbBRight_Sav01.Replace(" ", string.Empty)));
        }
        private void LoadstateRightHand02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HandRight_X), MemoryManager.StringToByteArray(HandRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexARight_X), MemoryManager.StringToByteArray(IndexARight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyARight_X), MemoryManager.StringToByteArray(PinkyARight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingARight_X), MemoryManager.StringToByteArray(RingARight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleARight_X), MemoryManager.StringToByteArray(MiddleARight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbARight_X), MemoryManager.StringToByteArray(ThumbARight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexBRight_X), MemoryManager.StringToByteArray(IndexBRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyBRight_X), MemoryManager.StringToByteArray(PinkyBRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingBRight_X), MemoryManager.StringToByteArray(RingBRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleBRight_X), MemoryManager.StringToByteArray(MiddleBRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbBRight_X), MemoryManager.StringToByteArray(ThumbBRight_Sav02.Replace(" ", string.Empty)));
        }
#endregion
#region Savestate\Loadstate Waist
        private void SavestateWaist01_Click(object sender, RoutedEventArgs e)
        {
            WaistSaved01 = true;
            if (CharacterDetails.BoneEditMode) LoadstateWaist01.IsEnabled = true;

            Waist_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Waist_X), 16));
            HolsterLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HolsterLeft_X), 16));
            HolsterRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HolsterRight_X), 16));
            SheatheLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SheatheLeft_X), 16));
            SheatheRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SheatheRight_X), 16));
            if (CharacterDetails.Race.value == 4 || CharacterDetails.Race.value == 6 || CharacterDetails.Race.value == 7)
            {
                TailA_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailA_X), 16));
                TailB_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailB_X), 16));
                TailC_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailC_X), 16));
                TailD_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailD_X), 16));
                TailE_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailE_X), 16));
            }
            else
            {
                TailA_Sav01 = "null";
                TailB_Sav01 = "null";
                TailC_Sav01 = "null";
                TailD_Sav01 = "null";
                TailE_Sav01 = "null";
            }
        }
        private void SavestateWaist02_Click(object sender, RoutedEventArgs e)
        {
            WaistSaved02 = true;
            if (CharacterDetails.BoneEditMode) LoadstateWaist02.IsEnabled = true;

            Waist_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Waist_X), 16));
            HolsterLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HolsterLeft_X), 16));
            HolsterRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HolsterRight_X), 16));
            SheatheLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SheatheLeft_X), 16));
            SheatheRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SheatheRight_X), 16));
            if (CharacterDetails.Race.value == 4 || CharacterDetails.Race.value == 6 || CharacterDetails.Race.value == 7)
            {
                TailA_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailA_X), 16));
                TailB_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailB_X), 16));
                TailC_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailC_X), 16));
                TailD_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailD_X), 16));
                TailE_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailE_X), 16));
            }
            else
            {
                TailA_Sav02 = "null";
                TailB_Sav02 = "null";
                TailC_Sav02 = "null";
                TailD_Sav02 = "null";
                TailE_Sav02 = "null";
            }
        }
        private void LoadstateWaist01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Waist_X), MemoryManager.StringToByteArray(Waist_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HolsterLeft_X), MemoryManager.StringToByteArray(HolsterLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HolsterRight_X), MemoryManager.StringToByteArray(HolsterRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SheatheLeft_X), MemoryManager.StringToByteArray(SheatheLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SheatheRight_X), MemoryManager.StringToByteArray(SheatheRight_Sav01.Replace(" ", string.Empty)));
            if (TailA_Sav01 != "null")
            {
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailA_X), MemoryManager.StringToByteArray(TailA_Sav01.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailB_X), MemoryManager.StringToByteArray(TailB_Sav01.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailC_X), MemoryManager.StringToByteArray(TailC_Sav01.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailD_X), MemoryManager.StringToByteArray(TailD_Sav01.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailE_X), MemoryManager.StringToByteArray(TailE_Sav01.Replace(" ", string.Empty)));
            }
        }
        private void LoadstateWaist02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Waist_X), MemoryManager.StringToByteArray(Waist_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HolsterLeft_X), MemoryManager.StringToByteArray(HolsterLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HolsterRight_X), MemoryManager.StringToByteArray(HolsterRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SheatheLeft_X), MemoryManager.StringToByteArray(SheatheLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SheatheRight_X), MemoryManager.StringToByteArray(SheatheRight_Sav02.Replace(" ", string.Empty)));
            if (TailA_Sav02 != "null")
            {
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailA_X), MemoryManager.StringToByteArray(TailA_Sav02.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailB_X), MemoryManager.StringToByteArray(TailB_Sav02.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailC_X), MemoryManager.StringToByteArray(TailC_Sav02.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailD_X), MemoryManager.StringToByteArray(TailD_Sav02.Replace(" ", string.Empty)));
                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailE_X), MemoryManager.StringToByteArray(TailE_Sav02.Replace(" ", string.Empty)));
            }
        }
#endregion
#region Savestate\Loadstate LeftLeg
        private void SavestateLeftLeg01_Click(object sender, RoutedEventArgs e)
        {
            LeftLegSaved01 = true;
            if (CharacterDetails.BoneEditMode) LoadstateLeftLeg01.IsEnabled = true;

            LegLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LegLeft_X), 16));
            KneeLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.KneeLeft_X), 16));
            CalfLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CalfLeft_X), 16));
            PoleynLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PoleynLeft_X), 16));
            FootLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.FootLeft_X), 16));
            ToesLeft_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ToesLeft_X), 16));
        }
        private void SavestateLeftLeg02_Click(object sender, RoutedEventArgs e)
        {
            LeftLegSaved02 = true;
            if (CharacterDetails.BoneEditMode) LoadstateLeftLeg02.IsEnabled = true;

            LegLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LegLeft_X), 16));
            KneeLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.KneeLeft_X), 16));
            CalfLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CalfLeft_X), 16));
            PoleynLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PoleynLeft_X), 16));
            FootLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.FootLeft_X), 16));
            ToesLeft_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ToesLeft_X), 16));
        }
        private void LoadstateLeftLeg01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LegLeft_X), MemoryManager.StringToByteArray(LegLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.KneeLeft_X), MemoryManager.StringToByteArray(KneeLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CalfLeft_X), MemoryManager.StringToByteArray(CalfLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PoleynLeft_X), MemoryManager.StringToByteArray(PoleynLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.FootLeft_X), MemoryManager.StringToByteArray(FootLeft_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ToesLeft_X), MemoryManager.StringToByteArray(ToesLeft_Sav01.Replace(" ", string.Empty)));
        }
        private void LoadstateLeftLeg02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LegLeft_X), MemoryManager.StringToByteArray(LegLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.KneeLeft_X), MemoryManager.StringToByteArray(KneeLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CalfLeft_X), MemoryManager.StringToByteArray(CalfLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PoleynLeft_X), MemoryManager.StringToByteArray(PoleynLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.FootLeft_X), MemoryManager.StringToByteArray(FootLeft_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ToesLeft_X), MemoryManager.StringToByteArray(ToesLeft_Sav02.Replace(" ", string.Empty)));
        }
#endregion
#region Savestate\Loadstate RightLeg
        private void SavestateRightLeg01_Click(object sender, RoutedEventArgs e)
        {
            RightLegSaved01 = true;
            if (CharacterDetails.BoneEditMode) LoadstateRightLeg01.IsEnabled = true;

            LegRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LegRight_X), 16));
            KneeRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.KneeRight_X), 16));
            CalfRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CalfRight_X), 16));
            PoleynRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PoleynRight_X), 16));
            FootRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.FootRight_X), 16));
            ToesRight_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ToesRight_X), 16));
        }
        private void SavestateRightLeg02_Click(object sender, RoutedEventArgs e)
        {
            RightLegSaved02 = true;
            if (CharacterDetails.BoneEditMode) LoadstateRightLeg02.IsEnabled = true;

            LegRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LegRight_X), 16));
            KneeRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.KneeRight_X), 16));
            CalfRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CalfRight_X), 16));
            PoleynRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PoleynRight_X), 16));
            FootRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.FootRight_X), 16));
            ToesRight_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ToesRight_X), 16));
        }
        private void LoadstateRightLeg01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LegRight_X), MemoryManager.StringToByteArray(LegRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.KneeRight_X), MemoryManager.StringToByteArray(KneeRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CalfRight_X), MemoryManager.StringToByteArray(CalfRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PoleynRight_X), MemoryManager.StringToByteArray(PoleynRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.FootRight_X), MemoryManager.StringToByteArray(FootRight_Sav01.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ToesRight_X), MemoryManager.StringToByteArray(ToesRight_Sav01.Replace(" ", string.Empty)));
        }
        private void LoadstateRightLeg02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LegRight_X), MemoryManager.StringToByteArray(LegRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.KneeRight_X), MemoryManager.StringToByteArray(KneeRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CalfRight_X), MemoryManager.StringToByteArray(CalfRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PoleynRight_X), MemoryManager.StringToByteArray(PoleynRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.FootRight_X), MemoryManager.StringToByteArray(FootRight_Sav02.Replace(" ", string.Empty)));
            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ToesRight_X), MemoryManager.StringToByteArray(ToesRight_Sav02.Replace(" ", string.Empty)));
        }
#endregion
#region Savestate\Loadstate Helm
        private void SavestateHelm01_Click(object sender, RoutedEventArgs e)
        {
            HelmSaved01 = true;
            if (CharacterDetails.BoneEditMode) LoadstateHelm01.IsEnabled = true;

            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 1)
            {
                ExRootMet_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExRootMet_X), 16));
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 2)
            {
                ExMetA_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetA_X), 16));
            }
            else
            {
                ExMetA_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 3)
            {
                ExMetB_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetB_X), 16));
            }
            else
            {
                ExMetB_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 4)
            {
                ExMetC_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetC_X), 16));
            }
            else
            {
                ExMetC_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 5)
            {
                ExMetD_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetD_X), 16));
            }
            else
            {
                ExMetD_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 6)
            {
                ExMetE_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetE_X), 16));
            }
            else
            {
                ExMetE_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 7)
            {
                ExMetF_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetF_X), 16));
            }
            else
            {
                ExMetF_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 8)
            {
                ExMetG_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetG_X), 16));
            }
            else
            {
                ExMetG_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 9)
            {
                ExMetH_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetH_X), 16));
            }
            else
            {
                ExMetH_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 10)
            {
                ExMetI_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetI_X), 16));
            }
            else
            {
                ExMetI_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 11)
            {
                ExMetJ_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetJ_X), 16));
            }
            else
            {
                ExMetJ_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 12)
            {
                ExMetK_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetK_X), 16));
            }
            else
            {
                ExMetK_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 13)
            {
                ExMetL_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetL_X), 16));
            }
            else
            {
                ExMetL_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 14)
            {
                ExMetM_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetM_X), 16));
            }
            else
            {
                ExMetM_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 15)
            {
                ExMetN_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetN_X), 16));
            }
            else
            {
                ExMetN_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 16)
            {
                ExMetO_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetO_X), 16));
            }
            else
            {
                ExMetO_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 17)
            {
                ExMetP_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetP_X), 16));
            }
            else
            {
                ExMetP_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 18)
            {
                ExMetQ_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetQ_X), 16));
            }
            else
            {
                ExMetQ_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 19)
            {
                ExMetR_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetR_X), 16));
            }
            else
            {
                ExMetR_Sav01 = "null";
            }
            if (ExRootMet_Sav01 == null)
            {
                ExRootMet_Sav01 = "null";
                ExMetA_Sav01 = "null";
                ExMetB_Sav01 = "null";
                ExMetC_Sav01 = "null";
                ExMetD_Sav01 = "null";
                ExMetE_Sav01 = "null";
                ExMetF_Sav01 = "null";
                ExMetG_Sav01 = "null";
                ExMetH_Sav01 = "null";
                ExMetI_Sav01 = "null";
                ExMetJ_Sav01 = "null";
                ExMetK_Sav01 = "null";
                ExMetL_Sav01 = "null";
                ExMetM_Sav01 = "null";
                ExMetN_Sav01 = "null";
                ExMetO_Sav01 = "null";
                ExMetP_Sav01 = "null";
                ExMetQ_Sav01 = "null";
                ExMetR_Sav01 = "null";
            }
        }
        private void SavestateHelm02_Click(object sender, RoutedEventArgs e)
        {
            HelmSaved02 = true;
            if (CharacterDetails.BoneEditMode) LoadstateHelm02.IsEnabled = true;

            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 1)
            {
                ExRootMet_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExRootMet_X), 16));
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 2)
            {
                ExMetA_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetA_X), 16));
            }
            else
            {
                ExMetA_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 3)
            {
                ExMetB_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetB_X), 16));
            }
            else
            {
                ExMetB_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 4)
            {
                ExMetC_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetC_X), 16));
            }
            else
            {
                ExMetC_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 5)
            {
                ExMetD_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetD_X), 16));
            }
            else
            {
                ExMetD_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 6)
            {
                ExMetE_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetE_X), 16));
            }
            else
            {
                ExMetE_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 7)
            {
                ExMetF_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetF_X), 16));
            }
            else
            {
                ExMetF_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 8)
            {
                ExMetG_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetG_X), 16));
            }
            else
            {
                ExMetG_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 9)
            {
                ExMetH_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetH_X), 16));
            }
            else
            {
                ExMetH_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 10)
            {
                ExMetI_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetI_X), 16));
            }
            else
            {
                ExMetI_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 11)
            {
                ExMetJ_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetJ_X), 16));
            }
            else
            {
                ExMetJ_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 12)
            {
                ExMetK_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetK_X), 16));
            }
            else
            {
                ExMetK_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 13)
            {
                ExMetL_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetL_X), 16));
            }
            else
            {
                ExMetL_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 14)
            {
                ExMetM_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetM_X), 16));
            }
            else
            {
                ExMetM_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 15)
            {
                ExMetN_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetN_X), 16));
            }
            else
            {
                ExMetN_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 16)
            {
                ExMetO_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetO_X), 16));
            }
            else
            {
                ExMetO_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 17)
            {
                ExMetP_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetP_X), 16));
            }
            else
            {
                ExMetP_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 18)
            {
                ExMetQ_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetQ_X), 16));
            }
            else
            {
                ExMetQ_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 19)
            {
                ExMetR_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetR_X), 16));
            }
            else
            {
                ExMetR_Sav02 = "null";
            }
            if (ExRootMet_Sav02 == null)
            {
                ExRootMet_Sav02 = "null";
                ExMetA_Sav02 = "null";
                ExMetB_Sav02 = "null";
                ExMetC_Sav02 = "null";
                ExMetD_Sav02 = "null";
                ExMetE_Sav02 = "null";
                ExMetF_Sav02 = "null";
                ExMetG_Sav02 = "null";
                ExMetH_Sav02 = "null";
                ExMetI_Sav02 = "null";
                ExMetJ_Sav02 = "null";
                ExMetK_Sav02 = "null";
                ExMetL_Sav02 = "null";
                ExMetM_Sav02 = "null";
                ExMetN_Sav02 = "null";
                ExMetO_Sav02 = "null";
                ExMetP_Sav02 = "null";
                ExMetQ_Sav02 = "null";
                ExMetR_Sav02 = "null";
            }
        }
        private void LoadstateHelm01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 2)
            {
                if (ExMetA_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetA_X), MemoryManager.StringToByteArray(ExMetA_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 3)
            {
                if (ExMetB_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetB_X), MemoryManager.StringToByteArray(ExMetB_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 4)
            {
                if (ExMetC_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetC_X), MemoryManager.StringToByteArray(ExMetC_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 5)
            {
                if (ExMetD_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetD_X), MemoryManager.StringToByteArray(ExMetD_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 6)
            {
                if (ExMetE_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetE_X), MemoryManager.StringToByteArray(ExMetE_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 7)
            {
                if (ExMetF_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetF_X), MemoryManager.StringToByteArray(ExMetF_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 8)
            {
                if (ExMetG_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetG_X), MemoryManager.StringToByteArray(ExMetG_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 9)
            {
                if (ExMetH_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetH_X), MemoryManager.StringToByteArray(ExMetH_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 10)
            {
                if (ExMetI_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetI_X), MemoryManager.StringToByteArray(ExMetI_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 11)
            {
                if (ExMetJ_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetJ_X), MemoryManager.StringToByteArray(ExMetJ_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 12)
            {
                if (ExMetK_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetK_X), MemoryManager.StringToByteArray(ExMetK_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 13)
            {
                if (ExMetL_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetL_X), MemoryManager.StringToByteArray(ExMetL_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 14)
            {
                if (ExMetM_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetM_X), MemoryManager.StringToByteArray(ExMetM_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 15)
            {
                if (ExMetN_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetN_X), MemoryManager.StringToByteArray(ExMetN_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 16)
            {
                if (ExMetO_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetO_X), MemoryManager.StringToByteArray(ExMetO_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 17)
            {
                if (ExMetP_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetP_X), MemoryManager.StringToByteArray(ExMetP_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 18)
            {
                if (ExMetQ_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetQ_X), MemoryManager.StringToByteArray(ExMetQ_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 19)
            {
                if (ExMetR_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetR_X), MemoryManager.StringToByteArray(ExMetR_Sav01.Replace(" ", string.Empty)));
                }
            }
        }
        private void LoadstateHelm02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 2)
            {
                if (ExMetA_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetA_X), MemoryManager.StringToByteArray(ExMetA_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 3)
            {
                if (ExMetB_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetB_X), MemoryManager.StringToByteArray(ExMetB_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 4)
            {
                if (ExMetC_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetC_X), MemoryManager.StringToByteArray(ExMetC_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 5)
            {
                if (ExMetD_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetD_X), MemoryManager.StringToByteArray(ExMetD_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 6)
            {
                if (ExMetE_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetE_X), MemoryManager.StringToByteArray(ExMetE_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 7)
            {
                if (ExMetF_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetF_X), MemoryManager.StringToByteArray(ExMetF_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 8)
            {
                if (ExMetG_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetG_X), MemoryManager.StringToByteArray(ExMetG_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 9)
            {
                if (ExMetH_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetH_X), MemoryManager.StringToByteArray(ExMetH_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 10)
            {
                if (ExMetI_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetI_X), MemoryManager.StringToByteArray(ExMetI_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 11)
            {
                if (ExMetJ_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetJ_X), MemoryManager.StringToByteArray(ExMetJ_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 12)
            {
                if (ExMetK_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetK_X), MemoryManager.StringToByteArray(ExMetK_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 13)
            {
                if (ExMetL_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetL_X), MemoryManager.StringToByteArray(ExMetL_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 14)
            {
                if (ExMetM_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetM_X), MemoryManager.StringToByteArray(ExMetM_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 15)
            {
                if (ExMetN_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetN_X), MemoryManager.StringToByteArray(ExMetN_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 16)
            {
                if (ExMetO_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetO_X), MemoryManager.StringToByteArray(ExMetO_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 17)
            {
                if (ExMetP_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetP_X), MemoryManager.StringToByteArray(ExMetP_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 18)
            {
                if (ExMetQ_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetQ_X), MemoryManager.StringToByteArray(ExMetQ_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 19)
            {
                if (ExMetR_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetR_X), MemoryManager.StringToByteArray(ExMetR_Sav02.Replace(" ", string.Empty)));
                }
            }
        }
#endregion
#region Savestate\Loadstate Top
        private void SavestateTop01_Click(object sender, RoutedEventArgs e)
        {
            TopSaved01 = true;
            if (CharacterDetails.BoneEditMode) LoadstateTop01.IsEnabled = true;

            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 1)
            {
                ExRootTop_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExRootTop_X), 16));
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 2)
            {
                ExTopA_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopA_X), 16));
            }
            else
            {
                ExTopA_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 3)
            {
                ExTopB_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopB_X), 16));
            }
            else
            {
                ExTopB_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 4)
            {
                ExTopC_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopC_X), 16));
            }
            else
            {
                ExTopC_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 5)
            {
                ExTopD_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopD_X), 16));
            }
            else
            {
                ExTopD_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 6)
            {
                ExTopE_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopE_X), 16));
            }
            else
            {
                ExTopE_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 7)
            {
                ExTopF_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopF_X), 16));
            }
            else
            {
                ExTopF_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 8)
            {
                ExTopG_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopG_X), 16));
            }
            else
            {
                ExTopG_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 9)
            {
                ExTopH_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopH_X), 16));
            }
            else
            {
                ExTopH_Sav01 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 10)
            {
                ExTopI_Sav01 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopI_X), 16));
            }
            else
            {
                ExTopI_Sav01 = "null";
            }
            if (ExRootTop_Sav01 == null)
            {
                ExRootTop_Sav01 = "null";
                ExTopA_Sav01 = "null";
                ExTopB_Sav01 = "null";
                ExTopC_Sav01 = "null";
                ExTopD_Sav01 = "null";
                ExTopE_Sav01 = "null";
                ExTopF_Sav01 = "null";
                ExTopG_Sav01 = "null";
                ExTopH_Sav01 = "null";
                ExTopI_Sav01 = "null";
            }
        }
        private void SavestateTop02_Click(object sender, RoutedEventArgs e)
        {
            TopSaved02 = true;
            if (CharacterDetails.BoneEditMode) LoadstateTop02.IsEnabled = true;

            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 1)
            {
                ExRootTop_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExRootTop_X), 16));
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 2)
            {
                ExTopA_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopA_X), 16));
            }
            else
            {
                ExTopA_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 3)
            {
                ExTopB_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopB_X), 16));
            }
            else
            {
                ExTopB_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 4)
            {
                ExTopC_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopC_X), 16));
            }
            else
            {
                ExTopC_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 5)
            {
                ExTopD_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopD_X), 16));
            }
            else
            {
                ExTopD_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 6)
            {
                ExTopE_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopE_X), 16));
            }
            else
            {
                ExTopE_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 7)
            {
                ExTopF_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopF_X), 16));
            }
            else
            {
                ExTopF_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 8)
            {
                ExTopG_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopG_X), 16));
            }
            else
            {
                ExTopG_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 9)
            {
                ExTopH_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopH_X), 16));
            }
            else
            {
                ExTopH_Sav02 = "null";
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 10)
            {
                ExTopI_Sav02 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopI_X), 16));
            }
            else
            {
                ExTopI_Sav02 = "null";
            }
            if (ExRootTop_Sav02 == null)
            {
                ExRootTop_Sav02 = "null";
                ExTopA_Sav02 = "null";
                ExTopB_Sav02 = "null";
                ExTopC_Sav02 = "null";
                ExTopD_Sav02 = "null";
                ExTopE_Sav02 = "null";
                ExTopF_Sav02 = "null";
                ExTopG_Sav02 = "null";
                ExTopH_Sav02 = "null";
                ExTopI_Sav02 = "null";
            }
        }
        private void LoadstateTop01_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 2)
            {
                if (ExTopA_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopA_X), MemoryManager.StringToByteArray(ExTopA_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 3)
            {
                if (ExTopB_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopB_X), MemoryManager.StringToByteArray(ExTopB_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 4)
            {
                if (ExTopC_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopC_X), MemoryManager.StringToByteArray(ExTopC_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 5)
            {
                if (ExTopD_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopD_X), MemoryManager.StringToByteArray(ExTopD_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 6)
            {
                if (ExTopE_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopE_X), MemoryManager.StringToByteArray(ExTopE_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 7)
            {
                if (ExTopF_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopF_X), MemoryManager.StringToByteArray(ExTopF_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 8)
            {
                if (ExTopG_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopG_X), MemoryManager.StringToByteArray(ExTopG_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 9)
            {
                if (ExTopH_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopH_X), MemoryManager.StringToByteArray(ExTopH_Sav01.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 10)
            {
                if (ExTopI_Sav01 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopI_X), MemoryManager.StringToByteArray(ExTopI_Sav01.Replace(" ", string.Empty)));
                }
            }
        }
        private void LoadstateTop02_Click(object sender, RoutedEventArgs e)
        {
            UncheckAll();
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 2)
            {
                if (ExTopA_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopA_X), MemoryManager.StringToByteArray(ExTopA_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 3)
            {
                if (ExTopB_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopB_X), MemoryManager.StringToByteArray(ExTopB_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 4)
            {
                if (ExTopC_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopC_X), MemoryManager.StringToByteArray(ExTopC_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 5)
            {
                if (ExTopD_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopD_X), MemoryManager.StringToByteArray(ExTopD_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 6)
            {
                if (ExTopE_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopE_X), MemoryManager.StringToByteArray(ExTopE_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 7)
            {
                if (ExTopF_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopF_X), MemoryManager.StringToByteArray(ExTopF_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 8)
            {
                if (ExTopG_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopG_X), MemoryManager.StringToByteArray(ExTopG_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 9)
            {
                if (ExTopH_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopH_X), MemoryManager.StringToByteArray(ExTopH_Sav02.Replace(" ", string.Empty)));
                }
            }
            if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 10)
            {
                if (ExTopI_Sav02 != "null")
                {
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopI_X), MemoryManager.StringToByteArray(ExTopI_Sav02.Replace(" ", string.Empty)));
                }
            }
        }
#endregion

#region Advanced Loading Options
        private void LoadHead_Checked(object sender, RoutedEventArgs e)
        {
            HeadAdvLoad = true;
        }
        private void LoadHead_Unchecked(object sender, RoutedEventArgs e)
        {
            HeadAdvLoad = false;
        }

        private void LoadHair_Checked(object sender, RoutedEventArgs e)
        {
            HairAdvLoad = true;
        }
        private void LoadHair_Unchecked(object sender, RoutedEventArgs e)
        {
            HairAdvLoad = false;
        }

        private void LoadEarrings_Checked(object sender, RoutedEventArgs e)
        {
            EarringsAdvLoad = true;
        }
        private void LoadEarrings_Unchecked(object sender, RoutedEventArgs e)
        {
            EarringsAdvLoad = false;
        }

        private void LoadBody_Checked(object sender, RoutedEventArgs e)
        {
            BodyAdvLoad = true;
        }
        private void LoadBody_Unchecked(object sender, RoutedEventArgs e)
        {
            BodyAdvLoad = false;
        }

        private void LoadLeftArm_Checked(object sender, RoutedEventArgs e)
        {
            LeftArmAdvLoad = true;
        }
        private void LoadLeftArm_Unchecked(object sender, RoutedEventArgs e)
        {
            LeftArmAdvLoad = false;
        }

        private void LoadRightArm_Checked(object sender, RoutedEventArgs e)
        {
            RightArmAdvLoad = true;
        }
        private void LoadRightArm_Unchecked(object sender, RoutedEventArgs e)
        {
            RightArmAdvLoad = false;
        }

        private void LoadClothes_Checked(object sender, RoutedEventArgs e)
        {
            ClothesAdvLoad = true;
        }
        private void LoadClothes_Unchecked(object sender, RoutedEventArgs e)
        {
            ClothesAdvLoad = false;
        }

        private void LoadHelm_Checked(object sender, RoutedEventArgs e)
        {
            HelmAdvLoad = true;
        }
        private void LoadHelm_Unchecked(object sender, RoutedEventArgs e)
        {
            HelmAdvLoad = false;
        }

        private void LoadTop_Checked(object sender, RoutedEventArgs e)
        {
            TopAdvLoad = true;
        }
        private void LoadTop_Unchecked(object sender, RoutedEventArgs e)
        {
            TopAdvLoad = false;
        }

        private void LoadWeapons_Checked(object sender, RoutedEventArgs e)
        {
            WeaponsAdvLoad = true;
        }
        private void LoadWeapons_Unchecked(object sender, RoutedEventArgs e)
        {
            WeaponsAdvLoad = false;
        }

        private void Helm_Parenting_Checked(object sender, RoutedEventArgs e)
        {
            int exmet_value = m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value));
            for (int i = 0; i < exmet_value - 1; i++)
            {
                bone_face.Add(bone_exmet[i]);
            }
            toggle_helm_parenting = true;
        }

        private void Helm_Parenting_Unchecked(object sender, RoutedEventArgs e)
        {
            for (int i = 0; i < bone_exmet.Length; i++)
            {
                bone_face.Remove(bone_exmet[i]);
            }
            toggle_helm_parenting = false;
        }

        private void LoadLeftHand_Checked(object sender, RoutedEventArgs e)
        {
            LeftHandAdvLoad = true;
        }
        private void LoadLeftHand_Unchecked(object sender, RoutedEventArgs e)
        {
            LeftHandAdvLoad = false;
        }

        private void LoadRightHand_Checked(object sender, RoutedEventArgs e)
        {
            RightHandAdvLoad = true;
        }
        private void LoadRightHand_Unchecked(object sender, RoutedEventArgs e)
        {
            RightHandAdvLoad = false;
        }

        private void LoadWaist_Checked(object sender, RoutedEventArgs e)
        {
            WaistAdvLoad = true;
        }
        private void LoadWaist_Unchecked(object sender, RoutedEventArgs e)
        {
            WaistAdvLoad = false;
        }

        private void LoadLeftLeg_Checked(object sender, RoutedEventArgs e)
        {
            LeftLegAdvLoad = true;
        }
        private void LoadLeftLeg_Unchecked(object sender, RoutedEventArgs e)
        {
            LeftLegAdvLoad = false;
        }

        private void LoadRightLeg_Checked(object sender, RoutedEventArgs e)
        {
            RightLegAdvLoad = true;
        }
        private void LoadRightLeg_Unchecked(object sender, RoutedEventArgs e)
        {
            RightLegAdvLoad = false;
        }
#endregion

#region Shortcuts
        private void HeadShortcut_Click(object sender, RoutedEventArgs e)
        {
            MatrixTabControl.SelectedIndex = 0;
        }
        private void HairShortcut_Click(object sender, RoutedEventArgs e)
        {
            MatrixTabControl.SelectedIndex = 0;
        }
        private void BodyShortcut_Click(object sender, RoutedEventArgs e)
        {
            MatrixTabControl.SelectedIndex = 1;
        }
        private void ClothesShortcut_Click(object sender, RoutedEventArgs e)
        {
            MatrixTabControl.SelectedIndex = 1;
        }
        private void HandsShortcut_Click(object sender, RoutedEventArgs e)
        {
            MatrixTabControl.SelectedIndex = 2;
        }
        private void PantsShortcut_Click(object sender, RoutedEventArgs e)
        {
            MatrixTabControl.SelectedIndex = 2;
        }
        private void EquipShortcut_Click(object sender, RoutedEventArgs e)
        {
            MatrixTabControl.SelectedIndex = 3;
        }
        private void OtherShortcut_Click(object sender, RoutedEventArgs e)
        {
            MatrixTabControl.SelectedIndex = 3;
        }
        private void SaveShortcut_Click(object sender, RoutedEventArgs e)
        {
            MatrixTabControl.SelectedIndex = 4;
        }
        private void LoadShortcut_Click(object sender, RoutedEventArgs e)
        {
            MatrixTabControl.SelectedIndex = 4;
        }
#endregion

        private void SwapToggles(ToggleButton newActive)
        {
            oldrot = new Vector3D(0, 0, 0);
            newrot = new Vector3D(0, 0, 0);
            Root.IsChecked = (newActive == Root) ? true : false;
            Abdomen.IsChecked = (newActive == Abdomen) ? true : false;
            Throw.IsChecked = (newActive == Throw) ? true : false;
            Waist.IsChecked = (newActive == Waist) ? true : false;
            SpineA.IsChecked = (newActive == SpineA) ? true : false;
            LegLeft.IsChecked = (newActive == LegLeft) ? true : false;
            LegRight.IsChecked = (newActive == LegRight) ? true : false;
            HolsterLeft.IsChecked = (newActive == HolsterLeft) ? true : false;
            HolsterRight.IsChecked = (newActive == HolsterRight) ? true : false;
            SheatheLeft.IsChecked = (newActive == SheatheLeft) ? true : false;
            SheatheRight.IsChecked = (newActive == SheatheRight) ? true : false;
            SpineB.IsChecked = (newActive == SpineB) ? true : false;
            ClothBackALeft.IsChecked = (newActive == ClothBackALeft) ? true : false;
            ClothBackARight.IsChecked = (newActive == ClothBackARight) ? true : false;
            ClothFrontALeft.IsChecked = (newActive == ClothFrontALeft) ? true : false;
            ClothFrontARight.IsChecked = (newActive == ClothFrontARight) ? true : false;
            ClothSideALeft.IsChecked = (newActive == ClothSideALeft) ? true : false;
            ClothSideARight.IsChecked = (newActive == ClothSideARight) ? true : false;
            KneeLeft.IsChecked = (newActive == KneeLeft) ? true : false;
            KneeRight.IsChecked = (newActive == KneeRight) ? true : false;
            BreastLeft.IsChecked = (newActive == BreastLeft) ? true : false;
            BreastRight.IsChecked = (newActive == BreastRight) ? true : false;
            SpineC.IsChecked = (newActive == SpineC) ? true : false;
            ClothBackBLeft.IsChecked = (newActive == ClothBackBLeft) ? true : false;
            ClothBackBRight.IsChecked = (newActive == ClothBackBRight) ? true : false;
            ClothFrontBLeft.IsChecked = (newActive == ClothFrontBLeft) ? true : false;
            ClothFrontBRight.IsChecked = (newActive == ClothFrontBRight) ? true : false;
            ClothSideBLeft.IsChecked = (newActive == ClothSideBLeft) ? true : false;
            ClothSideBRight.IsChecked = (newActive == ClothSideBRight) ? true : false;
            CalfLeft.IsChecked = (newActive == CalfLeft) ? true : false;
            CalfRight.IsChecked = (newActive == CalfRight) ? true : false;
            ScabbardLeft.IsChecked = (newActive == ScabbardLeft) ? true : false;
            ScabbardRight.IsChecked = (newActive == ScabbardRight) ? true : false;
            Neck.IsChecked = (newActive == Neck) ? true : false;
            ClavicleLeft.IsChecked = (newActive == ClavicleLeft) ? true : false;
            ClavicleRight.IsChecked = (newActive == ClavicleRight) ? true : false;
            ClothBackCLeft.IsChecked = (newActive == ClothBackCLeft) ? true : false;
            ClothBackCRight.IsChecked = (newActive == ClothBackCRight) ? true : false;
            ClothFrontCLeft.IsChecked = (newActive == ClothFrontCLeft) ? true : false;
            ClothFrontCRight.IsChecked = (newActive == ClothFrontCRight) ? true : false;
            ClothSideCLeft.IsChecked = (newActive == ClothSideCLeft) ? true : false;
            ClothSideCRight.IsChecked = (newActive == ClothSideCRight) ? true : false;
            PoleynLeft.IsChecked = (newActive == PoleynLeft) ? true : false;
            PoleynRight.IsChecked = (newActive == PoleynRight) ? true : false;
            FootLeft.IsChecked = (newActive == FootLeft) ? true : false;
            FootRight.IsChecked = (newActive == FootRight) ? true : false;
            Head.IsChecked = (newActive == Head) ? true : false;
            ArmLeft.IsChecked = (newActive == ArmLeft) ? true : false;
            ArmRight.IsChecked = (newActive == ArmRight) ? true : false;
            PauldronLeft.IsChecked = (newActive == PauldronLeft) ? true : false;
            PauldronRight.IsChecked = (newActive == PauldronRight) ? true : false;
            Unknown00.IsChecked = (newActive == Unknown00) ? true : false;
            ToesLeft.IsChecked = (newActive == ToesLeft) ? true : false;
            ToesRight.IsChecked = (newActive == ToesRight) ? true : false;
            HairA.IsChecked = (newActive == HairA) ? true : false;
            HairFrontLeft.IsChecked = (newActive == HairFrontLeft) ? true : false;
            HairFrontRight.IsChecked = (newActive == HairFrontRight) ? true : false;
            EarLeft.IsChecked = (newActive == EarLeft) ? true : false;
            EarRight.IsChecked = (newActive == EarRight) ? true : false;
            ForearmLeft.IsChecked = (newActive == ForearmLeft) ? true : false;
            ForearmRight.IsChecked = (newActive == ForearmRight) ? true : false;
            ShoulderLeft.IsChecked = (newActive == ShoulderLeft) ? true : false;
            ShoulderRight.IsChecked = (newActive == ShoulderRight) ? true : false;
            HairB.IsChecked = (newActive == HairB) ? true : false;
            HandLeft.IsChecked = (newActive == HandLeft) ? true : false;
            HandRight.IsChecked = (newActive == HandRight) ? true : false;
            ShieldLeft.IsChecked = (newActive == ShieldLeft) ? true : false;
            ShieldRight.IsChecked = (newActive == ShieldRight) ? true : false;
            EarringALeft.IsChecked = (newActive == EarringALeft) ? true : false;
            EarringARight.IsChecked = (newActive == EarringARight) ? true : false;
            ElbowLeft.IsChecked = (newActive == ElbowLeft) ? true : false;
            ElbowRight.IsChecked = (newActive == ElbowRight) ? true : false;
            CouterLeft.IsChecked = (newActive == CouterLeft) ? true : false;
            CouterRight.IsChecked = (newActive == CouterRight) ? true : false;
            WristLeft.IsChecked = (newActive == WristLeft) ? true : false;
            WristRight.IsChecked = (newActive == WristRight) ? true : false;
            IndexALeft.IsChecked = (newActive == IndexALeft) ? true : false;
            IndexARight.IsChecked = (newActive == IndexARight) ? true : false;
            PinkyALeft.IsChecked = (newActive == PinkyALeft) ? true : false;
            PinkyARight.IsChecked = (newActive == PinkyARight) ? true : false;
            RingALeft.IsChecked = (newActive == RingALeft) ? true : false;
            RingARight.IsChecked = (newActive == RingARight) ? true : false;
            MiddleALeft.IsChecked = (newActive == MiddleALeft) ? true : false;
            MiddleARight.IsChecked = (newActive == MiddleARight) ? true : false;
            ThumbALeft.IsChecked = (newActive == ThumbALeft) ? true : false;
            ThumbARight.IsChecked = (newActive == ThumbARight) ? true : false;
            WeaponLeft.IsChecked = (newActive == WeaponLeft) ? true : false;
            WeaponRight.IsChecked = (newActive == WeaponRight) ? true : false;
            EarringBLeft.IsChecked = (newActive == EarringBLeft) ? true : false;
            EarringBRight.IsChecked = (newActive == EarringBRight) ? true : false;
            IndexBLeft.IsChecked = (newActive == IndexBLeft) ? true : false;
            IndexBRight.IsChecked = (newActive == IndexBRight) ? true : false;
            PinkyBLeft.IsChecked = (newActive == PinkyBLeft) ? true : false;
            PinkyBRight.IsChecked = (newActive == PinkyBRight) ? true : false;
            RingBLeft.IsChecked = (newActive == RingBLeft) ? true : false;
            RingBRight.IsChecked = (newActive == RingBRight) ? true : false;
            MiddleBLeft.IsChecked = (newActive == MiddleBLeft) ? true : false;
            MiddleBRight.IsChecked = (newActive == MiddleBRight) ? true : false;
            ThumbBLeft.IsChecked = (newActive == ThumbBLeft) ? true : false;
            ThumbBRight.IsChecked = (newActive == ThumbBRight) ? true : false;
            TailA.IsChecked = (newActive == TailA) ? true : false;
            TailB.IsChecked = (newActive == TailB) ? true : false;
            TailC.IsChecked = (newActive == TailC) ? true : false;
            TailD.IsChecked = (newActive == TailD) ? true : false;
            TailE.IsChecked = (newActive == TailE) ? true : false;
            RootHead.IsChecked = (newActive == RootHead) ? true : false;
            Jaw.IsChecked = (newActive == Jaw) ? true : false;
            EyelidLowerLeft.IsChecked = (newActive == EyelidLowerLeft) ? true : false;
            EyelidLowerRight.IsChecked = (newActive == EyelidLowerRight) ? true : false;
            EyeLeft.IsChecked = (newActive == EyeLeft) ? true : false;
            EyeRight.IsChecked = (newActive == EyeRight) ? true : false;
            Nose.IsChecked = (newActive == Nose) ? true : false;
            CheekLeft.IsChecked = (newActive == CheekLeft) ? true : false;
            CheekRight.IsChecked = (newActive == CheekRight) ? true : false;
            LipsLeft.IsChecked = (newActive == LipsLeft) ? true : false;
            LipsRight.IsChecked = (newActive == LipsRight) ? true : false;
            EyebrowLeft.IsChecked = (newActive == EyebrowLeft) ? true : false;
            EyebrowRight.IsChecked = (newActive == EyebrowRight) ? true : false;
            Bridge.IsChecked = (newActive == Bridge) ? true : false;
            BrowLeft.IsChecked = (newActive == BrowLeft) ? true : false;
            BrowRight.IsChecked = (newActive == BrowRight) ? true : false;
            LipUpperA.IsChecked = (newActive == LipUpperA) ? true : false;
            EyelidUpperLeft.IsChecked = (newActive == EyelidUpperLeft) ? true : false;
            EyelidUpperRight.IsChecked = (newActive == EyelidUpperRight) ? true : false;
            LipLowerA.IsChecked = (newActive == LipLowerA) ? true : false;
            LipUpperB.IsChecked = (newActive == LipUpperB) ? true : false;
            LipLowerB.IsChecked = (newActive == LipLowerB) ? true : false;
            HrothWhiskersLeft.IsChecked = (newActive == HrothWhiskersLeft) ? true : false;
            HrothWhiskersRight.IsChecked = (newActive == HrothWhiskersRight) ? true : false;
            VieraEarALeft.IsChecked = (newActive == VieraEarALeft) ? true : false;
            VieraEarARight.IsChecked = (newActive == VieraEarARight) ? true : false;
            VieraEarBLeft.IsChecked = (newActive == VieraEarBLeft) ? true : false;
            VieraEarBRight.IsChecked = (newActive == VieraEarBRight) ? true : false;
            ExHairA.IsChecked = (newActive == ExHairA) ? true : false;
            ExHairB.IsChecked = (newActive == ExHairB) ? true : false;
            ExHairC.IsChecked = (newActive == ExHairC) ? true : false;
            ExHairD.IsChecked = (newActive == ExHairD) ? true : false;
            ExHairE.IsChecked = (newActive == ExHairE) ? true : false;
            ExHairF.IsChecked = (newActive == ExHairF) ? true : false;
            ExHairG.IsChecked = (newActive == ExHairG) ? true : false;
            ExHairH.IsChecked = (newActive == ExHairH) ? true : false;
            ExHairI.IsChecked = (newActive == ExHairI) ? true : false;
            ExHairJ.IsChecked = (newActive == ExHairJ) ? true : false;
            ExHairK.IsChecked = (newActive == ExHairK) ? true : false;
            ExHairL.IsChecked = (newActive == ExHairL) ? true : false;
            ExMetA.IsChecked = (newActive == ExMetA) ? true : false;
            ExMetB.IsChecked = (newActive == ExMetB) ? true : false;
            ExMetC.IsChecked = (newActive == ExMetC) ? true : false;
            ExMetD.IsChecked = (newActive == ExMetD) ? true : false;
            ExMetE.IsChecked = (newActive == ExMetE) ? true : false;
            ExMetF.IsChecked = (newActive == ExMetF) ? true : false;
            ExMetG.IsChecked = (newActive == ExMetG) ? true : false;
            ExMetH.IsChecked = (newActive == ExMetH) ? true : false;
            ExMetI.IsChecked = (newActive == ExMetI) ? true : false;
            ExMetJ.IsChecked = (newActive == ExMetJ) ? true : false;
            ExMetK.IsChecked = (newActive == ExMetK) ? true : false;
            ExMetL.IsChecked = (newActive == ExMetL) ? true : false;
            ExMetM.IsChecked = (newActive == ExMetM) ? true : false;
            ExMetN.IsChecked = (newActive == ExMetN) ? true : false;
            ExMetO.IsChecked = (newActive == ExMetO) ? true : false;
            ExMetP.IsChecked = (newActive == ExMetP) ? true : false;
            ExMetQ.IsChecked = (newActive == ExMetQ) ? true : false;
            ExMetR.IsChecked = (newActive == ExMetR) ? true : false;
            ExTopA.IsChecked = (newActive == ExTopA) ? true : false;
            ExTopB.IsChecked = (newActive == ExTopB) ? true : false;
            ExTopC.IsChecked = (newActive == ExTopC) ? true : false;
            ExTopD.IsChecked = (newActive == ExTopD) ? true : false;
            ExTopE.IsChecked = (newActive == ExTopE) ? true : false;
            ExTopF.IsChecked = (newActive == ExTopF) ? true : false;
            ExTopG.IsChecked = (newActive == ExTopG) ? true : false;
            ExTopH.IsChecked = (newActive == ExTopH) ? true : false;
            ExTopI.IsChecked = (newActive == ExTopI) ? true : false;
        }
        public void UncheckAll()
        {
            Root.IsChecked = false;
            Abdomen.IsChecked = false;
            Throw.IsChecked = false;
            Waist.IsChecked = false;
            SpineA.IsChecked = false;
            LegLeft.IsChecked = false;
            LegRight.IsChecked = false;
            HolsterLeft.IsChecked = false;
            HolsterRight.IsChecked = false;
            SheatheLeft.IsChecked = false;
            SheatheRight.IsChecked = false;
            SpineB.IsChecked = false;
            ClothBackALeft.IsChecked = false;
            ClothBackARight.IsChecked = false;
            ClothFrontALeft.IsChecked = false;
            ClothFrontARight.IsChecked = false;
            ClothSideALeft.IsChecked = false;
            ClothSideARight.IsChecked = false;
            KneeLeft.IsChecked = false;
            KneeRight.IsChecked = false;
            BreastLeft.IsChecked = false;
            BreastRight.IsChecked = false;
            SpineC.IsChecked = false;
            ClothBackBLeft.IsChecked = false;
            ClothBackBRight.IsChecked = false;
            ClothFrontBLeft.IsChecked = false;
            ClothFrontBRight.IsChecked = false;
            ClothSideBLeft.IsChecked = false;
            ClothSideBRight.IsChecked = false;
            CalfLeft.IsChecked = false;
            CalfRight.IsChecked = false;
            ScabbardLeft.IsChecked = false;
            ScabbardRight.IsChecked = false;
            Neck.IsChecked = false;
            ClavicleLeft.IsChecked = false;
            ClavicleRight.IsChecked = false;
            ClothBackCLeft.IsChecked = false;
            ClothBackCRight.IsChecked = false;
            ClothFrontCLeft.IsChecked = false;
            ClothFrontCRight.IsChecked = false;
            ClothSideCLeft.IsChecked = false;
            ClothSideCRight.IsChecked = false;
            PoleynLeft.IsChecked = false;
            PoleynRight.IsChecked = false;
            FootLeft.IsChecked = false;
            FootRight.IsChecked = false;
            Head.IsChecked = false;
            ArmLeft.IsChecked = false;
            ArmRight.IsChecked = false;
            PauldronLeft.IsChecked = false;
            PauldronRight.IsChecked = false;
            Unknown00.IsChecked = false;
            ToesLeft.IsChecked = false;
            ToesRight.IsChecked = false;
            HairA.IsChecked = false;
            HairFrontLeft.IsChecked = false;
            HairFrontRight.IsChecked = false;
            EarLeft.IsChecked = false;
            EarRight.IsChecked = false;
            ForearmLeft.IsChecked = false;
            ForearmRight.IsChecked = false;
            ShoulderLeft.IsChecked = false;
            ShoulderRight.IsChecked = false;
            HairB.IsChecked = false;
            HandLeft.IsChecked = false;
            HandRight.IsChecked = false;
            ShieldLeft.IsChecked = false;
            ShieldRight.IsChecked = false;
            EarringALeft.IsChecked = false;
            EarringARight.IsChecked = false;
            ElbowLeft.IsChecked = false;
            ElbowRight.IsChecked = false;
            CouterLeft.IsChecked = false;
            CouterRight.IsChecked = false;
            WristLeft.IsChecked = false;
            WristRight.IsChecked = false;
            IndexALeft.IsChecked = false;
            IndexARight.IsChecked = false;
            PinkyALeft.IsChecked = false;
            PinkyARight.IsChecked = false;
            RingALeft.IsChecked = false;
            RingARight.IsChecked = false;
            MiddleALeft.IsChecked = false;
            MiddleARight.IsChecked = false;
            ThumbALeft.IsChecked = false;
            ThumbARight.IsChecked = false;
            WeaponLeft.IsChecked = false;
            WeaponRight.IsChecked = false;
            EarringBLeft.IsChecked = false;
            EarringBRight.IsChecked = false;
            IndexBLeft.IsChecked = false;
            IndexBRight.IsChecked = false;
            PinkyBLeft.IsChecked = false;
            PinkyBRight.IsChecked = false;
            RingBLeft.IsChecked = false;
            RingBRight.IsChecked = false;
            MiddleBLeft.IsChecked = false;
            MiddleBRight.IsChecked = false;
            ThumbBLeft.IsChecked = false;
            ThumbBRight.IsChecked = false;
            TailA.IsChecked = false;
            TailB.IsChecked = false;
            TailC.IsChecked = false;
            TailD.IsChecked = false;
            TailE.IsChecked = false;
            RootHead.IsChecked = false;
            Jaw.IsChecked = false;
            EyelidLowerLeft.IsChecked = false;
            EyelidLowerRight.IsChecked = false;
            EyeLeft.IsChecked = false;
            EyeRight.IsChecked = false;
            Nose.IsChecked = false;
            CheekLeft.IsChecked = false;
            HrothWhiskersLeft.IsChecked = false;
            CheekRight.IsChecked = false;
            HrothWhiskersRight.IsChecked = false;
            LipsLeft.IsChecked = false;
            LipsRight.IsChecked = false;
            EyebrowLeft.IsChecked = false;
            EyebrowRight.IsChecked = false;
            Bridge.IsChecked = false;
            BrowLeft.IsChecked = false;
            BrowRight.IsChecked = false;
            LipUpperA.IsChecked = false;
            EyelidUpperLeft.IsChecked = false;
            EyelidUpperRight.IsChecked = false;
            LipLowerA.IsChecked = false;
            LipUpperB.IsChecked = false;
            LipLowerB.IsChecked = false;
            HrothWhiskersLeft.IsChecked = false;
            HrothWhiskersRight.IsChecked = false;
            VieraEarALeft.IsChecked = false;
            VieraEarARight.IsChecked = false;
            VieraEarBLeft.IsChecked = false;
            VieraEarBRight.IsChecked = false;
            ExHairA.IsChecked = false;
            ExHairB.IsChecked = false;
            ExHairC.IsChecked = false;
            ExHairD.IsChecked = false;
            ExHairE.IsChecked = false;
            ExHairF.IsChecked = false;
            ExHairG.IsChecked = false;
            ExHairH.IsChecked = false;
            ExHairI.IsChecked = false;
            ExHairJ.IsChecked = false;
            ExHairK.IsChecked = false;
            ExHairL.IsChecked = false;
            ExMetA.IsChecked = false;
            ExMetB.IsChecked = false;
            ExMetC.IsChecked = false;
            ExMetD.IsChecked = false;
            ExMetE.IsChecked = false;
            ExMetF.IsChecked = false;
            ExMetG.IsChecked = false;
            ExMetH.IsChecked = false;
            ExMetI.IsChecked = false;
            ExMetJ.IsChecked = false;
            ExMetK.IsChecked = false;
            ExMetL.IsChecked = false;
            ExMetM.IsChecked = false;
            ExMetN.IsChecked = false;
            ExMetO.IsChecked = false;
            ExMetP.IsChecked = false;
            ExMetQ.IsChecked = false;
            ExMetR.IsChecked = false;
            ExTopA.IsChecked = false;
            ExTopB.IsChecked = false;
            ExTopC.IsChecked = false;
            ExTopD.IsChecked = false;
            ExTopE.IsChecked = false;
            ExTopF.IsChecked = false;
            ExTopG.IsChecked = false;
            ExTopH.IsChecked = false;
            ExTopI.IsChecked = false;
        }
        private void EnableAll()
        {
            PhysicsButton.IsEnabled = true;
            TertiaryButton.IsEnabled = true;
            //Root.IsEnabled = true;
            //Abdomen.IsEnabled = true;
            //Throw.IsEnabled = true;
            Waist.IsEnabled = true;
            SpineA.IsEnabled = true;
            LegLeft.IsEnabled = true;
            LegRight.IsEnabled = true;
            HolsterLeft.IsEnabled = true;
            HolsterRight.IsEnabled = true;
            SheatheLeft.IsEnabled = true;
            SheatheRight.IsEnabled = true;
            SpineB.IsEnabled = true;
            ClothBackALeft.IsEnabled = true;
            ClothBackARight.IsEnabled = true;
            ClothFrontALeft.IsEnabled = true;
            ClothFrontARight.IsEnabled = true;
            ClothSideALeft.IsEnabled = true;
            ClothSideARight.IsEnabled = true;
            KneeLeft.IsEnabled = true;
            KneeRight.IsEnabled = true;
            BreastLeft.IsEnabled = true;
            BreastRight.IsEnabled = true;
            SpineC.IsEnabled = true;
            ClothBackBLeft.IsEnabled = true;
            ClothBackBRight.IsEnabled = true;
            ClothFrontBLeft.IsEnabled = true;
            ClothFrontBRight.IsEnabled = true;
            ClothSideBLeft.IsEnabled = true;
            ClothSideBRight.IsEnabled = true;
            CalfLeft.IsEnabled = true;
            CalfRight.IsEnabled = true;
            ScabbardLeft.IsEnabled = true;
            ScabbardRight.IsEnabled = true;
            Neck.IsEnabled = true;
            ClavicleLeft.IsEnabled = true;
            ClavicleRight.IsEnabled = true;
            ClothBackCLeft.IsEnabled = true;
            ClothBackCRight.IsEnabled = true;
            ClothFrontCLeft.IsEnabled = true;
            ClothFrontCRight.IsEnabled = true;
            ClothSideCLeft.IsEnabled = true;
            ClothSideCRight.IsEnabled = true;
            PoleynLeft.IsEnabled = true;
            PoleynRight.IsEnabled = true;
            FootLeft.IsEnabled = true;
            FootRight.IsEnabled = true;
            Head.IsEnabled = true;
            ArmLeft.IsEnabled = true;
            ArmRight.IsEnabled = true;
            PauldronLeft.IsEnabled = true;
            PauldronRight.IsEnabled = true;
            Unknown00.IsEnabled = true;
            ToesLeft.IsEnabled = true;
            ToesRight.IsEnabled = true;
            HairA.IsEnabled = true;
            HairFrontLeft.IsEnabled = true;
            HairFrontRight.IsEnabled = true;
            EarLeft.IsEnabled = true;
            EarRight.IsEnabled = true;
            ForearmLeft.IsEnabled = true;
            ForearmRight.IsEnabled = true;
            ShoulderLeft.IsEnabled = true;
            ShoulderRight.IsEnabled = true;
            HairB.IsEnabled = true;
            HandLeft.IsEnabled = true;
            HandRight.IsEnabled = true;
            ShieldLeft.IsEnabled = true;
            ShieldRight.IsEnabled = true;
            EarringALeft.IsEnabled = true;
            EarringARight.IsEnabled = true;
            ElbowLeft.IsEnabled = true;
            ElbowRight.IsEnabled = true;
            CouterLeft.IsEnabled = true;
            CouterRight.IsEnabled = true;
            WristLeft.IsEnabled = true;
            WristRight.IsEnabled = true;
            IndexALeft.IsEnabled = true;
            IndexARight.IsEnabled = true;
            PinkyALeft.IsEnabled = true;
            PinkyARight.IsEnabled = true;
            RingALeft.IsEnabled = true;
            RingARight.IsEnabled = true;
            MiddleALeft.IsEnabled = true;
            MiddleARight.IsEnabled = true;
            ThumbALeft.IsEnabled = true;
            ThumbARight.IsEnabled = true;
            WeaponLeft.IsEnabled = true;
            WeaponRight.IsEnabled = true;
            EarringBLeft.IsEnabled = true;
            EarringBRight.IsEnabled = true;
            IndexBLeft.IsEnabled = true;
            IndexBRight.IsEnabled = true;
            PinkyBLeft.IsEnabled = true;
            PinkyBRight.IsEnabled = true;
            RingBLeft.IsEnabled = true;
            RingBRight.IsEnabled = true;
            MiddleBLeft.IsEnabled = true;
            MiddleBRight.IsEnabled = true;
            ThumbBLeft.IsEnabled = true;
            ThumbBRight.IsEnabled = true;
            //TailA.IsEnabled = true;
            //TailB.IsEnabled = true;
            //TailC.IsEnabled = true;
            //TailD.IsEnabled = true;
            //TailE.IsEnabled = true;
            //RootHead.IsEnabled = true;
            Jaw.IsEnabled = true;
            EyelidLowerLeft.IsEnabled = true;
            EyelidLowerRight.IsEnabled = true;
            EyeLeft.IsEnabled = true;
            EyeRight.IsEnabled = true;
            Nose.IsEnabled = true;
            CheekLeft.IsEnabled = true;
            CheekRight.IsEnabled = true;
            LipsLeft.IsEnabled = true;
            LipsRight.IsEnabled = true;
            EyebrowLeft.IsEnabled = true;
            EyebrowRight.IsEnabled = true;
            Bridge.IsEnabled = true;
            BrowLeft.IsEnabled = true;
            BrowRight.IsEnabled = true;
            LipUpperA.IsEnabled = true;
            EyelidUpperLeft.IsEnabled = true;
            EyelidUpperRight.IsEnabled = true;
            LipLowerA.IsEnabled = true;
            LipUpperB.IsEnabled = true;
            LipLowerB.IsEnabled = true;
            //HrothWhiskersLeft.IsEnabled = true;
            //HrothWhiskersRight.IsEnabled = true;
            //VieraEarALeft.IsEnabled = true;
            //VieraEarARight.IsEnabled = true;
            //VieraEarBLeft.IsEnabled = true;
            //VieraEarBRight.IsEnabled = true;
            //ExHairA.IsEnabled = true;
            //ExHairB.IsEnabled = true;
            //ExHairC.IsEnabled = true;
            //ExHairD.IsEnabled = true;
            //ExHairE.IsEnabled = true;
            //ExHairF.IsEnabled = true;
            //ExHairG.IsEnabled = true;
            //ExHairH.IsEnabled = true;
            //ExHairI.IsEnabled = true;
            //ExHairJ.IsEnabled = true;
            //ExHairK.IsEnabled = true;
            //ExHairL.IsEnabled = true;
            //ExMetA.IsEnabled = true;
            //ExMetB.IsEnabled = true;
            //ExMetC.IsEnabled = true;
            //ExMetD.IsEnabled = true;
            //ExMetE.IsEnabled = true;
            //ExMetF.IsEnabled = true;
            //ExMetG.IsEnabled = true;
            //ExMetH.IsEnabled = true;
            //ExMetI.IsEnabled = true;
            //ExMetJ.IsEnabled = true;
            //ExMetK.IsEnabled = true;
            //ExMetL.IsEnabled = true;
            //ExMetM.IsEnabled = true;
            //ExMetN.IsEnabled = true;
            //ExMetO.IsEnabled = true;
            //ExMetP.IsEnabled = true;
            //ExMetQ.IsEnabled = true;
            //ExMetR.IsEnabled = true;
            //ExTopA.IsEnabled = true;
            //ExTopB.IsEnabled = true;
            //ExTopC.IsEnabled = true;
            //ExTopD.IsEnabled = true;
            //ExTopE.IsEnabled = true;
            //ExTopF.IsEnabled = true;
            //ExTopG.IsEnabled = true;
            //ExTopH.IsEnabled = true;
            //ExTopI.IsEnabled = true;

            //if (HeadSaved) LoadHeadButton.IsEnabled = true;
            //if (TorsoSaved) LoadTorsoButton.IsEnabled = true;
            //if (LeftArmSaved) LoadLArmButton.IsEnabled = true;
            //if (RightArmSaved) LoadRArmButton.IsEnabled = true;
            //if (LeftLegSaved) LoadLLegButton.IsEnabled = true;
            //if (RightLegSaved) LoadRLegButton.IsEnabled = true;
        }
        public void DisableAll()
        {
            PhysicsButton.IsEnabled = false;
            TertiaryButton.IsEnabled = false;
            Root.IsEnabled = false;
            Abdomen.IsEnabled = false;
            Throw.IsEnabled = false;
            Waist.IsEnabled = false;
            SpineA.IsEnabled = false;
            LegLeft.IsEnabled = false;
            LegRight.IsEnabled = false;
            HolsterLeft.IsEnabled = false;
            HolsterRight.IsEnabled = false;
            SheatheLeft.IsEnabled = false;
            SheatheRight.IsEnabled = false;
            SpineB.IsEnabled = false;
            ClothBackALeft.IsEnabled = false;
            ClothBackARight.IsEnabled = false;
            ClothFrontALeft.IsEnabled = false;
            ClothFrontARight.IsEnabled = false;
            ClothSideALeft.IsEnabled = false;
            ClothSideARight.IsEnabled = false;
            KneeLeft.IsEnabled = false;
            KneeRight.IsEnabled = false;
            BreastLeft.IsEnabled = false;
            BreastRight.IsEnabled = false;
            SpineC.IsEnabled = false;
            ClothBackBLeft.IsEnabled = false;
            ClothBackBRight.IsEnabled = false;
            ClothFrontBLeft.IsEnabled = false;
            ClothFrontBRight.IsEnabled = false;
            ClothSideBLeft.IsEnabled = false;
            ClothSideBRight.IsEnabled = false;
            CalfLeft.IsEnabled = false;
            CalfRight.IsEnabled = false;
            ScabbardLeft.IsEnabled = false;
            ScabbardRight.IsEnabled = false;
            Neck.IsEnabled = false;
            ClavicleLeft.IsEnabled = false;
            ClavicleRight.IsEnabled = false;
            ClothBackCLeft.IsEnabled = false;
            ClothBackCRight.IsEnabled = false;
            ClothFrontCLeft.IsEnabled = false;
            ClothFrontCRight.IsEnabled = false;
            ClothSideCLeft.IsEnabled = false;
            ClothSideCRight.IsEnabled = false;
            PoleynLeft.IsEnabled = false;
            PoleynRight.IsEnabled = false;
            FootLeft.IsEnabled = false;
            FootRight.IsEnabled = false;
            Head.IsEnabled = false;
            ArmLeft.IsEnabled = false;
            ArmRight.IsEnabled = false;
            PauldronLeft.IsEnabled = false;
            PauldronRight.IsEnabled = false;
            Unknown00.IsEnabled = false;
            ToesLeft.IsEnabled = false;
            ToesRight.IsEnabled = false;
            HairA.IsEnabled = false;
            HairFrontLeft.IsEnabled = false;
            HairFrontRight.IsEnabled = false;
            EarLeft.IsEnabled = false;
            EarRight.IsEnabled = false;
            ForearmLeft.IsEnabled = false;
            ForearmRight.IsEnabled = false;
            ShoulderLeft.IsEnabled = false;
            ShoulderRight.IsEnabled = false;
            HairB.IsEnabled = false;
            HandLeft.IsEnabled = false;
            HandRight.IsEnabled = false;
            ShieldLeft.IsEnabled = false;
            ShieldRight.IsEnabled = false;
            EarringALeft.IsEnabled = false;
            EarringARight.IsEnabled = false;
            ElbowLeft.IsEnabled = false;
            ElbowRight.IsEnabled = false;
            CouterLeft.IsEnabled = false;
            CouterRight.IsEnabled = false;
            WristLeft.IsEnabled = false;
            WristRight.IsEnabled = false;
            IndexALeft.IsEnabled = false;
            IndexARight.IsEnabled = false;
            PinkyALeft.IsEnabled = false;
            PinkyARight.IsEnabled = false;
            RingALeft.IsEnabled = false;
            RingARight.IsEnabled = false;
            MiddleALeft.IsEnabled = false;
            MiddleARight.IsEnabled = false;
            ThumbALeft.IsEnabled = false;
            ThumbARight.IsEnabled = false;
            WeaponLeft.IsEnabled = false;
            WeaponRight.IsEnabled = false;
            EarringBLeft.IsEnabled = false;
            EarringBRight.IsEnabled = false;
            IndexBLeft.IsEnabled = false;
            IndexBRight.IsEnabled = false;
            PinkyBLeft.IsEnabled = false;
            PinkyBRight.IsEnabled = false;
            RingBLeft.IsEnabled = false;
            RingBRight.IsEnabled = false;
            MiddleBLeft.IsEnabled = false;
            MiddleBRight.IsEnabled = false;
            ThumbBLeft.IsEnabled = false;
            ThumbBRight.IsEnabled = false;
            RootHead.IsEnabled = false;
            Jaw.IsEnabled = false;
            EyelidLowerLeft.IsEnabled = false;
            EyelidLowerRight.IsEnabled = false;
            EyeLeft.IsEnabled = false;
            EyeRight.IsEnabled = false;
            Nose.IsEnabled = false;
            CheekLeft.IsEnabled = false;
            HrothWhiskersLeft.IsEnabled = false;
            CheekRight.IsEnabled = false;
            HrothWhiskersRight.IsEnabled = false;
            LipsLeft.IsEnabled = false;
            LipsRight.IsEnabled = false;
            EyebrowLeft.IsEnabled = false;
            EyebrowRight.IsEnabled = false;
            Bridge.IsEnabled = false;
            BrowLeft.IsEnabled = false;
            BrowRight.IsEnabled = false;
            LipUpperA.IsEnabled = false;
            EyelidUpperLeft.IsEnabled = false;
            EyelidUpperRight.IsEnabled = false;
            LipLowerA.IsEnabled = false;
            LipUpperB.IsEnabled = false;
            LipLowerB.IsEnabled = false;
            DisableTertiary();

            //LoadHeadButton.IsEnabled = false;
            //LoadTorsoButton.IsEnabled = false;
            //LoadLArmButton.IsEnabled = false;
            //LoadRArmButton.IsEnabled = false;
            //LoadLLegButton.IsEnabled = false;
            //LoadRLegButton.IsEnabled = false;
        }
        private void EnableTertiary(object sender, RoutedEventArgs e)
        {
            DisableTertiary();
            Bone_Flag_Manager();
        }
        private void DisableTertiary()
        {
            TailA.IsEnabled = false;
            TailB.IsEnabled = false;
            TailC.IsEnabled = false;
            TailD.IsEnabled = false;
            TailE.IsEnabled = false;
            HrothWhiskersLeft.IsEnabled = false;
            HrothWhiskersRight.IsEnabled = false;
            VieraEarALeft.IsEnabled = false;
            VieraEarARight.IsEnabled = false;
            VieraEarBLeft.IsEnabled = false;
            VieraEarBRight.IsEnabled = false;
            ExHairA.IsEnabled = false;
            ExHairB.IsEnabled = false;
            ExHairC.IsEnabled = false;
            ExHairD.IsEnabled = false;
            ExHairE.IsEnabled = false;
            ExHairF.IsEnabled = false;
            ExHairG.IsEnabled = false;
            ExHairH.IsEnabled = false;
            ExHairI.IsEnabled = false;
            ExHairJ.IsEnabled = false;
            ExHairK.IsEnabled = false;
            ExHairL.IsEnabled = false;
            ExMetA.IsEnabled = false;
            ExMetB.IsEnabled = false;
            ExMetC.IsEnabled = false;
            ExMetD.IsEnabled = false;
            ExMetE.IsEnabled = false;
            ExMetF.IsEnabled = false;
            ExMetG.IsEnabled = false;
            ExMetH.IsEnabled = false;
            ExMetI.IsEnabled = false;
            ExMetJ.IsEnabled = false;
            ExMetK.IsEnabled = false;
            ExMetL.IsEnabled = false;
            ExMetM.IsEnabled = false;
            ExMetN.IsEnabled = false;
            ExMetO.IsEnabled = false;
            ExMetP.IsEnabled = false;
            ExMetQ.IsEnabled = false;
            ExMetR.IsEnabled = false;
            ExTopA.IsEnabled = false;
            ExTopB.IsEnabled = false;
            ExTopC.IsEnabled = false;
            ExTopD.IsEnabled = false;
            ExTopE.IsEnabled = false;
            ExTopF.IsEnabled = false;
            ExTopG.IsEnabled = false;
            ExTopH.IsEnabled = false;
            ExTopI.IsEnabled = false;
            bone_waist.Remove(bone_tail_a);
            for (int i = 0; i < bone_exhair.Length; i++)
            {
                bone_face.Remove(bone_exhair[i]);
            }
            for (int i = 0; i < bone_viera_ear_l.Length; i++)
            {
                bone_face_viera.Remove(bone_viera_ear_l[i]);
                bone_face_viera.Remove(bone_viera_ear_r[i]);
            }
            for (int i = 0; i < bone_exmet.Length; i++)
            {
                bone_face.Remove(bone_exmet[i]);
            }
            ReadTetriaryFromRunTime = false;
        }

        public class BoneSaves
        {
            public string Description { get; set; }
            public string DateCreated { get; set; }
            public string CMPVersion { get; set; }

            public string Race { get; set; }
            public string Clan { get; set; }
            public string Body { get; set; }

            public string Root { get; set; }
            public string Abdomen { get; set; }
            public string Throw { get; set; }
            public string Waist { get; set; }
            public string SpineA { get; set; }
            public string LegLeft { get; set; }
            public string LegRight { get; set; }
            public string HolsterLeft { get; set; }
            public string HolsterRight { get; set; }
            public string SheatheLeft { get; set; }
            public string SheatheRight { get; set; }
            public string SpineB { get; set; }
            public string ClothBackALeft { get; set; }
            public string ClothBackARight { get; set; }
            public string ClothFrontALeft { get; set; }
            public string ClothFrontARight { get; set; }
            public string ClothSideALeft { get; set; }
            public string ClothSideARight { get; set; }
            public string KneeLeft { get; set; }
            public string KneeRight { get; set; }
            public string BreastLeft { get; set; }
            public string BreastRight { get; set; }
            public string SpineC { get; set; }
            public string ClothBackBLeft { get; set; }
            public string ClothBackBRight { get; set; }
            public string ClothFrontBLeft { get; set; }
            public string ClothFrontBRight { get; set; }
            public string ClothSideBLeft { get; set; }
            public string ClothSideBRight { get; set; }
            public string CalfLeft { get; set; }
            public string CalfRight { get; set; }
            public string ScabbardLeft { get; set; }
            public string ScabbardRight { get; set; }
            public string Neck { get; set; }
            public string ClavicleLeft { get; set; }
            public string ClavicleRight { get; set; }
            public string ClothBackCLeft { get; set; }
            public string ClothBackCRight { get; set; }
            public string ClothFrontCLeft { get; set; }
            public string ClothFrontCRight { get; set; }
            public string ClothSideCLeft { get; set; }
            public string ClothSideCRight { get; set; }
            public string PoleynLeft { get; set; }
            public string PoleynRight { get; set; }
            public string FootLeft { get; set; }
            public string FootRight { get; set; }
            public string Head { get; set; }
            public string ArmLeft { get; set; }
            public string ArmRight { get; set; }
            public string PauldronLeft { get; set; }
            public string PauldronRight { get; set; }
            public string Unknown00 { get; set; }
            public string ToesLeft { get; set; }
            public string ToesRight { get; set; }
            public string HairA { get; set; }
            public string HairFrontLeft { get; set; }
            public string HairFrontRight { get; set; }
            public string EarLeft { get; set; }
            public string EarRight { get; set; }
            public string ForearmLeft { get; set; }
            public string ForearmRight { get; set; }
            public string ShoulderLeft { get; set; }
            public string ShoulderRight { get; set; }
            public string HairB { get; set; }
            public string HandLeft { get; set; }
            public string HandRight { get; set; }
            public string ShieldLeft { get; set; }
            public string ShieldRight { get; set; }
            public string EarringALeft { get; set; }
            public string EarringARight { get; set; }
            public string ElbowLeft { get; set; }
            public string ElbowRight { get; set; }
            public string CouterLeft { get; set; }
            public string CouterRight { get; set; }
            public string WristLeft { get; set; }
            public string WristRight { get; set; }
            public string IndexALeft { get; set; }
            public string IndexARight { get; set; }
            public string PinkyALeft { get; set; }
            public string PinkyARight { get; set; }
            public string RingALeft { get; set; }
            public string RingARight { get; set; }
            public string MiddleALeft { get; set; }
            public string MiddleARight { get; set; }
            public string ThumbALeft { get; set; }
            public string ThumbARight { get; set; }
            public string WeaponLeft { get; set; }
            public string WeaponRight { get; set; }
            public string EarringBLeft { get; set; }
            public string EarringBRight { get; set; }
            public string IndexBLeft { get; set; }
            public string IndexBRight { get; set; }
            public string PinkyBLeft { get; set; }
            public string PinkyBRight { get; set; }
            public string RingBLeft { get; set; }
            public string RingBRight { get; set; }
            public string MiddleBLeft { get; set; }
            public string MiddleBRight { get; set; }
            public string ThumbBLeft { get; set; }
            public string ThumbBRight { get; set; }
            public string TailA { get; set; }
            public string TailB { get; set; }
            public string TailC { get; set; }
            public string TailD { get; set; }
            public string TailE { get; set; }
            public string RootHead { get; set; }
            public string Jaw { get; set; }
            public string EyelidLowerLeft { get; set; }
            public string EyelidLowerRight { get; set; }
            public string EyeLeft { get; set; }
            public string EyeRight { get; set; }
            public string Nose { get; set; }
            public string CheekLeft { get; set; }
            public string HrothWhiskersLeft { get; set; }
            public string CheekRight { get; set; }
            public string HrothWhiskersRight { get; set; }
            public string LipsLeft { get; set; }
            public string HrothEyebrowLeft { get; set; }
            public string LipsRight { get; set; }
            public string HrothEyebrowRight { get; set; }
            public string EyebrowLeft { get; set; }
            public string HrothBridge { get; set; }
            public string EyebrowRight { get; set; }
            public string HrothBrowLeft { get; set; }
            public string Bridge { get; set; }
            public string HrothBrowRight { get; set; }
            public string BrowLeft { get; set; }
            public string HrothJawUpper { get; set; }
            public string BrowRight { get; set; }
            public string HrothLipUpper { get; set; }
            public string LipUpperA { get; set; }
            public string HrothEyelidUpperLeft { get; set; }
            public string EyelidUpperLeft { get; set; }
            public string HrothEyelidUpperRight { get; set; }
            public string EyelidUpperRight { get; set; }
            public string HrothLipsLeft { get; set; }
            public string LipLowerA { get; set; }
            public string HrothLipsRight { get; set; }
            public string VieraEar01ALeft { get; set; }
            public string LipUpperB { get; set; }
            public string HrothLipUpperLeft { get; set; }
            public string VieraEar01ARight { get; set; }
            public string LipLowerB { get; set; }
            public string HrothLipUpperRight { get; set; }
            public string VieraEar02ALeft { get; set; }
            public string HrothLipLower { get; set; }
            public string VieraEar02ARight { get; set; }
            public string VieraEar03ALeft { get; set; }
            public string VieraEar03ARight { get; set; }
            public string VieraEar04ALeft { get; set; }
            public string VieraEar04ARight { get; set; }
            public string VieraLipLowerA { get; set; }
            public string VieraLipUpperB { get; set; }
            public string VieraEar01BLeft { get; set; }
            public string VieraEar01BRight { get; set; }
            public string VieraEar02BLeft { get; set; }
            public string VieraEar02BRight { get; set; }
            public string VieraEar03BLeft { get; set; }
            public string VieraEar03BRight { get; set; }
            public string VieraEar04BLeft { get; set; }
            public string VieraEar04BRight { get; set; }
            public string VieraLipLowerB { get; set; }
            public string ExRootHair { get; set; }
            public string ExHairA { get; set; }
            public string ExHairB { get; set; }
            public string ExHairC { get; set; }
            public string ExHairD { get; set; }
            public string ExHairE { get; set; }
            public string ExHairF { get; set; }
            public string ExHairG { get; set; }
            public string ExHairH { get; set; }
            public string ExHairI { get; set; }
            public string ExHairJ { get; set; }
            public string ExHairK { get; set; }
            public string ExHairL { get; set; }
            public string ExRootMet { get; set; }
            public string ExMetA { get; set; }
            public string ExMetB { get; set; }
            public string ExMetC { get; set; }
            public string ExMetD { get; set; }
            public string ExMetE { get; set; }
            public string ExMetF { get; set; }
            public string ExMetG { get; set; }
            public string ExMetH { get; set; }
            public string ExMetI { get; set; }
            public string ExMetJ { get; set; }
            public string ExMetK { get; set; }
            public string ExMetL { get; set; }
            public string ExMetM { get; set; }
            public string ExMetN { get; set; }
            public string ExMetO { get; set; }
            public string ExMetP { get; set; }
            public string ExMetQ { get; set; }
            public string ExMetR { get; set; }
            public string ExRootTop { get; set; }
            public string ExTopA { get; set; }
            public string ExTopB { get; set; }
            public string ExTopC { get; set; }
            public string ExTopD { get; set; }
            public string ExTopE { get; set; }
            public string ExTopF { get; set; }
            public string ExTopG { get; set; }
            public string ExTopH { get; set; }
            public string ExTopI { get; set; }

        }
        private void SaveCMP_Click(object sender, RoutedEventArgs e)
        {
            MainWindow.CurrentlySaving = true;
            SaveFileDialog dig = new SaveFileDialog();
            dig.InitialDirectory = SaveSettings.Default.MatrixPoseSaveLoadDirectory;
            dig.Filter = "Concept Matrix Pose File(*.cmp)|*.cmp";
            if (dig.ShowDialog() == true)
            {
                string extension = System.IO.Path.GetExtension(".cmp");
                string result = dig.SafeFileName.Substring(0, dig.SafeFileName.Length - extension.Length);
                BoneSaves BoneSaver = new BoneSaves();
                BoneSaver.Description = result;
                BoneSaver.DateCreated = DateTime.Now.ToString("yyyy-MM-dd HH':'mm':'ss");
                BoneSaver.CMPVersion = "1.0";
                SaveSettings.Default.MatrixPoseSaveLoadDirectory = Path.GetDirectoryName(dig.FileName);
                BoneSaver.Race = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Race), 1));
                BoneSaver.Clan = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Clan), 1));
                BoneSaver.Body = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.BodyType), 1));

#region Head
                BoneSaver.Head = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Head_X), 16));
                BoneSaver.EarLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarLeft_X), 16));
                BoneSaver.EarRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarRight_X), 16));
                BoneSaver.RootHead = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RootHead_X), 16));
                BoneSaver.Jaw = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Jaw_X), 16));
                BoneSaver.EyelidLowerLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidLowerLeft_X), 16));
                BoneSaver.EyelidLowerRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidLowerRight_X), 16));
                BoneSaver.EyeLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyeLeft_X), 16));
                BoneSaver.EyeRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyeRight_X), 16));
                BoneSaver.Nose = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Nose_X), 16));
                BoneSaver.CheekLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), 16));
                BoneSaver.HrothWhiskersLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothWhiskersLeft_X), 16));
                BoneSaver.CheekRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), 16));
                BoneSaver.HrothWhiskersRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothWhiskersRight_X), 16));
                BoneSaver.LipsLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), 16));
                BoneSaver.HrothEyebrowLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowLeft_X), 16));
                BoneSaver.LipsRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), 16));
                BoneSaver.HrothEyebrowRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowRight_X), 16));
                BoneSaver.EyebrowLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), 16));
                BoneSaver.HrothBridge = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBridge_X), 16));
                BoneSaver.EyebrowRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), 16));
                BoneSaver.HrothBrowLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowLeft_X), 16));
                BoneSaver.Bridge = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), 16));
                BoneSaver.HrothBrowRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowRight_X), 16));
                BoneSaver.BrowLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), 16));
                BoneSaver.HrothJawUpper = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothJawUpper_X), 16));
                BoneSaver.BrowRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), 16));
                BoneSaver.HrothLipUpper = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpper_X), 16));
                BoneSaver.LipUpperA = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), 16));
                BoneSaver.HrothEyelidUpperLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperLeft_X), 16));
                BoneSaver.EyelidUpperLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), 16));
                BoneSaver.HrothEyelidUpperRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperRight_X), 16));
                BoneSaver.EyelidUpperRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), 16));
                BoneSaver.HrothLipsLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsLeft_X), 16));
                BoneSaver.LipLowerA = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerA_X), 16));
                BoneSaver.HrothLipsRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsRight_X), 16));
                BoneSaver.VieraEar01ALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01ALeft_X), 16));
                BoneSaver.LipUpperB = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperB_X), 16));
                BoneSaver.HrothLipUpperLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperLeft_X), 16));
                BoneSaver.VieraEar01ARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01ARight_X), 16));
                BoneSaver.LipLowerB = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerB_X), 16));
                BoneSaver.HrothLipUpperRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperRight_X), 16));
                BoneSaver.VieraEar02ALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02ALeft_X), 16));
                if (CharacterDetails.Race.value == 7 || CharacterDetails.Race.value == 8)
                {
                    BoneSaver.HrothLipLower = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipLower_X), 16));
                    BoneSaver.VieraEar02ARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02ARight_X), 16));
                }
                else
                {
                    BoneSaver.HrothLipLower = "null";
                    BoneSaver.VieraEar02ARight = "null";
                }
                if (CharacterDetails.Race.value == 8)
                {
                    BoneSaver.VieraEar03ALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03ALeft_X), 16));
                    BoneSaver.VieraEar03ARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03ARight_X), 16));
                    BoneSaver.VieraEar04ALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04ALeft_X), 16));
                    BoneSaver.VieraEar04ARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04ARight_X), 16));
                    BoneSaver.VieraLipLowerA = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerA_X), 16));
                    BoneSaver.VieraLipUpperB = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipUpperB_X), 16));
                    BoneSaver.VieraEar01BLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01BLeft_X), 16));
                    BoneSaver.VieraEar01BRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01BRight_X), 16));
                    BoneSaver.VieraEar02BLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02BLeft_X), 16));
                    BoneSaver.VieraEar02BRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02BRight_X), 16));
                    BoneSaver.VieraEar03BLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03BLeft_X), 16));
                    BoneSaver.VieraEar03BRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03BRight_X), 16));
                    BoneSaver.VieraEar04BLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04BLeft_X), 16));
                    BoneSaver.VieraEar04BRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04BRight_X), 16));
                    BoneSaver.VieraLipLowerB = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerB_X), 16));
                }
                else
                {
                    BoneSaver.VieraEar03ALeft = "null";
                    BoneSaver.VieraEar03ARight = "null";
                    BoneSaver.VieraEar04ALeft = "null";
                    BoneSaver.VieraEar04ARight = "null";
                    BoneSaver.VieraLipLowerA = "null";
                    BoneSaver.VieraLipUpperB = "null";
                    BoneSaver.VieraEar01BLeft = "null";
                    BoneSaver.VieraEar01BRight = "null";
                    BoneSaver.VieraEar02BLeft = "null";
                    BoneSaver.VieraEar02BRight = "null";
                    BoneSaver.VieraEar03BLeft = "null";
                    BoneSaver.VieraEar03BRight = "null";
                    BoneSaver.VieraEar04BLeft = "null";
                    BoneSaver.VieraEar04BRight = "null";
                    BoneSaver.VieraLipLowerB = "null";
                }
#endregion
#region Hair
                BoneSaver.HairA = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairA_X), 16));
                BoneSaver.HairFrontLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairFrontLeft_X), 16));
                BoneSaver.HairFrontRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairFrontRight_X), 16));
                BoneSaver.HairB = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairB_X), 16));
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 1)
                {
                    BoneSaver.ExRootHair = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExRootHair_X), 16));
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 2)
                {
                    BoneSaver.ExHairA = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairA_X), 16));
                }
                else
                {
                    BoneSaver.ExHairA = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 3)
                {
                    BoneSaver.ExHairB = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairB_X), 16));
                }
                else
                {
                    BoneSaver.ExHairB = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 4)
                {
                    BoneSaver.ExHairC = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairC_X), 16));
                }
                else
                {
                    BoneSaver.ExHairC = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 5)
                {
                    BoneSaver.ExHairD = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairD_X), 16));
                }
                else
                {
                    BoneSaver.ExHairD = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 6)
                {
                    BoneSaver.ExHairE = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairE_X), 16));
                }
                else
                {
                    BoneSaver.ExHairE = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 7)
                {
                    BoneSaver.ExHairF = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairF_X), 16));
                }
                else
                {
                    BoneSaver.ExHairF = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 8)
                {
                    BoneSaver.ExHairG = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairG_X), 16));
                }
                else
                {
                    BoneSaver.ExHairG = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 9)
                {
                    BoneSaver.ExHairH = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairH_X), 16));
                }
                else
                {
                    BoneSaver.ExHairH = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 10)
                {
                    BoneSaver.ExHairI = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairI_X), 16));
                }
                else
                {
                    BoneSaver.ExHairI = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 11)
                {
                    BoneSaver.ExHairJ = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairJ_X), 16));
                }
                else
                {
                    BoneSaver.ExHairJ = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 12)
                {
                    BoneSaver.ExHairK = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairK_X), 16));
                }
                else
                {
                    BoneSaver.ExHairK = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 13)
                {
                    BoneSaver.ExHairL = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairL_X), 16));
                }
                else
                {
                    BoneSaver.ExHairL = "null";
                }
                if (BoneSaver.ExRootHair == null)
                {
                    BoneSaver.ExRootHair = "null";
                    BoneSaver.ExHairA = "null";
                    BoneSaver.ExHairB = "null";
                    BoneSaver.ExHairC = "null";
                    BoneSaver.ExHairD = "null";
                    BoneSaver.ExHairE = "null";
                    BoneSaver.ExHairF = "null";
                    BoneSaver.ExHairG = "null";
                    BoneSaver.ExHairH = "null";
                    BoneSaver.ExHairI = "null";
                    BoneSaver.ExHairJ = "null";
                    BoneSaver.ExHairK = "null";
                    BoneSaver.ExHairL = "null";
                }
#endregion
#region Earrings
                BoneSaver.EarringALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringALeft_X), 16));
                BoneSaver.EarringARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringARight_X), 16));
                BoneSaver.EarringBLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringBLeft_X), 16));
                BoneSaver.EarringBRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringBRight_X), 16));
#endregion
#region Body
                BoneSaver.SpineA = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineA_X), 16));
                BoneSaver.SpineB = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineB_X), 16));
                BoneSaver.BreastLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BreastLeft_X), 16));
                BoneSaver.BreastRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BreastRight_X), 16));
                BoneSaver.SpineC = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineC_X), 16));
                BoneSaver.ScabbardLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ScabbardLeft_X), 16));
                BoneSaver.ScabbardRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ScabbardRight_X), 16));
                BoneSaver.Neck = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Neck_X), 16));
#endregion
#region LeftArm
                BoneSaver.ClavicleLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClavicleLeft_X), 16));
                BoneSaver.ArmLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmLeft_X), 16));                
                BoneSaver.PauldronLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PauldronLeft_X), 16));
                BoneSaver.ForearmLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ForearmLeft_X), 16));
                BoneSaver.ShoulderLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShoulderLeft_X), 16));
                BoneSaver.ShieldLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShieldLeft_X), 16));
                BoneSaver.ElbowLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ElbowLeft_X), 16));
                BoneSaver.CouterLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CouterLeft_X), 16));
                BoneSaver.WristLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WristLeft_X), 16));
#endregion
#region RightArm
                BoneSaver.ClavicleRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClavicleRight_X), 16));
                BoneSaver.ArmRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmRight_X), 16));                
                BoneSaver.PauldronRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PauldronRight_X), 16));
                BoneSaver.ForearmRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ForearmRight_X), 16));
                BoneSaver.ShoulderRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShoulderRight_X), 16));
                BoneSaver.ShieldRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShieldRight_X), 16));
                BoneSaver.ElbowRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ElbowRight_X), 16));
                BoneSaver.CouterRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CouterRight_X), 16));
                BoneSaver.WristRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WristRight_X), 16));
#endregion
#region Clothes
                BoneSaver.ClothBackALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackALeft_X), 16));
                BoneSaver.ClothBackARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackARight_X), 16));
                BoneSaver.ClothFrontALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontALeft_X), 16));
                BoneSaver.ClothFrontARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontARight_X), 16));
                BoneSaver.ClothSideALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideALeft_X), 16));
                BoneSaver.ClothSideARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideARight_X), 16));
                BoneSaver.ClothBackBLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackBLeft_X), 16));
                BoneSaver.ClothBackBRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackBRight_X), 16));
                BoneSaver.ClothFrontBLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontBLeft_X), 16));
                BoneSaver.ClothFrontBRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontBRight_X), 16));
                BoneSaver.ClothSideBLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideBLeft_X), 16));
                BoneSaver.ClothSideBRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideBRight_X), 16));
                BoneSaver.ClothBackCLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackCLeft_X), 16));
                BoneSaver.ClothBackCRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackCRight_X), 16));
                BoneSaver.ClothFrontCLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontCLeft_X), 16));
                BoneSaver.ClothFrontCRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontCRight_X), 16));
                BoneSaver.ClothSideCLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideCLeft_X), 16));
                BoneSaver.ClothSideCRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideCRight_X), 16));
#endregion
#region Weapons
                BoneSaver.WeaponLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WeaponLeft_X), 16));
                BoneSaver.WeaponRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WeaponRight_X), 16));
#endregion
#region LeftHand
                BoneSaver.HandLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HandLeft_X), 16));
                BoneSaver.IndexALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexALeft_X), 16));
                BoneSaver.PinkyALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyALeft_X), 16));
                BoneSaver.RingALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingALeft_X), 16));
                BoneSaver.MiddleALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleALeft_X), 16));
                BoneSaver.ThumbALeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbALeft_X), 16));
                BoneSaver.IndexBLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexBLeft_X), 16));
                BoneSaver.PinkyBLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyBLeft_X), 16));
                BoneSaver.RingBLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingBLeft_X), 16));
                BoneSaver.MiddleBLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleBLeft_X), 16));
                BoneSaver.ThumbBLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbBLeft_X), 16));
#endregion
#region RightHand
                BoneSaver.HandRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HandRight_X), 16));
                BoneSaver.IndexARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexARight_X), 16));
                BoneSaver.PinkyARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyARight_X), 16));
                BoneSaver.RingARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingARight_X), 16));
                BoneSaver.MiddleARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleARight_X), 16));
                BoneSaver.ThumbARight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbARight_X), 16));
                BoneSaver.IndexBRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexBRight_X), 16));
                BoneSaver.PinkyBRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyBRight_X), 16));
                BoneSaver.RingBRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingBRight_X), 16));
                BoneSaver.MiddleBRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleBRight_X), 16));
                BoneSaver.ThumbBRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbBRight_X), 16));
#endregion
#region Waist
                BoneSaver.Waist = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Waist_X), 16));
                BoneSaver.HolsterLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HolsterLeft_X), 16));
                BoneSaver.HolsterRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HolsterRight_X), 16));
                BoneSaver.SheatheLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SheatheLeft_X), 16));
                BoneSaver.SheatheRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SheatheRight_X), 16));
                if (CharacterDetails.Race.value == 4 || CharacterDetails.Race.value == 6 || CharacterDetails.Race.value == 7)
                {
                    BoneSaver.TailA = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailA_X), 16));
                    BoneSaver.TailB = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailB_X), 16));
                    BoneSaver.TailC = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailC_X), 16));
                    BoneSaver.TailD = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailD_X), 16));
                    BoneSaver.TailE = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailE_X), 16));
                }
                else
                {
                    BoneSaver.TailA = "null";
                    BoneSaver.TailB = "null";
                    BoneSaver.TailC = "null";
                    BoneSaver.TailD = "null";
                    BoneSaver.TailE = "null";
                }
#endregion
#region LeftLeg
                BoneSaver.LegLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LegLeft_X), 16));
                BoneSaver.KneeLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.KneeLeft_X), 16));
                BoneSaver.CalfLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CalfLeft_X), 16));
                BoneSaver.PoleynLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PoleynLeft_X), 16));
                BoneSaver.FootLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.FootLeft_X), 16));
                BoneSaver.ToesLeft = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ToesLeft_X), 16));
#endregion
#region RightLeg
                BoneSaver.LegRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LegRight_X), 16));
                BoneSaver.KneeRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.KneeRight_X), 16));
                BoneSaver.CalfRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CalfRight_X), 16));
                BoneSaver.PoleynRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PoleynRight_X), 16));
                BoneSaver.FootRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.FootRight_X), 16));
                BoneSaver.ToesRight = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ToesRight_X), 16));
#endregion
#region Helm
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 1)
                {
                    BoneSaver.ExRootMet = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExRootMet_X), 16));
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 2)
                {
                    BoneSaver.ExMetA = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetA_X), 16));
                }
                else
                {
                    BoneSaver.ExMetA = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 3)
                {
                    BoneSaver.ExMetB = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetB_X), 16));
                }
                else
                {
                    BoneSaver.ExMetB = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 4)
                {
                    BoneSaver.ExMetC = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetC_X), 16));
                }
                else
                {
                    BoneSaver.ExMetC = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 5)
                {
                    BoneSaver.ExMetD = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetD_X), 16));
                }
                else
                {
                    BoneSaver.ExMetD = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 6)
                {
                    BoneSaver.ExMetE = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetE_X), 16));
                }
                else
                {
                    BoneSaver.ExMetE = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 7)
                {
                    BoneSaver.ExMetF = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetF_X), 16));
                }
                else
                {
                    BoneSaver.ExMetF = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 8)
                {
                    BoneSaver.ExMetG = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetG_X), 16));
                }
                else
                {
                    BoneSaver.ExMetG = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 9)
                {
                    BoneSaver.ExMetH = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetH_X), 16));
                }
                else
                {
                    BoneSaver.ExMetH = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 10)
                {
                    BoneSaver.ExMetI = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetI_X), 16));
                }
                else
                {
                    BoneSaver.ExMetI = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 11)
                {
                    BoneSaver.ExMetJ = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetJ_X), 16));
                }
                else
                {
                    BoneSaver.ExMetJ = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 12)
                {
                    BoneSaver.ExMetK = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetK_X), 16));
                }
                else
                {
                    BoneSaver.ExMetK = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 13)
                {
                    BoneSaver.ExMetL = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetL_X), 16));
                }
                else
                {
                    BoneSaver.ExMetL = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 14)
                {
                    BoneSaver.ExMetM = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetM_X), 16));
                }
                else
                {
                    BoneSaver.ExMetM = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 15)
                {
                    BoneSaver.ExMetN = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetN_X), 16));
                }
                else
                {
                    BoneSaver.ExMetN = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 16)
                {
                    BoneSaver.ExMetO = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetO_X), 16));
                }
                else
                {
                    BoneSaver.ExMetO = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 17)
                {
                    BoneSaver.ExMetP = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetP_X), 16));
                }
                else
                {
                    BoneSaver.ExMetP = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 18)
                {
                    BoneSaver.ExMetQ = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetQ_X), 16));
                }
                else
                {
                    BoneSaver.ExMetQ = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 19)
                {
                    BoneSaver.ExMetR = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetR_X), 16));
                }
                else
                {
                    BoneSaver.ExMetR = "null";
                }
                if (BoneSaver.ExRootMet == null)
                {
                    BoneSaver.ExRootMet = "null";
                    BoneSaver.ExMetA = "null";
                    BoneSaver.ExMetB = "null";
                    BoneSaver.ExMetC = "null";
                    BoneSaver.ExMetD = "null";
                    BoneSaver.ExMetE = "null";
                    BoneSaver.ExMetF = "null";
                    BoneSaver.ExMetG = "null";
                    BoneSaver.ExMetH = "null";
                    BoneSaver.ExMetI = "null";
                    BoneSaver.ExMetJ = "null";
                    BoneSaver.ExMetK = "null";
                    BoneSaver.ExMetL = "null";
                    BoneSaver.ExMetM = "null";
                    BoneSaver.ExMetN = "null";
                    BoneSaver.ExMetO = "null";
                    BoneSaver.ExMetP = "null";
                    BoneSaver.ExMetQ = "null";
                    BoneSaver.ExMetR = "null";
                }
#endregion
#region Top
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 1)
                {
                    BoneSaver.ExRootTop = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExRootTop_X), 16));
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 2)
                {
                    BoneSaver.ExTopA = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopA_X), 16));
                }
                else
                {
                    BoneSaver.ExTopA = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 3)
                {
                    BoneSaver.ExTopB = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopB_X), 16));
                }
                else
                {
                    BoneSaver.ExTopB = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 4)
                {
                    BoneSaver.ExTopC = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopC_X), 16));
                }
                else
                {
                    BoneSaver.ExTopC = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 5)
                {
                    BoneSaver.ExTopD = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopD_X), 16));
                }
                else
                {
                    BoneSaver.ExTopD = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 6)
                {
                    BoneSaver.ExTopE = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopE_X), 16));
                }
                else
                {
                    BoneSaver.ExTopE = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 7)
                {
                    BoneSaver.ExTopF = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopF_X), 16));
                }
                else
                {
                    BoneSaver.ExTopF = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 8)
                {
                    BoneSaver.ExTopG = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopG_X), 16));
                }
                else
                {
                    BoneSaver.ExTopG = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 9)
                {
                    BoneSaver.ExTopH = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopH_X), 16));
                }
                else
                {
                    BoneSaver.ExTopH = "null";
                }
                if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 10)
                {
                    BoneSaver.ExTopI = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopI_X), 16));
                }
                else
                {
                    BoneSaver.ExTopI = "null";
                }
                if (BoneSaver.ExRootTop == null)
                {
                    BoneSaver.ExRootTop = "null";
                    BoneSaver.ExTopA = "null";
                    BoneSaver.ExTopB = "null";
                    BoneSaver.ExTopC = "null";
                    BoneSaver.ExTopD = "null";
                    BoneSaver.ExTopE = "null";
                    BoneSaver.ExTopF = "null";
                    BoneSaver.ExTopG = "null";
                    BoneSaver.ExTopH = "null";
                    BoneSaver.ExTopI = "null";
                }
#endregion
#region Other
                BoneSaver.Root = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Root_X), 16));
                BoneSaver.Abdomen = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Abdomen_X), 16));
                BoneSaver.Throw = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Throw_X), 16));
                BoneSaver.Unknown00 = MemoryManager.ByteArrayToString(m.readBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Unknown00_X), 16));
#endregion

                string details = JsonConvert.SerializeObject(BoneSaver, Formatting.Indented, new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.Auto });
                File.WriteAllText(dig.FileName, details);
                MainWindow.CurrentlySaving = false;
            }
            else MainWindow.CurrentlySaving = false;
        }
        private void LoadCMP_Click(object sender, RoutedEventArgs e)
        {
            DisableTertiary();
            Bone_Flag_Manager();
            OpenFileDialog dig = new OpenFileDialog();
            dig.InitialDirectory = SaveSettings.Default.MatrixPoseSaveLoadDirectory;
            dig.Filter = "Concept Matrix Pose File(*.cmp)|*.cmp";
            dig.DefaultExt = ".cmp";
            if (dig.ShowDialog() == true)
            {
                SaveSettings.Default.MatrixPoseSaveLoadDirectory = Path.GetDirectoryName(dig.FileName);
                if (MemoryManager.Instance.MemLib.readByte(MemoryManager.GetAddressString(MemoryManager.Instance.GposeCheckAddress)) == 1 && MemoryManager.Instance.MemLib.readByte(MemoryManager.GetAddressString(MemoryManager.Instance.GposeCheck2Address)) == 4)
                {
                    UncheckAll();
                    EditModeButton.IsChecked = true;
                    PhysicsButton.IsChecked = false;
                    BoneSaves BoneLoader = JsonConvert.DeserializeObject<BoneSaves>(File.ReadAllText(dig.FileName));

#region Head
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Head_X), MemoryManager.StringToByteArray(BoneLoader.Head.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarLeft_X), MemoryManager.StringToByteArray(BoneLoader.EarLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarRight_X), MemoryManager.StringToByteArray(BoneLoader.EarRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Jaw_X), MemoryManager.StringToByteArray(BoneLoader.Jaw.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidLowerLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyelidLowerLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidLowerRight_X), MemoryManager.StringToByteArray(BoneLoader.EyelidLowerRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyeLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyeLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyeRight_X), MemoryManager.StringToByteArray(BoneLoader.EyeRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Nose_X), MemoryManager.StringToByteArray(BoneLoader.Nose.Replace(" ", string.Empty)));
                    if (CharacterDetails.Race.value < 7)
                    {
                        if (BoneLoader.Race == "01" || BoneLoader.Race == "02" || BoneLoader.Race == "03" || BoneLoader.Race == "04" || BoneLoader.Race == "05" || BoneLoader.Race == "06")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(BoneLoader.CheekLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(BoneLoader.CheekRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(BoneLoader.LipsLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(BoneLoader.LipsRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(BoneLoader.Bridge.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.BrowLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(BoneLoader.BrowRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(BoneLoader.LipUpperA.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerA_X), MemoryManager.StringToByteArray(BoneLoader.LipLowerA.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperB_X), MemoryManager.StringToByteArray(BoneLoader.LipUpperB.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerB_X), MemoryManager.StringToByteArray(BoneLoader.LipLowerB.Replace(" ", string.Empty)));
                        }
                        if (BoneLoader.Race == "07")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpperLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpperRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipsLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipsRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyebrowLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyebrowRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(BoneLoader.HrothBridge.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothBrowLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothBrowRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpper.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyelidUpperLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyelidUpperRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperB_X), MemoryManager.StringToByteArray(BoneLoader.HrothJawUpper.Replace(" ", string.Empty)));
                        }
                        if (BoneLoader.Race == "08")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(BoneLoader.CheekLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(BoneLoader.CheekRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(BoneLoader.LipsLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(BoneLoader.LipsRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(BoneLoader.Bridge.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.BrowLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(BoneLoader.BrowRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(BoneLoader.LipUpperA.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerA_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipLowerA.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperB_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipUpperB.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerB_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipLowerB.Replace(" ", string.Empty)));
                        }
                    }
                    if (CharacterDetails.Race.value == 7)
                    {
                        if (BoneLoader.Race == "01" || BoneLoader.Race == "02" || BoneLoader.Race == "03" || BoneLoader.Race == "04" || BoneLoader.Race == "05" || BoneLoader.Race == "06")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowRight_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBridge_X), MemoryManager.StringToByteArray(BoneLoader.Bridge.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.BrowLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowRight_X), MemoryManager.StringToByteArray(BoneLoader.BrowRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothJawUpper_X), MemoryManager.StringToByteArray(BoneLoader.LipUpperB.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpper_X), MemoryManager.StringToByteArray(BoneLoader.LipUpperA.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsLeft_X), MemoryManager.StringToByteArray(BoneLoader.LipsLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsRight_X), MemoryManager.StringToByteArray(BoneLoader.LipsRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.CheekLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.CheekRight.Replace(" ", string.Empty)));
                        }
                        if (BoneLoader.Race == "07")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothWhiskersLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothWhiskersLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothWhiskersRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothWhiskersRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyebrowLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyebrowRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBridge_X), MemoryManager.StringToByteArray(BoneLoader.HrothBridge.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothBrowLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothBrowRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothJawUpper_X), MemoryManager.StringToByteArray(BoneLoader.HrothJawUpper.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpper_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpper.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyelidUpperLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyelidUpperRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipsLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipsRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpperLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpperRight.Replace(" ", string.Empty)));
                        }
                        if (BoneLoader.Race == "08")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowRight_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBridge_X), MemoryManager.StringToByteArray(BoneLoader.Bridge.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.BrowLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowRight_X), MemoryManager.StringToByteArray(BoneLoader.BrowRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothJawUpper_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipUpperB.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpper_X), MemoryManager.StringToByteArray(BoneLoader.LipUpperA.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsLeft_X), MemoryManager.StringToByteArray(BoneLoader.LipsLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsRight_X), MemoryManager.StringToByteArray(BoneLoader.LipsRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.CheekLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.CheekRight.Replace(" ", string.Empty)));
                        }
                    }
                    if (CharacterDetails.Race.value == 8)
                    {
                        if (BoneLoader.Race == "01" || BoneLoader.Race == "02" || BoneLoader.Race == "03" || BoneLoader.Race == "04" || BoneLoader.Race == "05" || BoneLoader.Race == "06")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(BoneLoader.CheekLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(BoneLoader.CheekRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(BoneLoader.LipsLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(BoneLoader.LipsRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(BoneLoader.Bridge.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.BrowLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(BoneLoader.BrowRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(BoneLoader.LipUpperA.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerA_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar01ALeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipUpperB_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar01ARight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerB_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar02ALeft.Replace(" ", string.Empty)));
                        }
                        if (BoneLoader.Race == "07")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpperLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpperRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipsLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipsRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyebrowLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyebrowRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(BoneLoader.HrothBridge.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothBrowLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothBrowRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpper.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyelidUpperLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyelidUpperRight.Replace(" ", string.Empty)));
                        }
                        if (BoneLoader.Race == "08")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(BoneLoader.CheekLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(BoneLoader.CheekRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(BoneLoader.LipsLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(BoneLoader.LipsRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(BoneLoader.Bridge.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.BrowLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(BoneLoader.BrowRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(BoneLoader.LipUpperA.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01ALeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar01ALeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01ARight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar01ARight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02ALeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar02ALeft.Replace(" ", string.Empty)));
                        }
                    }
                    if (BoneLoader.HrothLipLower != "null" || BoneLoader.VieraEar02ARight != "null")
                    {
                        if (CharacterDetails.Race.value == 7)
                        {
                            if (BoneLoader.Race == "07")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipLower_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipLower.Replace(" ", string.Empty)));
                            }
                        }
                        if (CharacterDetails.Race.value == 8)
                        {
                            if (BoneLoader.Race == "08")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02ARight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar02ARight.Replace(" ", string.Empty)));
                            }
                        }
                    }
                    if (BoneLoader.VieraEar03ALeft != "null")
                    {
                        if (CharacterDetails.Race.value < 7)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerA_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipLowerA.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperB_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipUpperB.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerB_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipLowerB.Replace(" ", string.Empty)));
                        }
                        if (CharacterDetails.Race.value == 8)
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03ALeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar03ALeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03ARight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar03ARight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04ALeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar04ALeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04ARight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar04ARight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerA_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipLowerA.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipUpperB_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipUpperB.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01BLeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar01BLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01BRight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar01BRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02BLeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar02BLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02BRight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar02BRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03BLeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar03BLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03BRight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar03BRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04BLeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar04BLeft.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04BRight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar04BRight.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerB_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipLowerB.Replace(" ", string.Empty)));
                        }
                    }
#endregion
#region Hair
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairA_X), MemoryManager.StringToByteArray(BoneLoader.HairA.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairFrontLeft_X), MemoryManager.StringToByteArray(BoneLoader.HairFrontLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairFrontRight_X), MemoryManager.StringToByteArray(BoneLoader.HairFrontRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairB_X), MemoryManager.StringToByteArray(BoneLoader.HairB.Replace(" ", string.Empty)));
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 2)
                    {
                        if (BoneLoader.ExHairA != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairA_X), MemoryManager.StringToByteArray(BoneLoader.ExHairA.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 3)
                    {
                        if (BoneLoader.ExHairB != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairB_X), MemoryManager.StringToByteArray(BoneLoader.ExHairB.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 4)
                    {
                        if (BoneLoader.ExHairC != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairC_X), MemoryManager.StringToByteArray(BoneLoader.ExHairC.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 5)
                    {
                        if (BoneLoader.ExHairD != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairD_X), MemoryManager.StringToByteArray(BoneLoader.ExHairD.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 6)
                    {
                        if (BoneLoader.ExHairE != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairE_X), MemoryManager.StringToByteArray(BoneLoader.ExHairE.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 7)
                    {
                        if (BoneLoader.ExHairF != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairF_X), MemoryManager.StringToByteArray(BoneLoader.ExHairF.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 8)
                    {
                        if (BoneLoader.ExHairG != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairG_X), MemoryManager.StringToByteArray(BoneLoader.ExHairG.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 9)
                    {
                        if (BoneLoader.ExHairH != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairH_X), MemoryManager.StringToByteArray(BoneLoader.ExHairH.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 10)
                    {
                        if (BoneLoader.ExHairI != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairI_X), MemoryManager.StringToByteArray(BoneLoader.ExHairI.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 11)
                    {
                        if (BoneLoader.ExHairJ != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairJ_X), MemoryManager.StringToByteArray(BoneLoader.ExHairJ.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 12)
                    {
                        if (BoneLoader.ExHairK != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairK_X), MemoryManager.StringToByteArray(BoneLoader.ExHairK.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 13)
                    {
                        if (BoneLoader.ExHairL != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairL_X), MemoryManager.StringToByteArray(BoneLoader.ExHairL.Replace(" ", string.Empty)));
                        }
                    }
#endregion
#region Earrings
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringALeft_X), MemoryManager.StringToByteArray(BoneLoader.EarringALeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringARight_X), MemoryManager.StringToByteArray(BoneLoader.EarringARight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringBLeft_X), MemoryManager.StringToByteArray(BoneLoader.EarringBLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringBRight_X), MemoryManager.StringToByteArray(BoneLoader.EarringBRight.Replace(" ", string.Empty)));
#endregion
#region Body
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineA_X), MemoryManager.StringToByteArray(BoneLoader.SpineA.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineB_X), MemoryManager.StringToByteArray(BoneLoader.SpineB.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BreastLeft_X), MemoryManager.StringToByteArray(BoneLoader.BreastLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BreastRight_X), MemoryManager.StringToByteArray(BoneLoader.BreastRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineC_X), MemoryManager.StringToByteArray(BoneLoader.SpineC.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ScabbardLeft_X), MemoryManager.StringToByteArray(BoneLoader.ScabbardLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ScabbardRight_X), MemoryManager.StringToByteArray(BoneLoader.ScabbardRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Neck_X), MemoryManager.StringToByteArray(BoneLoader.Neck.Replace(" ", string.Empty)));
#endregion
#region LeftArm
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClavicleLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClavicleLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmLeft_X), MemoryManager.StringToByteArray(BoneLoader.ArmLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PauldronLeft_X), MemoryManager.StringToByteArray(BoneLoader.PauldronLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ForearmLeft_X), MemoryManager.StringToByteArray(BoneLoader.ForearmLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShoulderLeft_X), MemoryManager.StringToByteArray(BoneLoader.ShoulderLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShieldLeft_X), MemoryManager.StringToByteArray(BoneLoader.ShieldLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ElbowLeft_X), MemoryManager.StringToByteArray(BoneLoader.ElbowLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CouterLeft_X), MemoryManager.StringToByteArray(BoneLoader.CouterLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WristLeft_X), MemoryManager.StringToByteArray(BoneLoader.WristLeft.Replace(" ", string.Empty)));
#endregion
#region RightArm
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClavicleRight_X), MemoryManager.StringToByteArray(BoneLoader.ClavicleRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmRight_X), MemoryManager.StringToByteArray(BoneLoader.ArmRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PauldronRight_X), MemoryManager.StringToByteArray(BoneLoader.PauldronRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ForearmRight_X), MemoryManager.StringToByteArray(BoneLoader.ForearmRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShoulderRight_X), MemoryManager.StringToByteArray(BoneLoader.ShoulderRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShieldRight_X), MemoryManager.StringToByteArray(BoneLoader.ShieldRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ElbowRight_X), MemoryManager.StringToByteArray(BoneLoader.ElbowRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CouterRight_X), MemoryManager.StringToByteArray(BoneLoader.CouterRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WristRight_X), MemoryManager.StringToByteArray(BoneLoader.WristRight.Replace(" ", string.Empty)));
#endregion
#region Clothes
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackALeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackALeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackARight_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackARight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontALeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontALeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontARight_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontARight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideALeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideALeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideARight_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideARight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackBLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackBLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackBRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackBRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontBLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontBLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontBRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontBRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideBLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideBLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideBRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideBRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackCLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackCLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackCRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackCRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontCLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontCLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontCRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontCRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideCLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideCLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideCRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideCRight.Replace(" ", string.Empty)));
#endregion
#region Weapons
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WeaponLeft_X), MemoryManager.StringToByteArray(BoneLoader.WeaponLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WeaponRight_X), MemoryManager.StringToByteArray(BoneLoader.WeaponRight.Replace(" ", string.Empty)));
#endregion
#region LeftHand
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HandLeft_X), MemoryManager.StringToByteArray(BoneLoader.HandLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexALeft_X), MemoryManager.StringToByteArray(BoneLoader.IndexALeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyALeft_X), MemoryManager.StringToByteArray(BoneLoader.PinkyALeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingALeft_X), MemoryManager.StringToByteArray(BoneLoader.RingALeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleALeft_X), MemoryManager.StringToByteArray(BoneLoader.MiddleALeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbALeft_X), MemoryManager.StringToByteArray(BoneLoader.ThumbALeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexBLeft_X), MemoryManager.StringToByteArray(BoneLoader.IndexBLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyBLeft_X), MemoryManager.StringToByteArray(BoneLoader.PinkyBLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingBLeft_X), MemoryManager.StringToByteArray(BoneLoader.RingBLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleBLeft_X), MemoryManager.StringToByteArray(BoneLoader.MiddleBLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbBLeft_X), MemoryManager.StringToByteArray(BoneLoader.ThumbBLeft.Replace(" ", string.Empty)));
#endregion
#region RightHand
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HandRight_X), MemoryManager.StringToByteArray(BoneLoader.HandRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexARight_X), MemoryManager.StringToByteArray(BoneLoader.IndexARight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyARight_X), MemoryManager.StringToByteArray(BoneLoader.PinkyARight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingARight_X), MemoryManager.StringToByteArray(BoneLoader.RingARight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleARight_X), MemoryManager.StringToByteArray(BoneLoader.MiddleARight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbARight_X), MemoryManager.StringToByteArray(BoneLoader.ThumbARight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexBRight_X), MemoryManager.StringToByteArray(BoneLoader.IndexBRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyBRight_X), MemoryManager.StringToByteArray(BoneLoader.PinkyBRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingBRight_X), MemoryManager.StringToByteArray(BoneLoader.RingBRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleBRight_X), MemoryManager.StringToByteArray(BoneLoader.MiddleBRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbBRight_X), MemoryManager.StringToByteArray(BoneLoader.ThumbBRight.Replace(" ", string.Empty)));
#endregion
#region Waist
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Waist_X), MemoryManager.StringToByteArray(BoneLoader.Waist.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HolsterLeft_X), MemoryManager.StringToByteArray(BoneLoader.HolsterLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HolsterRight_X), MemoryManager.StringToByteArray(BoneLoader.HolsterRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SheatheLeft_X), MemoryManager.StringToByteArray(BoneLoader.SheatheLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SheatheRight_X), MemoryManager.StringToByteArray(BoneLoader.SheatheRight.Replace(" ", string.Empty)));
                    if (BoneLoader.TailA != "null")
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailA_X), MemoryManager.StringToByteArray(BoneLoader.TailA.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailB_X), MemoryManager.StringToByteArray(BoneLoader.TailB.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailC_X), MemoryManager.StringToByteArray(BoneLoader.TailC.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailD_X), MemoryManager.StringToByteArray(BoneLoader.TailD.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailE_X), MemoryManager.StringToByteArray(BoneLoader.TailE.Replace(" ", string.Empty)));
                    }
#endregion
#region LeftLeg
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LegLeft_X), MemoryManager.StringToByteArray(BoneLoader.LegLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.KneeLeft_X), MemoryManager.StringToByteArray(BoneLoader.KneeLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CalfLeft_X), MemoryManager.StringToByteArray(BoneLoader.CalfLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PoleynLeft_X), MemoryManager.StringToByteArray(BoneLoader.PoleynLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.FootLeft_X), MemoryManager.StringToByteArray(BoneLoader.FootLeft.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ToesLeft_X), MemoryManager.StringToByteArray(BoneLoader.ToesLeft.Replace(" ", string.Empty)));
#endregion
#region RightLeg
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LegRight_X), MemoryManager.StringToByteArray(BoneLoader.LegRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.KneeRight_X), MemoryManager.StringToByteArray(BoneLoader.KneeRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CalfRight_X), MemoryManager.StringToByteArray(BoneLoader.CalfRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PoleynRight_X), MemoryManager.StringToByteArray(BoneLoader.PoleynRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.FootRight_X), MemoryManager.StringToByteArray(BoneLoader.FootRight.Replace(" ", string.Empty)));
                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ToesRight_X), MemoryManager.StringToByteArray(BoneLoader.ToesRight.Replace(" ", string.Empty)));
#endregion
#region Helm
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 2)
                    {
                        if (BoneLoader.ExMetA != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetA_X), MemoryManager.StringToByteArray(BoneLoader.ExMetA.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 3)
                    {
                        if (BoneLoader.ExMetB != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetB_X), MemoryManager.StringToByteArray(BoneLoader.ExMetB.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 4)
                    {
                        if (BoneLoader.ExMetC != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetC_X), MemoryManager.StringToByteArray(BoneLoader.ExMetC.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 5)
                    {
                        if (BoneLoader.ExMetD != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetD_X), MemoryManager.StringToByteArray(BoneLoader.ExMetD.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 6)
                    {
                        if (BoneLoader.ExMetE != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetE_X), MemoryManager.StringToByteArray(BoneLoader.ExMetE.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 7)
                    {
                        if (BoneLoader.ExMetF != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetF_X), MemoryManager.StringToByteArray(BoneLoader.ExMetF.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 8)
                    {
                        if (BoneLoader.ExMetG != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetG_X), MemoryManager.StringToByteArray(BoneLoader.ExMetG.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 9)
                    {
                        if (BoneLoader.ExMetH != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetH_X), MemoryManager.StringToByteArray(BoneLoader.ExMetH.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 10)
                    {
                        if (BoneLoader.ExMetI != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetI_X), MemoryManager.StringToByteArray(BoneLoader.ExMetI.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 11)
                    {
                        if (BoneLoader.ExMetJ != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetJ_X), MemoryManager.StringToByteArray(BoneLoader.ExMetJ.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 12)
                    {
                        if (BoneLoader.ExMetK != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetK_X), MemoryManager.StringToByteArray(BoneLoader.ExMetK.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 13)
                    {
                        if (BoneLoader.ExMetL != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetL_X), MemoryManager.StringToByteArray(BoneLoader.ExMetL.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 14)
                    {
                        if (BoneLoader.ExMetM != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetM_X), MemoryManager.StringToByteArray(BoneLoader.ExMetM.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 15)
                    {
                        if (BoneLoader.ExMetN != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetN_X), MemoryManager.StringToByteArray(BoneLoader.ExMetN.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 16)
                    {
                        if (BoneLoader.ExMetO != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetO_X), MemoryManager.StringToByteArray(BoneLoader.ExMetO.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 17)
                    {
                        if (BoneLoader.ExMetP != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetP_X), MemoryManager.StringToByteArray(BoneLoader.ExMetP.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 18)
                    {
                        if (BoneLoader.ExMetQ != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetQ_X), MemoryManager.StringToByteArray(BoneLoader.ExMetQ.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 19)
                    {
                        if (BoneLoader.ExMetR != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetR_X), MemoryManager.StringToByteArray(BoneLoader.ExMetR.Replace(" ", string.Empty)));
                        }
                    }
#endregion
#region Top
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 2)
                    {
                        if (BoneLoader.ExTopA != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopA_X), MemoryManager.StringToByteArray(BoneLoader.ExTopA.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 3)
                    {
                        if (BoneLoader.ExTopB != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopB_X), MemoryManager.StringToByteArray(BoneLoader.ExTopB.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 4)
                    {
                        if (BoneLoader.ExTopC != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopC_X), MemoryManager.StringToByteArray(BoneLoader.ExTopC.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 5)
                    {
                        if (BoneLoader.ExTopD != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopD_X), MemoryManager.StringToByteArray(BoneLoader.ExTopD.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 6)
                    {
                        if (BoneLoader.ExTopE != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopE_X), MemoryManager.StringToByteArray(BoneLoader.ExTopE.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 7)
                    {
                        if (BoneLoader.ExTopF != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopF_X), MemoryManager.StringToByteArray(BoneLoader.ExTopF.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 8)
                    {
                        if (BoneLoader.ExTopG != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopG_X), MemoryManager.StringToByteArray(BoneLoader.ExTopG.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 9)
                    {
                        if (BoneLoader.ExTopH != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopH_X), MemoryManager.StringToByteArray(BoneLoader.ExTopH.Replace(" ", string.Empty)));
                        }
                    }
                    if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 10)
                    {
                        if (BoneLoader.ExTopI != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopI_X), MemoryManager.StringToByteArray(BoneLoader.ExTopI.Replace(" ", string.Empty)));
                        }
                    }
#endregion
                }
            }
            else return;
        }
        private void AdvLoadCMP_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog dig = new OpenFileDialog();
            dig.InitialDirectory = SaveSettings.Default.MatrixPoseSaveLoadDirectory;
            dig.Filter = "Concept Matrix Pose File(*.cmp)|*.cmp";
            dig.DefaultExt = ".cmp";
            if (dig.ShowDialog() == true)
            {
                SaveSettings.Default.MatrixPoseSaveLoadDirectory = Path.GetDirectoryName(dig.FileName);
                if (MemoryManager.Instance.MemLib.readByte(MemoryManager.GetAddressString(MemoryManager.Instance.GposeCheckAddress)) == 1 && MemoryManager.Instance.MemLib.readByte(MemoryManager.GetAddressString(MemoryManager.Instance.GposeCheck2Address)) == 4)
                {
                    UncheckAll();
                    EditModeButton.IsChecked = true;
                    PhysicsButton.IsChecked = false;
                    BoneSaves BoneLoader = JsonConvert.DeserializeObject<BoneSaves>(File.ReadAllText(dig.FileName));

#region Head
                    if (HeadAdvLoad == true)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Head_X), MemoryManager.StringToByteArray(BoneLoader.Head.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarLeft_X), MemoryManager.StringToByteArray(BoneLoader.EarLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarRight_X), MemoryManager.StringToByteArray(BoneLoader.EarRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Jaw_X), MemoryManager.StringToByteArray(BoneLoader.Jaw.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidLowerLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyelidLowerLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidLowerRight_X), MemoryManager.StringToByteArray(BoneLoader.EyelidLowerRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyeLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyeLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyeRight_X), MemoryManager.StringToByteArray(BoneLoader.EyeRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Nose_X), MemoryManager.StringToByteArray(BoneLoader.Nose.Replace(" ", string.Empty)));
                        if (CharacterDetails.Race.value < 7)
                        {
                            if (BoneLoader.Race == "01" || BoneLoader.Race == "02" || BoneLoader.Race == "03" || BoneLoader.Race == "04" || BoneLoader.Race == "05" || BoneLoader.Race == "06")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(BoneLoader.CheekLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(BoneLoader.CheekRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(BoneLoader.LipsLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(BoneLoader.LipsRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(BoneLoader.Bridge.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.BrowLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(BoneLoader.BrowRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(BoneLoader.LipUpperA.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerA_X), MemoryManager.StringToByteArray(BoneLoader.LipLowerA.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperB_X), MemoryManager.StringToByteArray(BoneLoader.LipUpperB.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerB_X), MemoryManager.StringToByteArray(BoneLoader.LipLowerB.Replace(" ", string.Empty)));
                            }
                            if (BoneLoader.Race == "07")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpperLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpperRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipsLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipsRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyebrowLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyebrowRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(BoneLoader.HrothBridge.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothBrowLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothBrowRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpper.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyelidUpperLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyelidUpperRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperB_X), MemoryManager.StringToByteArray(BoneLoader.HrothJawUpper.Replace(" ", string.Empty)));
                            }
                            if (BoneLoader.Race == "08")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(BoneLoader.CheekLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(BoneLoader.CheekRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(BoneLoader.LipsLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(BoneLoader.LipsRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(BoneLoader.Bridge.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.BrowLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(BoneLoader.BrowRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(BoneLoader.LipUpperA.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerA_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipLowerA.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperB_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipUpperB.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerB_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipLowerB.Replace(" ", string.Empty)));
                            }
                        }
                        if (CharacterDetails.Race.value == 7)
                        {
                            if (BoneLoader.Race == "01" || BoneLoader.Race == "02" || BoneLoader.Race == "03" || BoneLoader.Race == "04" || BoneLoader.Race == "05" || BoneLoader.Race == "06")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowRight_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBridge_X), MemoryManager.StringToByteArray(BoneLoader.Bridge.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.BrowLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowRight_X), MemoryManager.StringToByteArray(BoneLoader.BrowRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothJawUpper_X), MemoryManager.StringToByteArray(BoneLoader.LipUpperB.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpper_X), MemoryManager.StringToByteArray(BoneLoader.LipUpperA.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsLeft_X), MemoryManager.StringToByteArray(BoneLoader.LipsLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsRight_X), MemoryManager.StringToByteArray(BoneLoader.LipsRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.CheekLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.CheekRight.Replace(" ", string.Empty)));
                            }
                            if (BoneLoader.Race == "07")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothWhiskersLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothWhiskersLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothWhiskersRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothWhiskersRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyebrowLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyebrowRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBridge_X), MemoryManager.StringToByteArray(BoneLoader.HrothBridge.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothBrowLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothBrowRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothJawUpper_X), MemoryManager.StringToByteArray(BoneLoader.HrothJawUpper.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpper_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpper.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyelidUpperLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyelidUpperRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipsLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipsRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpperLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpperRight.Replace(" ", string.Empty)));
                            }
                            if (BoneLoader.Race == "08")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyebrowRight_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBridge_X), MemoryManager.StringToByteArray(BoneLoader.Bridge.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.BrowLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothBrowRight_X), MemoryManager.StringToByteArray(BoneLoader.BrowRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothJawUpper_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipUpperB.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpper_X), MemoryManager.StringToByteArray(BoneLoader.LipUpperA.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothEyelidUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsLeft_X), MemoryManager.StringToByteArray(BoneLoader.LipsLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipsRight_X), MemoryManager.StringToByteArray(BoneLoader.LipsRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.CheekLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.CheekRight.Replace(" ", string.Empty)));
                            }
                        }
                        if (CharacterDetails.Race.value == 8)
                        {
                            if (BoneLoader.Race == "01" || BoneLoader.Race == "02" || BoneLoader.Race == "03" || BoneLoader.Race == "04" || BoneLoader.Race == "05" || BoneLoader.Race == "06")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(BoneLoader.CheekLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(BoneLoader.CheekRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(BoneLoader.LipsLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(BoneLoader.LipsRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(BoneLoader.Bridge.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.BrowLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(BoneLoader.BrowRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(BoneLoader.LipUpperA.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerA_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar01ALeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipUpperB_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar01ARight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerB_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar02ALeft.Replace(" ", string.Empty)));
                            }
                            if (BoneLoader.Race == "07")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpperLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpperRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipsLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipsRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyebrowLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyebrowRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(BoneLoader.HrothBridge.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothBrowLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothBrowRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipUpper.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyelidUpperLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.HrothEyelidUpperRight.Replace(" ", string.Empty)));
                            }
                            if (BoneLoader.Race == "08")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekLeft_X), MemoryManager.StringToByteArray(BoneLoader.CheekLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CheekRight_X), MemoryManager.StringToByteArray(BoneLoader.CheekRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsLeft_X), MemoryManager.StringToByteArray(BoneLoader.LipsLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipsRight_X), MemoryManager.StringToByteArray(BoneLoader.LipsRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyebrowRight_X), MemoryManager.StringToByteArray(BoneLoader.EyebrowRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Bridge_X), MemoryManager.StringToByteArray(BoneLoader.Bridge.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowLeft_X), MemoryManager.StringToByteArray(BoneLoader.BrowLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BrowRight_X), MemoryManager.StringToByteArray(BoneLoader.BrowRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperA_X), MemoryManager.StringToByteArray(BoneLoader.LipUpperA.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperLeft_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EyelidUpperRight_X), MemoryManager.StringToByteArray(BoneLoader.EyelidUpperRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01ALeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar01ALeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01ARight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar01ARight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02ALeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar02ALeft.Replace(" ", string.Empty)));
                            }
                        }
                        if (BoneLoader.HrothLipLower != "null" || BoneLoader.VieraEar02ARight != "null")
                        {
                            if (CharacterDetails.Race.value == 7)
                            {
                                if (BoneLoader.Race == "07")
                                {
                                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HrothLipLower_X), MemoryManager.StringToByteArray(BoneLoader.HrothLipLower.Replace(" ", string.Empty)));
                                }
                            }
                            if (CharacterDetails.Race.value == 8)
                            {
                                if (BoneLoader.Race == "08")
                                {
                                    m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02ARight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar02ARight.Replace(" ", string.Empty)));
                                }
                            }
                        }
                        if (BoneLoader.VieraEar03ALeft != "null")
                        {
                            if (CharacterDetails.Race.value < 7)
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerA_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipLowerA.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipUpperB_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipUpperB.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LipLowerB_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipLowerB.Replace(" ", string.Empty)));
                            }
                            if (CharacterDetails.Race.value == 8)
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03ALeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar03ALeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03ARight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar03ARight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04ALeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar04ALeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04ARight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar04ARight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerA_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipLowerA.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipUpperB_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipUpperB.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01BLeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar01BLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar01BRight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar01BRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02BLeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar02BLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar02BRight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar02BRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03BLeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar03BLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar03BRight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar03BRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04BLeft_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar04BLeft.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraEar04BRight_X), MemoryManager.StringToByteArray(BoneLoader.VieraEar04BRight.Replace(" ", string.Empty)));
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.VieraLipLowerB_X), MemoryManager.StringToByteArray(BoneLoader.VieraLipLowerB.Replace(" ", string.Empty)));
                            }
                        }
                    }
#endregion
#region Hair
                    if (HairAdvLoad == true)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairA_X), MemoryManager.StringToByteArray(BoneLoader.HairA.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairFrontLeft_X), MemoryManager.StringToByteArray(BoneLoader.HairFrontLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairFrontRight_X), MemoryManager.StringToByteArray(BoneLoader.HairFrontRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HairB_X), MemoryManager.StringToByteArray(BoneLoader.HairB.Replace(" ", string.Empty)));
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 2)
                        {
                            if (BoneLoader.ExHairA != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairA_X), MemoryManager.StringToByteArray(BoneLoader.ExHairA.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 3)
                        {
                            if (BoneLoader.ExHairB != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairB_X), MemoryManager.StringToByteArray(BoneLoader.ExHairB.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 4)
                        {
                            if (BoneLoader.ExHairC != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairC_X), MemoryManager.StringToByteArray(BoneLoader.ExHairC.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 5)
                        {
                            if (BoneLoader.ExHairD != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairD_X), MemoryManager.StringToByteArray(BoneLoader.ExHairD.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 6)
                        {
                            if (BoneLoader.ExHairE != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairE_X), MemoryManager.StringToByteArray(BoneLoader.ExHairE.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 7)
                        {
                            if (BoneLoader.ExHairF != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairF_X), MemoryManager.StringToByteArray(BoneLoader.ExHairF.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 8)
                        {
                            if (BoneLoader.ExHairG != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairG_X), MemoryManager.StringToByteArray(BoneLoader.ExHairG.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 9)
                        {
                            if (BoneLoader.ExHairH != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairH_X), MemoryManager.StringToByteArray(BoneLoader.ExHairH.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 10)
                        {
                            if (BoneLoader.ExHairI != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairI_X), MemoryManager.StringToByteArray(BoneLoader.ExHairI.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 11)
                        {
                            if (BoneLoader.ExHairJ != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairJ_X), MemoryManager.StringToByteArray(BoneLoader.ExHairJ.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 12)
                        {
                            if (BoneLoader.ExHairK != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairK_X), MemoryManager.StringToByteArray(BoneLoader.ExHairK.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHair_Value)) >= 13)
                        {
                            if (BoneLoader.ExHairL != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExHairL_X), MemoryManager.StringToByteArray(BoneLoader.ExHairL.Replace(" ", string.Empty)));
                            }
                        }
                    }
#endregion
#region Earrings
                    if (EarringsAdvLoad == true)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringALeft_X), MemoryManager.StringToByteArray(BoneLoader.EarringALeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringARight_X), MemoryManager.StringToByteArray(BoneLoader.EarringARight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringBLeft_X), MemoryManager.StringToByteArray(BoneLoader.EarringBLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.EarringBRight_X), MemoryManager.StringToByteArray(BoneLoader.EarringBRight.Replace(" ", string.Empty)));
                    }
#endregion
#region Body
                    if (BodyAdvLoad == true)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineA_X), MemoryManager.StringToByteArray(BoneLoader.SpineA.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineB_X), MemoryManager.StringToByteArray(BoneLoader.SpineB.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BreastLeft_X), MemoryManager.StringToByteArray(BoneLoader.BreastLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.BreastRight_X), MemoryManager.StringToByteArray(BoneLoader.BreastRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SpineC_X), MemoryManager.StringToByteArray(BoneLoader.SpineC.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ScabbardLeft_X), MemoryManager.StringToByteArray(BoneLoader.ScabbardLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ScabbardRight_X), MemoryManager.StringToByteArray(BoneLoader.ScabbardRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Neck_X), MemoryManager.StringToByteArray(BoneLoader.Neck.Replace(" ", string.Empty)));
                    }
#endregion
#region LeftArm
                    if (LeftArmAdvLoad == true)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClavicleLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClavicleLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmLeft_X), MemoryManager.StringToByteArray(BoneLoader.ArmLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PauldronLeft_X), MemoryManager.StringToByteArray(BoneLoader.PauldronLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ForearmLeft_X), MemoryManager.StringToByteArray(BoneLoader.ForearmLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShoulderLeft_X), MemoryManager.StringToByteArray(BoneLoader.ShoulderLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShieldLeft_X), MemoryManager.StringToByteArray(BoneLoader.ShieldLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ElbowLeft_X), MemoryManager.StringToByteArray(BoneLoader.ElbowLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CouterLeft_X), MemoryManager.StringToByteArray(BoneLoader.CouterLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WristLeft_X), MemoryManager.StringToByteArray(BoneLoader.WristLeft.Replace(" ", string.Empty)));
                    }
#endregion
#region RightArm
                    if (RightArmAdvLoad == true)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClavicleRight_X), MemoryManager.StringToByteArray(BoneLoader.ClavicleRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ArmRight_X), MemoryManager.StringToByteArray(BoneLoader.ArmRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PauldronRight_X), MemoryManager.StringToByteArray(BoneLoader.PauldronRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ForearmRight_X), MemoryManager.StringToByteArray(BoneLoader.ForearmRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShoulderRight_X), MemoryManager.StringToByteArray(BoneLoader.ShoulderRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ShieldRight_X), MemoryManager.StringToByteArray(BoneLoader.ShieldRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ElbowRight_X), MemoryManager.StringToByteArray(BoneLoader.ElbowRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CouterRight_X), MemoryManager.StringToByteArray(BoneLoader.CouterRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WristRight_X), MemoryManager.StringToByteArray(BoneLoader.WristRight.Replace(" ", string.Empty)));
                    }
#endregion
#region Clothes
                    if (ClothesAdvLoad == true)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackALeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackALeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackARight_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackARight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontALeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontALeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontARight_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontARight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideALeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideALeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideARight_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideARight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackBLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackBLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackBRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackBRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontBLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontBLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontBRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontBRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideBLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideBLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideBRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideBRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackCLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackCLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothBackCRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothBackCRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontCLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontCLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothFrontCRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothFrontCRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideCLeft_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideCLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ClothSideCRight_X), MemoryManager.StringToByteArray(BoneLoader.ClothSideCRight.Replace(" ", string.Empty)));
                    }
#endregion
#region Weapons
                    if (WeaponsAdvLoad == true)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WeaponLeft_X), MemoryManager.StringToByteArray(BoneLoader.WeaponLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.WeaponRight_X), MemoryManager.StringToByteArray(BoneLoader.WeaponRight.Replace(" ", string.Empty)));
                    }
#endregion
#region LeftHand
                    if (LeftHandAdvLoad == true)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HandLeft_X), MemoryManager.StringToByteArray(BoneLoader.HandLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexALeft_X), MemoryManager.StringToByteArray(BoneLoader.IndexALeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyALeft_X), MemoryManager.StringToByteArray(BoneLoader.PinkyALeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingALeft_X), MemoryManager.StringToByteArray(BoneLoader.RingALeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleALeft_X), MemoryManager.StringToByteArray(BoneLoader.MiddleALeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbALeft_X), MemoryManager.StringToByteArray(BoneLoader.ThumbALeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexBLeft_X), MemoryManager.StringToByteArray(BoneLoader.IndexBLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyBLeft_X), MemoryManager.StringToByteArray(BoneLoader.PinkyBLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingBLeft_X), MemoryManager.StringToByteArray(BoneLoader.RingBLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleBLeft_X), MemoryManager.StringToByteArray(BoneLoader.MiddleBLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbBLeft_X), MemoryManager.StringToByteArray(BoneLoader.ThumbBLeft.Replace(" ", string.Empty)));
                    }
#endregion
#region RightHand
                    if (RightHandAdvLoad == true)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HandRight_X), MemoryManager.StringToByteArray(BoneLoader.HandRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexARight_X), MemoryManager.StringToByteArray(BoneLoader.IndexARight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyARight_X), MemoryManager.StringToByteArray(BoneLoader.PinkyARight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingARight_X), MemoryManager.StringToByteArray(BoneLoader.RingARight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleARight_X), MemoryManager.StringToByteArray(BoneLoader.MiddleARight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbARight_X), MemoryManager.StringToByteArray(BoneLoader.ThumbARight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.IndexBRight_X), MemoryManager.StringToByteArray(BoneLoader.IndexBRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PinkyBRight_X), MemoryManager.StringToByteArray(BoneLoader.PinkyBRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.RingBRight_X), MemoryManager.StringToByteArray(BoneLoader.RingBRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.MiddleBRight_X), MemoryManager.StringToByteArray(BoneLoader.MiddleBRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ThumbBRight_X), MemoryManager.StringToByteArray(BoneLoader.ThumbBRight.Replace(" ", string.Empty)));
                    }
#endregion
#region Waist
                    if (WaistAdvLoad == true)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.Waist_X), MemoryManager.StringToByteArray(BoneLoader.Waist.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HolsterLeft_X), MemoryManager.StringToByteArray(BoneLoader.HolsterLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.HolsterRight_X), MemoryManager.StringToByteArray(BoneLoader.HolsterRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SheatheLeft_X), MemoryManager.StringToByteArray(BoneLoader.SheatheLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.SheatheRight_X), MemoryManager.StringToByteArray(BoneLoader.SheatheRight.Replace(" ", string.Empty)));
                        if (BoneLoader.TailA != "null")
                        {
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailA_X), MemoryManager.StringToByteArray(BoneLoader.TailA.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailB_X), MemoryManager.StringToByteArray(BoneLoader.TailB.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailC_X), MemoryManager.StringToByteArray(BoneLoader.TailC.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailD_X), MemoryManager.StringToByteArray(BoneLoader.TailD.Replace(" ", string.Empty)));
                            m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.TailE_X), MemoryManager.StringToByteArray(BoneLoader.TailE.Replace(" ", string.Empty)));
                        }
                    }
#endregion
#region LeftLeg
                    if (LeftLegAdvLoad == true)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LegLeft_X), MemoryManager.StringToByteArray(BoneLoader.LegLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.KneeLeft_X), MemoryManager.StringToByteArray(BoneLoader.KneeLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CalfLeft_X), MemoryManager.StringToByteArray(BoneLoader.CalfLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PoleynLeft_X), MemoryManager.StringToByteArray(BoneLoader.PoleynLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.FootLeft_X), MemoryManager.StringToByteArray(BoneLoader.FootLeft.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ToesLeft_X), MemoryManager.StringToByteArray(BoneLoader.ToesLeft.Replace(" ", string.Empty)));
                    }
#endregion
#region RightLeg
                    if (RightLegAdvLoad == true)
                    {
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.LegRight_X), MemoryManager.StringToByteArray(BoneLoader.LegRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.KneeRight_X), MemoryManager.StringToByteArray(BoneLoader.KneeRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.CalfRight_X), MemoryManager.StringToByteArray(BoneLoader.CalfRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.PoleynRight_X), MemoryManager.StringToByteArray(BoneLoader.PoleynRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.FootRight_X), MemoryManager.StringToByteArray(BoneLoader.FootRight.Replace(" ", string.Empty)));
                        m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ToesRight_X), MemoryManager.StringToByteArray(BoneLoader.ToesRight.Replace(" ", string.Empty)));
                    }
#endregion
#region Helm
                    if (HelmAdvLoad == true)
                    {
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 2)
                        {
                            if (BoneLoader.ExMetA != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetA_X), MemoryManager.StringToByteArray(BoneLoader.ExMetA.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 3)
                        {
                            if (BoneLoader.ExMetB != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetB_X), MemoryManager.StringToByteArray(BoneLoader.ExMetB.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 4)
                        {
                            if (BoneLoader.ExMetC != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetC_X), MemoryManager.StringToByteArray(BoneLoader.ExMetC.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 5)
                        {
                            if (BoneLoader.ExMetD != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetD_X), MemoryManager.StringToByteArray(BoneLoader.ExMetD.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 6)
                        {
                            if (BoneLoader.ExMetE != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetE_X), MemoryManager.StringToByteArray(BoneLoader.ExMetE.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 7)
                        {
                            if (BoneLoader.ExMetF != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetF_X), MemoryManager.StringToByteArray(BoneLoader.ExMetF.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 8)
                        {
                            if (BoneLoader.ExMetG != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetG_X), MemoryManager.StringToByteArray(BoneLoader.ExMetG.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 9)
                        {
                            if (BoneLoader.ExMetH != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetH_X), MemoryManager.StringToByteArray(BoneLoader.ExMetH.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 10)
                        {
                            if (BoneLoader.ExMetI != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetI_X), MemoryManager.StringToByteArray(BoneLoader.ExMetI.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 11)
                        {
                            if (BoneLoader.ExMetJ != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetJ_X), MemoryManager.StringToByteArray(BoneLoader.ExMetJ.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 12)
                        {
                            if (BoneLoader.ExMetK != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetK_X), MemoryManager.StringToByteArray(BoneLoader.ExMetK.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 13)
                        {
                            if (BoneLoader.ExMetL != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetL_X), MemoryManager.StringToByteArray(BoneLoader.ExMetL.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 14)
                        {
                            if (BoneLoader.ExMetM != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetM_X), MemoryManager.StringToByteArray(BoneLoader.ExMetM.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 15)
                        {
                            if (BoneLoader.ExMetN != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetN_X), MemoryManager.StringToByteArray(BoneLoader.ExMetN.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 16)
                        {
                            if (BoneLoader.ExMetO != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetO_X), MemoryManager.StringToByteArray(BoneLoader.ExMetO.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 17)
                        {
                            if (BoneLoader.ExMetP != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetP_X), MemoryManager.StringToByteArray(BoneLoader.ExMetP.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 18)
                        {
                            if (BoneLoader.ExMetQ != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetQ_X), MemoryManager.StringToByteArray(BoneLoader.ExMetQ.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMet_Value)) >= 19)
                        {
                            if (BoneLoader.ExMetR != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExMetR_X), MemoryManager.StringToByteArray(BoneLoader.ExMetR.Replace(" ", string.Empty)));
                            }
                        }
                    }
#endregion
#region Top
                    if (TopAdvLoad == true)
                    {
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 2)
                        {
                            if (BoneLoader.ExTopA != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopA_X), MemoryManager.StringToByteArray(BoneLoader.ExTopA.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 3)
                        {
                            if (BoneLoader.ExTopB != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopB_X), MemoryManager.StringToByteArray(BoneLoader.ExTopB.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 4)
                        {
                            if (BoneLoader.ExTopC != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopC_X), MemoryManager.StringToByteArray(BoneLoader.ExTopC.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 5)
                        {
                            if (BoneLoader.ExTopD != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopD_X), MemoryManager.StringToByteArray(BoneLoader.ExTopD.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 6)
                        {
                            if (BoneLoader.ExTopE != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopE_X), MemoryManager.StringToByteArray(BoneLoader.ExTopE.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 7)
                        {
                            if (BoneLoader.ExTopF != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopF_X), MemoryManager.StringToByteArray(BoneLoader.ExTopF.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 8)
                        {
                            if (BoneLoader.ExTopG != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopG_X), MemoryManager.StringToByteArray(BoneLoader.ExTopG.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 9)
                        {
                            if (BoneLoader.ExTopH != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopH_X), MemoryManager.StringToByteArray(BoneLoader.ExTopH.Replace(" ", string.Empty)));
                            }
                        }
                        if (m.readByte(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTop_Value)) >= 10)
                        {
                            if (BoneLoader.ExTopI != "null")
                            {
                                m.writeBytes(GAS(CharacterDetailsViewModel.baseAddr, Settings.Instance.Character.Body.Base, Settings.Instance.Character.Body.Bones.ExTopI_X), MemoryManager.StringToByteArray(BoneLoader.ExTopI.Replace(" ", string.Empty)));
                            }
                        }
                    }
#endregion
                }
            }
            else return;
        }
        private void SelectAll_Click(object sender, RoutedEventArgs e)
        {
            LoadHead.IsChecked = true;
            LoadHair.IsChecked = true;
            LoadEarrings.IsChecked = true;
            LoadBody.IsChecked = true;
            LoadLeftArm.IsChecked = true;
            LoadRightArm.IsChecked = true;
            LoadClothes.IsChecked = true;
            LoadWeapons.IsChecked = true;
            LoadLeftHand.IsChecked = true;
            LoadRightHand.IsChecked = true;
            LoadWaist.IsChecked = true;
            LoadLeftLeg.IsChecked = true;
            LoadRightLeg.IsChecked = true;
            LoadHelm.IsChecked = true;
            LoadTop.IsChecked = true;
        }
        private void SelectNone_Click(object sender, RoutedEventArgs e)
        {
            LoadHead.IsChecked = false;
            LoadHair.IsChecked = false;
            LoadEarrings.IsChecked = false;
            LoadBody.IsChecked = false;
            LoadLeftArm.IsChecked = false;
            LoadRightArm.IsChecked = false;
            LoadClothes.IsChecked = false;
            LoadWeapons.IsChecked = false;
            LoadLeftHand.IsChecked = false;
            LoadRightHand.IsChecked = false;
            LoadWaist.IsChecked = false;
            LoadLeftLeg.IsChecked = false;
            LoadRightLeg.IsChecked = false;
            LoadHelm.IsChecked = false;
            LoadTop.IsChecked = false;
        }
        public Quaternion QuatMult(Quaternion q1, Quaternion q2)
        {
            double x = q1.X * q2.X - q1.Y * q2.Y - q1.Z * q2.Z - q1.W * q2.W;
            double y = q1.X * q2.Y + q1.Y * q2.X + q1.Z * q2.W - q1.W * q2.Z;
            double z = q1.X * q2.Z - q1.Y * q2.W + q1.Z * q2.X + q1.W * q2.Y;
            double w = q1.X * q2.W + q1.Y * q2.Z - q1.Z * q2.Y + q1.W * q2.X;
            Quaternion q = new Quaternion(x, y, z, w);
            q.Normalize();
            return q;
        }
        private void SaveOldRot(object sender, RoutedEventArgs e)
        {
            oldrot = new Vector3D(CharacterDetails.BoneX, CharacterDetails.BoneY, CharacterDetails.BoneZ);
        }

        private void SaveNewRot(object sender, RoutedEventArgs e)
        {
            newrot = new Vector3D(CharacterDetails.BoneX, CharacterDetails.BoneY, CharacterDetails.BoneZ);
        }
        public static Quaternion QInv(Quaternion q1)
        {
            return new Quaternion(q1.X, -q1.Y, -q1.Z, -q1.W);
        }
        public Vector3D oldrot = new Vector3D(0, 0, 0);
        public Vector3D newrot = new Vector3D(0, 0, 0);
        private void ApplyRelRot(object sender, RoutedEventArgs e)
        {
            Quaternion q1_inv = QInv(oldrot.ToQuaternion());
            Quaternion q1_new = newrot.ToQuaternion();
            Vector3D e2 = new Vector3D(CharacterDetails.BoneX, CharacterDetails.BoneY, CharacterDetails.BoneZ);
            Quaternion q2 = e2.ToQuaternion();
            Quaternion q21 = QuatMult(q2, q1_inv);
            Quaternion q2_new = QuatMult(q21, q1_new);
            Vector3D e2_new = q2_new.ToEulerAngles();
            // HOW DO I TRIGGER AN UPDATE!?!?
            if (BoneSliderButton.IsChecked == false)
            {
                System.Windows.Input.Keyboard.Focus(BoneUpDown3);
                System.Windows.Input.Keyboard.Focus(BoneUpDown3);
                BoneUpDown.Value = e2_new.X;
                BoneUpDown2.Value = e2_new.Y;
                BoneUpDown3.Value = e2_new.Z;
                BoneUpDown3_SourceUpdated(this, null);
            }
            else
            {
                System.Windows.Input.Keyboard.Focus(BoneSlider3);
                System.Windows.Input.Keyboard.Focus(BoneSlider3);
                BoneSlider.Value = e2_new.X;
                BoneSlider2.Value = e2_new.Y;
                BoneSlider3.Value = e2_new.Z;
                BoneSliders3_SourceUpdated(this, null);
            }
        }

        private void ParentingToggle_Checked(object sender, RoutedEventArgs e)
        {
            SaveSettings.Default.RelativeBones = true;
        }

        private void ParentingToggle_Unchecked(object sender, RoutedEventArgs e)
        {
            SaveSettings.Default.RelativeBones = false;
        }
    }
}